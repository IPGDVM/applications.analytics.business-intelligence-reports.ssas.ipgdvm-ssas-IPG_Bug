{
  "name": "SemanticModel",
  "compatibilityLevel": 1400,
  "model": {
    "culture": "en-US",
    "dataSources": [
      {
        "name": "Custom",
        "connectionString": "Provider=MSDASQL;Persist Security Info=False;Initial Catalog=HSD_ES;DSN=iBI DaaS",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      },
      {
        "name": "actis_db",
        "connectionString": "Provider=MSDASQL;DSN=PostgreSQL_actis",
        "impersonationMode": "impersonateServiceAccount",
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "Others"
          }
        ]
      }
    ],
    "tables": [
      {
        "name": "QueryBug",
        "columns": [
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant"
          },
          {
            "name": "ww",
            "dataType": "int64",
            "sourceColumn": "ww"
          },
          {
            "name": "family",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "family"
          },
          {
            "name": "priority",
            "dataType": "string",
            "sourceColumn": "priority"
          },
          {
            "name": "ip_supplier",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "ip_supplier"
          },
          {
            "name": "release",
            "dataType": "string",
            "sourceColumn": "release"
          },
          {
            "name": "release_affected",
            "dataType": "string",
            "sourceColumn": "release_affected"
          },
          {
            "name": "tag",
            "dataType": "string",
            "sourceColumn": "tag"
          },
          {
            "name": "status",
            "dataType": "string",
            "sourceColumn": "status"
          },
          {
            "name": "status_detail",
            "dataType": "string",
            "sourceColumn": "status_detail"
          },
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project"
          },
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id"
          },
          {
            "name": "lineage",
            "dataType": "int64",
            "sourceColumn": "lineage"
          },
          {
            "name": "original_lineage",
            "dataType": "int64",
            "sourceColumn": "original_lineage"
          },
          {
            "name": "title",
            "dataType": "string",
            "sourceColumn": "title"
          },
          {
            "name": "ww_submitted_date",
            "dataType": "string",
            "sourceColumn": "ww_submitted_date"
          },
          {
            "name": "bugeco.env_found",
            "dataType": "string",
            "sourceColumn": "bugeco.env_found"
          },
          {
            "name": "bugeco.team_found",
            "dataType": "string",
            "sourceColumn": "bugeco.team_found"
          },
          {
            "name": "bug_category",
            "dataType": "string",
            "sourceColumn": "bug_category"
          },
          {
            "name": "from_tenant",
            "dataType": "string",
            "sourceColumn": "from_tenant"
          },
          {
            "name": "from_subject",
            "dataType": "string",
            "sourceColumn": "from_subject"
          },
          {
            "name": "bugeco.type",
            "dataType": "string",
            "sourceColumn": "bugeco.type"
          },
          {
            "name": "component",
            "dataType": "string",
            "sourceColumn": "component"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url",
            "dataCategory": "WebUrl",
            "annotations": [
              {
                "name": "CategorySetBy",
                "value": "Automatic"
              },
              {
                "name": "SuggestedCategory",
                "value": "WebUrl"
              }
            ]
          },
          {
            "name": "ccb_prq_gating",
            "dataType": "string",
            "sourceColumn": "ccb_prq_gating"
          },
          {
            "name": "currentww",
            "dataType": "int64",
            "sourceColumn": "currentww"
          },
          {
            "name": "currentmonth",
            "dataType": "int64",
            "sourceColumn": "currentmonth"
          },
          {
            "name": "currentyear",
            "dataType": "string",
            "sourceColumn": "currentyear"
          },
          {
            "name": "subip_family",
            "dataType": "string",
            "sourceColumn": "subip_family"
          },
          {
            "name": "subip_supplier",
            "dataType": "string",
            "sourceColumn": "subip_supplier"
          },
          {
            "name": "is_PreSiPostSi",
            "dataType": "string",
            "sourceColumn": "is_PreSiPostSi"
          },
          {
            "name": "is_found_bySoc",
            "dataType": "string",
            "sourceColumn": "is_found_bySoc"
          },
          {
            "name": "IsCount",
            "dataType": "int64",
            "sourceColumn": "IsCount"
          },
          {
            "name": "lineage_final",
            "dataType": "int64",
            "sourceColumn": "lineage_final"
          },
          {
            "name": "IsSubIP",
            "dataType": "string",
            "sourceColumn": "IsSubIP"
          },
          {
            "name": "totalID",
            "dataType": "int64",
            "sourceColumn": "totalID"
          },
          {
            "type": "calculated",
            "name": "NoiseFilter",
            "dataType": "boolean",
            "isDataTypeInferred": true,
            "expression": "if(QueryBug[status_detail] = \"cannot_reproduce\" ||  QueryBug[status_detail] = \"filed_by_mistake\" ||  QueryBug[status_detail] = \"info_missing\" ||  QueryBug[status_detail] = \"merged\" || QueryBug[status_detail] = \"not_a_bug\" ||  QueryBug[status_detail] = \"not_a_defect\" ||QueryBug[status_detail] = \"duplicate\", FALSE(), if([tenant]=\"heia_soc\"&&[BugsFiledbySOC]=FALSE(), FALSE(),TRUE()))",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\""
          },
          {
            "type": "calculated",
            "name": "SoCFiled",
            "dataType": "boolean",
            "isDataTypeInferred": true,
            "expression": " if(QueryBug[from_tenant] in { \"sip\", \"client_conn_ip\"}, FALSE(),TRUE())",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\""
          },
          {
            "type": "calculated",
            "name": "BugsFiledbySoc",
            "dataType": "boolean",
            "isDataTypeInferred": true,
            "expression": " IF(QueryBug[SoCFiled]=TRUE() || QueryBug[IsCount]=1, TRUE(), FALSE())",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\""
          },
          {
            "type": "calculated",
            "name": "IsTrackingorSupport",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([bug_category] in {\"tracking\", \"support\"}, 1, 0)"
          },
          {
            "type": "calculated",
            "name": "Lineage_ID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([tenant]=\"server\", [id], if(ISBLANK([lineage_final]), [id], [lineage_final]))"
          },
          {
            "type": "calculated",
            "name": "MinSetID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if([tenant]=\"server\"",
              ", minx(",
              "FILTER(QueryBug",
              ",QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])&&QueryBug[bugeco.type]=\"bug\"",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&QueryBug[IsTrackingorSupport]=0",
              ")",
              ",QueryBug[id])",
              "\t, minx(",
              "\tFILTER(QueryBug",
              "\t,QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "\t&&QueryBug[bugeco.type]=\"bug\"",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&QueryBug[IsTrackingorSupport]=0",
              "\t)",
              "\t,QueryBug[id])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "ww_submitted_nbr",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "value(SUBSTITUTE(QueryBug[ww_submitted_date],\"ww\",\"\"))"
          },
          {
            "type": "calculated",
            "name": "WWSubmittedSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIntelWW[WWSeqNbr])"
          },
          {
            "type": "calculated",
            "name": "IsUnique",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([ww_submitted_nbr]=[final_unique_ww_submitted_nbr]&&[id]=[MinSetIDFinal], 1, 0)"
          },
          {
            "type": "calculated",
            "name": "unique_ww_submitted_nbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(",
              "filter(QueryBug",
              ", QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[bugeco.type]=\"bug\"",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&QueryBug[IsTrackingorSupport]=0)",
              ",QueryBug[ww_submitted_nbr])",
              "\t, minx(filter(QueryBug",
              "\t, QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[bugeco.type]=\"bug\"",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&QueryBug[IsTrackingorSupport]=0)",
              "\t,QueryBug[ww_submitted_nbr])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "SubmittedYear",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LEFT(QueryBug[ww_submitted_date],4)"
          },
          {
            "type": "calculated",
            "name": "IsActiveIP",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryCIGActiveIP[IsActiveIP])), 1, RELATED(QueryCIGActiveIP[IsActiveIP]))"
          },
          {
            "type": "calculated",
            "name": "ww_trend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RIGHT([ww_submitted_date], 2)"
          },
          {
            "type": "calculated",
            "name": "Org",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([tenant] in {\"sip\", \"heia_soc\", \"client_conn_ip\"}, \"CIG\", if([tenant]=\"hip\", \"MIG\", if([tenant] = \"server\", \"CICG\", if([tenant]=\"dft_services\", \"DTEG\", \"tbd\"))))"
          },
          {
            "type": "calculated",
            "name": "UniqueKey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Org]&\"_\"&[ww_trend]"
          },
          {
            "name": "sub_bugcategory",
            "dataType": "string",
            "sourceColumn": "sub_bugcategory"
          },
          {
            "type": "calculated",
            "name": "IntelYearQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": "RELATED(QueryIntelCalendar[IntelYearQuarter])",
            "sortByColumn": "SubmittedYear"
          },
          {
            "type": "calculated",
            "name": "unique_ww_submitted_nbr_external",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " minx(",
              "\tfilter(QueryBug",
              "\t, QueryBug[Lineage_ID]=EARLIER(QueryBug[Lineage_ID])",
              "\t&&QueryBug[tenant]=EARLIER(QueryBug[tenant])",
              "\t&& QueryBug[IsTrackingorSupport]=0",
              "\t)",
              "\t,QueryBug[ww_submitted_nbr])"
            ]
          },
          {
            "type": "calculated",
            "name": "MinSetID_External",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "minx(",
              "FILTER(QueryBug",
              ",QueryBug[Lineage_ID]=EARLIER(QueryBug[Lineage_ID])",
              "&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "&&QueryBug[tenant]=EARLIER(QueryBug[tenant])",
              "&&QueryBug[IsTrackingorSupport]=0",
              "),QueryBug[id])"
            ]
          },
          {
            "type": "calculated",
            "name": "IsUnique_External",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([ww_submitted_nbr]=[unique_ww_submitted_nbr_external]&&[id]=[MinSetID_External], 1, 0)"
          },
          {
            "type": "calculated",
            "name": "Lineage_ID_Unique",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " if([tenant]=\"heia_soc\"&&ISBLANK([lineage]), [id], if([tenant]=\"heia_soc\", [lineage], if(ISBLANK([lineage_final]), [id], [lineage_final])))"
          },
          {
            "name": "retro_status",
            "dataType": "string",
            "sourceColumn": "retro_status"
          },
          {
            "name": "retro_ip_escape",
            "dataType": "string",
            "sourceColumn": "retro_ip_escape"
          },
          {
            "name": "retro_global_learning",
            "dataType": "string",
            "sourceColumn": "retro_global_learning"
          },
          {
            "name": "retro_global_action",
            "dataType": "string",
            "sourceColumn": "retro_global_action"
          },
          {
            "name": "retro_analysis",
            "dataType": "string",
            "sourceColumn": "retro_analysis"
          },
          {
            "name": "retro_learnings",
            "dataType": "string",
            "sourceColumn": "retro_learnings"
          },
          {
            "type": "calculated",
            "name": "APBExclude",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([tenant]=\"hip\"&&[is_found_bySoc] in {\"PostSiBug Found by IP\", \"PreSiBug Found by IP\"}, 1, if([tenant]=\"server\"&&([bug_category]=\"doc\"|| [is_found_bySoc] in {\"HW PreSiBug Found by IP\", \"PostSiBug NoSoC\", \"PreSiBug NoSoC\",\"SW/FW PreSiBug Found by IP\",\"SW/FW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PreSiBug Found by Customers\", \"SW/FW PostSiBug Found by Customers\"}), 1, if([tenant] in{\"sip\", \"client_conn_ip\"}&&[is_found_bySoc]=\"PreSiBug Found by IP\",1, IF([tenant]=\"dft_services\", 1, 0))))"
          },
          {
            "type": "calculated",
            "name": "StatusOrder",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([status]=\"open\", 1, if([status]=\"approved\", 2, if([status]=\"in_progress\", 3, if([status]=\"change_defined\", 4, if([status]=\"repo_modified\", 5,  if([status]=\"rejected\", 6, if([status]=\"complete\", 7, if([status]=\"future\", 8, 9))))))))"
          },
          {
            "type": "calculated",
            "name": "statusNameOrder",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[status]",
            "sortByColumn": "StatusOrder"
          },
          {
            "type": "calculated",
            "name": "Query_currentWW",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RIGHT([currentww], 2)"
          },
          {
            "name": "owner",
            "dataType": "string",
            "sourceColumn": "owner"
          },
          {
            "name": "ww_closed_date",
            "dataType": "int64",
            "sourceColumn": "ww_closed_date"
          },
          {
            "type": "calculated",
            "name": "is_active_bug",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF([status] in {\"open\",\"repo_modified\",\"change_defined\",\"approved\"},1,0)"
          },
          {
            "type": "calculated",
            "name": "IPFamily",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryGladius[Family]))||RELATED(QueryGladius[Family]) in{\"tbd\", \"multi\"}, [family], RELATED(QueryGladius[Family]))"
          },
          {
            "type": "calculated",
            "name": "IPSupplier",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryGladius[Family]))||RELATED(QueryGladius[Family]) in{\"tbd\", \"multi\"}, [ip_supplier], RELATED(QueryGladius[ip_supplier]))"
          },
          {
            "type": "calculated",
            "name": "Gladius",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryGladius[Gladius])"
          },
          {
            "type": "calculated",
            "name": "sub_bugcategory_nbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([sub_bugcategory]=\"functional\", 1, if([sub_bugcategory]=\"physical\", 2, if([sub_bugcategory]=\"FW/SW\", 3, if([sub_bugcategory]=\"DOC\", 4, if([sub_bugcategory]=\"arch\", 5, if([sub_bugcategory]=\"collateral\", 6, if([sub_bugcategory]=\"val\", 7, if([sub_bugcategory]=\"other\", 8, 9))))))))"
          },
          {
            "type": "calculated",
            "name": "subbugcategory",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[sub_bugcategory]",
            "sortByColumn": "sub_bugcategory_nbr"
          },
          {
            "type": "calculated",
            "name": "DevSubOrg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryGladius[devsuborg])), RELATED(QueryDevGroup[devsuborg]), RELATED(QueryGladius[devsuborg]))"
          },
          {
            "type": "calculated",
            "name": "family, soc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LOWER([Family]) &\", \"& LOWER([project_short])"
          },
          {
            "type": "calculated",
            "name": "project_short",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(RIGHT([project_step2],1) = \" \",",
              "LEFT([project_step2],len([project_step2])-1),",
              "[project_step2])"
            ]
          },
          {
            "type": "calculated",
            "name": "project_step1",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "SUBSTITUTE(SUBSTITUTE([project],\"_\",\" \"),\"-\",\" \")"
          },
          {
            "type": "calculated",
            "name": "project_step2",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LEFT([project_step1],",
              "FIND(\" \",[project_step1],",
              "FIND(\" \",[project_step1],1,1)+1,LEN([project_step1]))",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "is_active_legend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([is_active_bug]=1, \"Active\", \"Not Active\")"
          },
          {
            "name": "original_family",
            "dataType": "string",
            "sourceColumn": "original_family"
          },
          {
            "name": "bugeco.release_found",
            "dataType": "string",
            "sourceColumn": "bugeco.release_found"
          },
          {
            "type": "calculated",
            "name": "Sathi_check",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if(    FIND(\"DC_\", [original_family], 1, 9999) = 9999 && FIND(\"SYSIP_\", [original_family], 1, 9999) = 9999 , 0, ",
              "if(FIND(\"mtl\", [bugeco.release_found], 1, 9999) <> 9999 ||  FIND(\"grr\", [bugeco.release_found], 1, 9999) <> 9999 ||  (FIND(\"gnr\", [bugeco.release_found], 1, 9999) <> 9999  && FIND(\"_GNR\", [bugeco.release_found], 1, 9999) = 9999 ) , 1, 0    ) )"
            ]
          },
          {
            "type": "calculated",
            "name": "CurrentWWSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelWW[WWSeqNbr],QueryIntelWW[Intel Year-Work Week],[currentww])"
          },
          {
            "type": "calculated",
            "name": "IsSubmittedLast2Wk",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([CurrentWWSeqNbr]-[WWSubmittedSeqNbr]<2, 1, 0)"
          },
          {
            "type": "calculated",
            "name": "IsClonedtoIPTenant",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "If(ISBLANK(RELATED(QueryLineageClientSoCChipsetBug[lineage])), 0, 1)"
          },
          {
            "type": "calculated",
            "name": "Process",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryCarbon[process])"
          },
          {
            "type": "calculated",
            "name": "IntelYearQuarterSort",
            "dataType": "string",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": "LEFT([IntelYearQuarter],4)&RIGHT([IntelYearQuarter],1)"
          },
          {
            "type": "calculated",
            "name": "Year_Quarter_sortingnbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "isHidden": true,
            "expression": "RELATED(QueryQuarter[QuarterSorting])"
          },
          {
            "type": "calculated",
            "name": "SubmittedYear_Quarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[IntelYearQuarter]",
            "sortByColumn": "Year_Quarter_sortingnbr"
          },
          {
            "type": "calculated",
            "name": "Environment",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "SUBSTITUTE(",
              "LEFT(SUBSTITUTE([bugeco.env_found],\".\",\" \"),FIND(\" \",SUBSTITUTE([bugeco.env_found],\".\",\" \"),,LEN([bugeco.env_found])))",
              ",\" \", \"\")"
            ]
          },
          {
            "type": "calculated",
            "name": "Base_BugEscape",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryBug[NoiseFilter]=TRUE()&& QueryBug[SubmittedYear]=\"2020\"&&QueryBug[is_found_bySoc] in{\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}&& QueryBug[IsActiveIP]=1&&QueryBug[bugeco.type]=\"bug\"&&QueryBug[IsUnique]=1&&QueryBug[IsRealBug]=1&&QueryBug[IsTestChip]=0,1,0)"
          },
          {
            "name": "generation",
            "dataType": "string",
            "sourceColumn": "generation"
          },
          {
            "name": "IsRealBug",
            "dataType": "int64",
            "sourceColumn": "IsRealBug"
          },
          {
            "type": "calculated",
            "name": "IsTestChip",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryTestChip[IsTestChip])), 0, 1)"
          },
          {
            "type": "calculated",
            "name": "MinSetIDFutureStepping",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(FILTER(QueryBug",
              ",QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "&&QueryBug[bugeco.type]=\"bug\"&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&QueryBug[status]=\"rejected\"",
              "&&QueryBug[status_detail] in{\"future_stepping\", \"rejected.future_stepping\"}",
              "&&QueryBug[IsTrackingorSupport]=0)",
              ",QueryBug[id])",
              "\t, minx(FILTER(QueryBug",
              "\t,QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "\t&&QueryBug[bugeco.type]=\"bug\"&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0&&QueryBug[status]=\"rejected\"",
              "\t&&QueryBug[status_detail] in{\"future_stepping\", \"rejected.future_stepping\"}",
              "\t&&QueryBug[IsTrackingorSupport]=0)",
              "\t,QueryBug[id])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "IsFuturestepping",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "If([status]=\"rejected\"&&[status_detail] in {\"future_stepping\", \"rejected.future_stepping\"},1, 0)"
          },
          {
            "type": "calculated",
            "name": "MinSetIDFinal",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(QueryBug[MinSetIDFutureStepping]), [MinSetID], [FinalMinSetIDFutureStepping])"
          },
          {
            "type": "calculated",
            "name": "ww_future_stepping",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(filter(QueryBug",
              ", QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[bugeco.type]=\"bug\"",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&[id]=[MinSetIDFutureStepping]",
              "&&[IsFuturestepping]=1",
              "&&QueryBug[IsTrackingorSupport]=0)",
              ",QueryBug[ww_submitted_nbr])",
              "\t, minx(filter(QueryBug",
              "\t, QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[bugeco.type]=\"bug\"",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&[id]=[MinSetIDFutureStepping]",
              "\t&&[IsFuturestepping]=1",
              "\t&&QueryBug[IsTrackingorSupport]=0)",
              "\t,QueryBug[ww_submitted_nbr])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "final_unique_ww_submitted_nbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([final_ww_future_stepping]), [unique_ww_submitted_nbr], [final_ww_future_stepping])"
          },
          {
            "type": "calculated",
            "name": "status_with_notbug",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([IsRealBug]=1,[status],\"NotBug\")",
            "sortByColumn": "status_with_notbug_order"
          },
          {
            "type": "calculated",
            "name": "status_with_notbug_order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF([IsRealBug]=0,0,",
              "if([status]=\"rejected\", 1,",
              "if([status]=\"complete\", 2, ",
              "if([status]=\"approved\", 3, ",
              "if([status]=\"repo_modified\", 4, ",
              "if([status]=\"in_progress\", 5,  ",
              "if([status]=\"open\", 6, ",
              "if([status]=\"change_defined\", 7,",
              "if([status]=\"future\", 8, ",
              "9",
              ")))))))))"
            ]
          },
          {
            "type": "calculated",
            "name": "RTL1p0Date",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryRTL1p0[TrendYYYYWW])"
          },
          {
            "type": "calculated",
            "name": "IsPIC",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "If(ISBLANK(RELATED(QueryRTL1p0[Category])), \"NotMatch\", RELATED(QueryRTL1p0[Category]))"
          },
          {
            "type": "calculated",
            "name": "RTL1p0DateSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelWW[WWSeqNbr],QueryIntelWW[Intel Year-Work Week],[RTL1p0Date])"
          },
          {
            "type": "calculated",
            "name": "RTL1p0Milestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([IsPIC]=\"NotMatch\", \"NotMatchRelease/Config\", if([IsBlankRTL1p0Date]=1, \"NoRTL1p0Date\", if([tenant]=\"server\", \"N/A\", if([IsPIC]=\"NonPIC\"&&[WWSubmittedSeqNbr]>=[RTL1p0DateSeqNbr], \"PostRTL1p0\", if([IsPIC]=\"NonPIC\"&&[WWSubmittedSeqNbr]<[RTL1p0DateSeqNbr], \"PreRTL1p0\", if([IsPIC]=\"PIC\"&&[tenant] in {\"sip\", \"dft_services\"}&&[milestone] in {\"RTL1p0\", \"RTL1p1\", \"Post RTL1P0\"}, \"PostRTL1p0\",if([IsPIC]=\"PIC\"&&[tenant] in {\"sip\", \"dft_services\"}&&[milestone] in {\"RTL0p0\", \"RTL0p5\", \"RTL0p8\"}, \"PreRTL1p0\", if([IsPIC]=\"PIC\"&&[tenant] in {\"server\", \"dft_services\"}, \"N/A\", \"tbd\" ))))))))"
          },
          {
            "name": "milestone",
            "dataType": "string",
            "sourceColumn": "milestone"
          },
          {
            "type": "calculated",
            "name": "IsBlankRTL1p0Date",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryRTL1p0[IsBlankTrendDate])"
          },
          {
            "type": "calculated",
            "name": "Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " RELATED(QueryIntelCalendar[Intel Month Name])",
            "sortByColumn": "MonthNbr"
          },
          {
            "type": "calculated",
            "name": "MonthNbr",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " Related(QueryIntelCalendar[Intel Month])"
          },
          {
            "type": "calculated",
            "name": "YearMonth_submitted",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": " QueryBug[SubmittedYear]&QueryBug[MonthNbr]"
          },
          {
            "type": "calculated",
            "name": "YearMonth_submitted_SeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMonth[YearMonthSeqNbr],QueryMonth[IntelYear_Month],QueryBug[YearMonth_submitted])"
          },
          {
            "type": "calculated",
            "name": "CurrentYearMonth",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "[currentyear]&FORMAT([currentmonth],\"00\")"
          },
          {
            "type": "calculated",
            "name": "CurrentYearMonthSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMonth[YearMonthSeqNbr],QueryMonth[IntelYear_Month],QueryBug[CurrentYearMonth])",
            "formatString": "0"
          },
          {
            "type": "calculated",
            "name": "IsSubmittedLast4Month",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(([CurrentYearMonthSeqNbr]-[YearMonth_submitted_SeqNbr]) < 4,1,0)"
          },
          {
            "type": "calculated",
            "name": "YearMonthDisplay",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Month]&\"-\"&RIGHT([SubmittedYear],2)",
            "sortByColumn": "YearMonth_submitted_SeqNbr"
          },
          {
            "name": "BugFixedDoneDate",
            "dataType": "string",
            "sourceColumn": "BugFixedDoneDate"
          },
          {
            "type": "calculated",
            "name": "IsBugInternalFixedDateMatchWW_Submitted",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([BugFixedDoneDate],1,0) /*Used to map BugInternalFixDone on ww_submited_nbr axis*/"
          },
          {
            "type": "calculated",
            "name": "Environment_order",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if([Environment]=\"code_gen\", 1,",
              "if([Environment]=\"simulatiion\", 5, ",
              "if([Environment]=\"simulation\", 10, ",
              "if([Environment]=\"logic_verif\", 15, ",
              "if([Environment]=\"phys_verif\", 20,  ",
              "if([Environment]=\"synthesis\", 25, ",
              "if([Environment]=\"formal\", 30,",
              "if([Environment]=\"fpga\", 35, ",
              "if([Environment]=\"emulation\", 40, ",
              "if([Environment]=\"virtual_platf\", 45,",
              "if([Environment]=\"review\", 50, ",
              "if([Environment]=\"integration\", 55, ",
              "if([Environment]=\"silicon\", 60, ",
              "100",
              ")))))))))))))"
            ]
          },
          {
            "type": "calculated",
            "name": "Environment_with_order",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Environment]",
            "sortByColumn": "Environment_order"
          },
          {
            "type": "calculated",
            "name": "PreviousYearMonth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMonth[IntelYear_Month],QueryMonth[YearMonthSeqNbr],[CurrentYearMonthSeqNbr]-1)"
          },
          {
            "type": "calculated",
            "name": "previousww",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelWW[Intel Year-Work Week],QueryIntelWW[WWSeqNbr],[CurrentWWSeqNbr]-1)"
          },
          {
            "type": "calculated",
            "name": "MinSetIDFutureStepping_w_NotABug",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "    MINX(",
              "        FILTER(",
              "            QueryBug,",
              "            QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "            &&QueryBug[bugeco.type]=\"bug\"",
              "            &&QueryBug[IsTestChip]=0",
              "            &&QueryBug[status]=\"rejected\"",
              "            &&QueryBug[status_detail]in{\"future_stepping\",\"rejected.future_stepping\"}",
              "        ),",
              "        QueryBug[id])"
            ]
          },
          {
            "type": "calculated",
            "name": "IsSubmittedLast6Month",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(([CurrentYearMonthSeqNbr]-[YearMonth_submitted_SeqNbr]) < 6,1,0)"
          },
          {
            "type": "calculated",
            "name": "CurrentYearQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelCalendar[IntelYearQuarter],QueryIntelCalendar[Intel Year-Work Week],QueryBug[currentww])"
          },
          {
            "type": "calculated",
            "name": "CurrentYearQuarter_SeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryQuarter[QuarterSorting],QueryQuarter[Year_Quarter],LEFT(QueryBug[CurrentYearQuarter],4)&RIGHT(QueryBug[CurrentYearQuarter],1))"
          },
          {
            "type": "calculated",
            "name": "PreviousYearQuarter_nbr",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryQuarter[Year_Quarter],QueryQuarter[QuarterSorting],QueryBug[CurrentYearQuarter_SeqNbr]-1)"
          },
          {
            "type": "calculated",
            "name": "PreviousYearQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LEFT(QueryBug[PreviousYearQuarter_nbr],4)&\"Q\"&RIGHT(QueryBug[PreviousYearQuarter_nbr],1)"
          },
          {
            "type": "calculated",
            "name": "IsSubmittedLast13Wk",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([CurrentWWSeqNbr]-[WWSubmittedSeqNbr]<13, 1, 0)"
          },
          {
            "type": "calculated",
            "name": "SubOrg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryGladius[devsuborg])), RELATED(QueryDevGroup[devsuborg]), RELATED(QueryGladius[devsuborg]))"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration"
          },
          {
            "type": "calculated",
            "name": "InternalBugIds",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryBug[IsActiveIP]=1&&QueryBug[IsUnique]=1&&QueryBug[IsRealBug]=1&&QueryBug[bugeco.type]=\"bug\"&&QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by IP\",\"SW/FW PreSiBug Found by IP\",\"SW/FW PostSiBug Found by IP\"},QueryBug[id])"
          },
          {
            "name": "submitted_date",
            "dataType": "dateTime",
            "sourceColumn": "submitted_date"
          },
          {
            "type": "calculated",
            "name": "MinSetIDNotFutureStepping",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(FILTER(QueryBug,QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "&&QueryBug[bugeco.type]=\"bug\"",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&QueryBug[IsFuturestepping]=0",
              "&&QueryBug[IsTrackingorSupport]=0)",
              ",QueryBug[id])",
              "\t, minx(FILTER(QueryBug",
              "\t,QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "\t&&QueryBug[bugeco.type]=\"bug\"",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&QueryBug[IsFuturestepping]=0",
              "\t&&QueryBug[IsTrackingorSupport]=0)",
              "\t,QueryBug[id])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "FinalMinSetIDFutureStepping",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([MinSetIDNotFutureStepping]), [MinSetIDFutureStepping], [MinSetIDNotFutureStepping])"
          },
          {
            "type": "calculated",
            "name": "final_ww_future_stepping",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([ww_not_future_stepping]), [ww_future_stepping], [ww_not_future_stepping])"
          },
          {
            "type": "calculated",
            "name": "ww_not_future_stepping",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(filter(QueryBug, QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[bugeco.type]=\"bug\"",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0&&[id]=[MinSetIDNotFutureStepping]",
              "&&[IsFuturestepping]=0",
              "&&QueryBug[IsTrackingorSupport]=0)",
              ",QueryBug[ww_submitted_nbr])",
              "\t, minx(filter(QueryBug",
              "\t, QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[bugeco.type]=\"bug\"",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&[id]=[MinSetIDNotFutureStepping]",
              "\t&&[IsFuturestepping]=0",
              "\t&&QueryBug[IsTrackingorSupport]=0)",
              "\t,QueryBug[ww_submitted_nbr])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "env_found",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "-- remove all space if have from word from inside\\",
              "SUBSTITUTE(",
              "\tLEFT(",
              "\t\t--remove all periods with space",
              "\t\tSUBSTITUTE([bugeco.env_found],\".\",\" \"),",
              "\t\t--find index of space in bugeco.env_found with space otherwise return length of word (basically return length of word up to space)",
              "\t\tFIND(\" \",SUBSTITUTE([bugeco.env_found],\".\",\" \"),,LEN([bugeco.env_found]))",
              "\t)",
              ",\" \", \"\")"
            ],
            "sortByColumn": "Environment_order"
          },
          {
            "type": "calculated",
            "name": "team_found",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "-- remove all space if have from word from inside\\",
              "SUBSTITUTE(",
              "\tLEFT(",
              "\t\t--remove all periods with space",
              "\t\tSUBSTITUTE([bugeco.team_found],\".\",\" \"),",
              "\t\t--find index of space in bugeco.env_found with space otherwise return length of word (basically return length of word up to space)",
              "\t\tFIND(\" \",SUBSTITUTE([bugeco.team_found],\".\",\" \"),,LEN([bugeco.team_found]))",
              "\t)",
              ",\" \", \"\")"
            ]
          },
          {
            "type": "calculated",
            "name": "Platform",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(RIGHT([project_step2],1) = \" \",",
              "LEFT([project_step2],len([project_step2])-1),",
              "[project_step2])"
            ]
          },
          {
            "type": "calculated",
            "name": "SOC Die Count",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " COUNTROWS(FILTER(QueryBug, ",
              "\tQueryBug[SocDieForSorting] = EARLIER(QueryBug[SocDieForSorting])",
              "\t&& QueryBug[IsRealBug]=1",
              "\t&& QueryBug[bugeco.type]=\"bug\"",
              "\t&& QueryBug[IsUnique]=1",
              "\t&& QueryBug[IsActiveIP]=1",
              "\t&& QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}))"
            ]
          },
          {
            "type": "calculated",
            "name": "SOC_Die_Sorting_Desc",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " RANKX(QueryBug,QueryBug[SOC Die Count],,DESC,Dense)"
          },
          {
            "name": "SoCDieForSorting",
            "dataType": "string",
            "sourceColumn": "SoCDieForSorting"
          },
          {
            "type": "calculated",
            "name": "Soc Die",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " [SocDieForSorting]"
          },
          {
            "type": "calculated",
            "name": "NarendraSocDieSort",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " QueryBug[SoCDieForSorting]",
            "sortByColumn": "SOC_Die_Sorting_Desc"
          },
          {
            "type": "calculated",
            "name": "PreviousYear",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": " QueryBug[currentyear] - 1"
          },
          {
            "name": "supplier_org",
            "dataType": "string",
            "sourceColumn": "supplier_org"
          },
          {
            "type": "calculated",
            "name": "current_ww_trend_in_quarter",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "-- This gives the order number of ww in CURRENT QUARTER (1-13)",
              "var ww_trend_in_quarter_with_0s = MOD(VALUE(RIGHT(querybug[currentww],2)),13)",
              "return if(ww_trend_in_quarter_with_0s=0,13,ww_trend_in_quarter_with_0s)"
            ]
          },
          {
            "type": "calculated",
            "name": "ww_submitted_trend_in_quarter",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "-- This gives the order number of WW_SUBMITTED in SUBMITTED_QUARTER (1-13)",
              "var ww_trend_before_account_for_0s =  MOD(VALUE(QueryBug[ww_trend]),13)",
              "return if(ww_trend_before_account_for_0s = 0,13,ww_trend_before_account_for_0s)"
            ]
          },
          {
            "type": "calculated",
            "name": "IsHIPSIPType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " RELATED(QueryCarbon[HIP/SIP])"
          },
          {
            "type": "calculated",
            "name": "lineage_from_ClientSOC",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryClientSoCChipsetBug[ipg_lineage],QueryClientSoCChipsetBug[ipg_lineage],[Lineage_ID_Unique])"
          },
          {
            "type": "calculated",
            "name": "is_cloned_from_ClientSOC",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(ISBLANK([lineage_from_ClientSOC]),0,1)"
          },
          {
            "type": "calculated",
            "name": "TapeinMilestone",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF(ISBLANK(QueryBug[DEG_TapeIn_SeqNbr])",
              "\t,\"No Tapein\"",
              "\t,IF(QueryBug[WWSubmittedSeqNbr] >= QueryBug[DEG_TapeIn_SeqNbr]",
              "\t \t,\"Post Tapein\"",
              "\t \t,\"Pre Tapein\"",
              "\t)",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Tapein",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": " RELATED(QueryTapein[Tapein])"
          },
          {
            "type": "calculated",
            "name": "IsSubmittedLast4WkToDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var four_weeks_ago = TODAY() - 28",
              "return ",
              "if(QueryBug[submitted_date] > four_weeks_ago,1,0)"
            ]
          },
          {
            "name": "submitted_by",
            "dataType": "string",
            "sourceColumn": "submitted_by"
          },
          {
            "name": "updated_by",
            "dataType": "string",
            "sourceColumn": "updated_by"
          },
          {
            "name": "responseSLA",
            "dataType": "string",
            "sourceColumn": "responseSLA"
          },
          {
            "name": "resolutionSLA",
            "dataType": "string",
            "sourceColumn": "resolutionSLA"
          },
          {
            "name": "sla_response_met",
            "dataType": "string",
            "sourceColumn": "sla_response_met"
          },
          {
            "name": "sla_resolution_met",
            "dataType": "string",
            "sourceColumn": "sla_resolution_met"
          },
          {
            "name": "updated_date",
            "dataType": "dateTime",
            "sourceColumn": "updated_date"
          },
          {
            "name": "ww_updated_date",
            "dataType": "int64",
            "sourceColumn": "ww_updated_date"
          },
          {
            "name": "closed_date",
            "dataType": "dateTime",
            "sourceColumn": "closed_date"
          },
          {
            "name": "sla_response_date",
            "dataType": "dateTime",
            "sourceColumn": "sla_response_date"
          },
          {
            "name": "sla_resolution_date",
            "dataType": "dateTime",
            "sourceColumn": "sla_resolution_date"
          },
          {
            "name": "is_new",
            "dataType": "int64",
            "sourceColumn": "is_new"
          },
          {
            "name": "is_response_failed",
            "dataType": "int64",
            "sourceColumn": "is_response_failed"
          },
          {
            "name": "is_response_met",
            "dataType": "int64",
            "sourceColumn": "is_response_met"
          },
          {
            "name": "response_time_filter",
            "dataType": "int64",
            "sourceColumn": "response_time_filter"
          },
          {
            "name": "is_resolution_failed",
            "dataType": "int64",
            "sourceColumn": "is_resolution_failed"
          },
          {
            "name": "is_resolution_met",
            "dataType": "int64",
            "sourceColumn": "is_resolution_met"
          },
          {
            "name": "resolution_time_filter",
            "dataType": "int64",
            "sourceColumn": "resolution_time_filter"
          },
          {
            "type": "calculated",
            "name": "DEG_Program",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(QueryBug[Configuration] in {\"CAVS2.5_TGP-LP\"",
              ",\"USB Controller_v18.0_TGL-UY42\"",
              ",\"USB Controller_v18.0_TGL-LP\"",
              ",\"ISH5.4_TGP-LP\"",
              ",\"DFx Northpeak_PIC\"",
              ",\"PXP Controller_ICL-U42\"",
              ",\"PXP PCIe_v15.1_TGL-UY42\"",
              ",\"NA\"",
              "} && QueryBug[Soc Die] = \"Tiger Lake U/Y 4+2 Die\", \"TGL\",",
              "",
              "IF(QueryBug[Configuration] in {\"cAVS_ADP-S\"",
              ",\"USB Controller ADP-LP\"",
              ",\"ISH_ADP-S\"",
              ",\"DFx Northpeak_PIC\"",
              ",\"PXP DMI_ADL-S\"",
              ",\"PXP PCIe_2x16_ADL-S\"",
              ",\"PXP PCIex4_ADL-S\"",
              ",\"PXP DMI_ADP-S\"",
              ",\"PXP PCIe_ADP-S\"",
              ",\"MEMIP_LP_DDR_v6.5_ADL_S\"",
              "} && QueryBug[Soc Die] = \"Alder Lake S 8C+8A+GT1 CPU Die\", \"ADL\", ",
              "",
              "IF(QueryBug[Configuration] in {\"ACE_MTLSOCM\"",
              ",\"USB Controller_SA_MTLSOCM\"",
              "",
              ",\"ISH_MTLSOCM\"",
              ",\"DFx Northpeak_PIC22\"",
              ",\"PCIe_1x4_1LM_MTLSOCM\"",
              ",\"PXP PCIe_1x4_TC_MTLSOCM\"",
              ",\"PXP PCIe_1x8_G5_MTL-IOEP\"",
              ",\"PXP PCIe_4x4_MTLSOCM\"",
              ",\"NA\"",
              "} && QueryBug[Soc Die] = \"Meteor Lake Base-P682-ADM Die\", \"MTL\",",
              "",
              "IF(QueryBug[Configuration] in {\"ACE_LNLSOCM\"",
              ",\"USB3CTL_Gen19.2_SA_PIC\"",
              "",
              ",\"ISH_Gen6.0_Client\"",
              ",\"DFD_NPK_PIC24\"",
              ",\"PXP_Gen15.4_1Px4_TC_LNLSOCP\"",
              ",\"PXP_Gen17.2_1Px4_PIC\"",
              ",\"PXP_Gen17.2_1Px8_PIC\"",
              ",\"PXP_Gen17.3_4Px4_PIC\"",
              ",\"xM_PHY_G1_LP\"",
              "} && QueryBug[Soc Die] = \"Lunar Lake CPU-M442 Die\", \"LNL\")",
              ")",
              ")",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "InternalvsProject",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if([is_found_bySoc] in { \"HW PreSiBug Found by IP\", \"SW/FW PreSiBug Found by IP\",\"SW/FW PostSiBug Found by IP\"}, \"IP\", [Soc Die])"
          },
          {
            "type": "calculated",
            "name": "DEG_TapeIn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF(",
              "ISBLANK(RELATED(DEG_Product_Manual_TI[TI Date])), RELATED(QueryTapein[Tapein]), ",
              "RELATED(DEG_Product_Manual_TI[TI Date]))",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "DEG_TapeIn_SeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE(",
              "QueryIntelWW[WWSeqNbr],",
              "QueryIntelWW[Intel Year-Work Week],",
              "INT([DEG_TapeIn]))",
              "",
              "",
              ""
            ]
          },
          {
            "name": "ingredient",
            "dataType": "string",
            "sourceColumn": "ingredient"
          },
          {
            "name": "ww_repo_modified_date",
            "dataType": "int64",
            "sourceColumn": "ww_repo_modified_date"
          },
          {
            "type": "calculated",
            "name": "2021Base_BugEscape",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if(QueryBug[NoiseFilter]=TRUE()&& QueryBug[SubmittedYear]=\"2021\"&&QueryBug[is_found_bySoc] in{\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}&& QueryBug[IsActiveIP]=1&&QueryBug[bugeco.type]=\"bug\"&&QueryBug[IsUnique]=1&&QueryBug[IsRealBug]=1&&QueryBug[IsTestChip]=0,1,0)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "bug_termination_date",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "switch(QueryBug[status],",
              "\"complete\", QueryBug[ww_closed_date],",
              "\"rejected\", IF(QueryBug[status_detail] in {\"rejected.wont_fix\", \"wont_fix\", \"rejected.wont_do\"}, QueryBug[ww_closed_date], -1),",
              "\"repo_modified\", QueryBug[ww_repo_modified_date],",
              "-1)",
              "-- -1 means open, approved, future, change_defined"
            ]
          },
          {
            "type": "calculated",
            "name": "Internal v. SoC Filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(CALCULATE(COUNT(QueryBug[id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by IP\",\"SW/FW PreSiBug Found by IP\",\"SW/FW PostSiBug Found by IP\",\"HW PostSiBug Found by TestChip\",",
              "    \"HW PreSiBug Found by TestChip\",\t\"SW/FW PostSiBug Found by TestChip\",\"SW/FW PreSiBug Found by TestChip\"",
              "}",
              ",QueryBug[IsTrackingorSupport]=0) > 0, 1, 0)"
            ]
          },
          {
            "name": "ww_future_date",
            "dataType": "int64",
            "sourceColumn": "ww_future_date"
          },
          {
            "type": "calculated",
            "name": "future_date_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryBug[status] = \"future\", [ww_future_date_complete], if(querybug[status]=\"rejected\"&&QueryBug[status_detail] in {\"rejected.future_stepping\", \"rejected.future_project\", \"rejected.future_product\", \"future_project\", \"future_stepping\"}, [ww_closed_date], -1)) "
          },
          {
            "type": "calculated",
            "name": "closed_date_filter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "SWITCH(QueryBug[status],",
              "\"complete\", IF(ISBLANK(QueryBug[ww_closed_date]), QueryBug[ww_closed_date_complete], QueryBug[ww_closed_date]),",
              "\"rejected\", IF(QueryBug[status_detail] in {\"rejected.wont_fix\", \"rejected\", \"rejected.wont_do\", \"wont_fix\"}, QueryBug[ww_closed_date], -1),",
              "-1)"
            ]
          },
          {
            "type": "calculated",
            "name": "ww_future_date_complete",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryBug[status]=\"future\" && ISBLANK(QueryBug[ww_future_date]), QueryBug[ww_submitted_datePlusTwo], QueryBug[ww_future_date])"
          },
          {
            "type": "calculated",
            "name": "ww_submitted_datePlusTwo",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryIntelWW[Intel Year-Work Week], QueryIntelWW[WWSeqNbr], QueryBug[WWSubmittedSeqNbr]+2)"
          },
          {
            "type": "calculated",
            "name": "ww_repo_modified_datePlusTwo",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF(ISBLANK(QueryBug[ww_repo_modified_date]), BLANK(), ",
              "",
              "LOOKUPVALUE(QueryIntelWW[Intel Year-Work Week], QueryIntelWW[WWSeqNbr], ",
              "(LOOKUPVALUE(QueryIntelWW[WWSeqNbr], QueryIntelWW[Intel Year-Work Week], QueryBug[ww_repo_modified_date])+2))",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "ww_closed_date_complete",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryBug[status]=\"complete\" && ISBLANK(QueryBug[ww_closed_date]), QueryBug[ww_repo_modified_datePlusTwo], QueryBug[ww_closed_date])"
          },
          {
            "type": "calculated",
            "name": "MinSetIDwithEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if([tenant]=\"server\"",
              ", minx(",
              "FILTER(QueryBug",
              ",QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0",
              ")",
              ",QueryBug[id])",
              "\t, minx(",
              "\tFILTER(QueryBug",
              "\t,QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0",
              "\t)",
              "\t,QueryBug[id])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Is_from_subject_exclude",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([from_subject]=\"feature\", 1, 0)"
          },
          {
            "type": "calculated",
            "name": "is_from_tenant_exclude",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([from_tenant]=\"sip\", 1, 0)"
          },
          {
            "type": "calculated",
            "name": "unique_ww_submitted_nbr_withEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(",
              "filter(QueryBug",
              ", QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&QueryBug[IsTrackingorSupport]=0&&QueryBug[is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              "",
              ",QueryBug[ww_submitted_nbr])",
              "\t, minx(filter(QueryBug",
              "\t, QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&QueryBug[IsTrackingorSupport]=0&&QueryBug[is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              "\t,QueryBug[ww_submitted_nbr])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "MinSetIDFutureSteppingwithEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(FILTER(QueryBug",
              ",QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&QueryBug[status]=\"rejected\"",
              "&&QueryBug[status_detail] in{\"future_stepping\", \"rejected.future_stepping\"}",
              "&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              ",QueryBug[id])",
              "\t, minx(FILTER(QueryBug",
              "\t,QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0&&QueryBug[status]=\"rejected\"",
              "\t&&QueryBug[status_detail] in{\"future_stepping\", \"rejected.future_stepping\"}",
              "\t&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              "\t,QueryBug[id])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "MinSetIDFinalwithEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(QueryBug[MinSetIDFutureSteppingwithEnhancement]), [MinSetIDwithEnhancement], [FinalMinSetIDFutureStepping])"
          },
          {
            "type": "calculated",
            "name": "FinalMinSetIDFutureSteppingwithEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([MinSetIDNotFutureSteppingwithEnhancement]), [MinSetIDFutureSteppingwithEnhancement], [MinSetIDNotFutureSteppingwithEnhancement])"
          },
          {
            "type": "calculated",
            "name": "MinSetIDNotFutureSteppingwithEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(FILTER(QueryBug,QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&QueryBug[IsFuturestepping]=0",
              "&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              ",QueryBug[id])",
              "\t, minx(FILTER(QueryBug",
              "\t,QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[WWSubmittedSeqNbr]=EARLIER(QueryBug[WWSubmittedSeqNbr])",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&QueryBug[IsFuturestepping]=0",
              "\t&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              "\t,QueryBug[id])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "ww_not_future_stepping_withEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(filter(QueryBug, QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0&&[id]=[MinSetIDNotFutureStepping]",
              "&&[IsFuturestepping]=0",
              "&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              ",QueryBug[ww_submitted_nbr])",
              "\t, minx(filter(QueryBug",
              "\t, QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&[id]=[MinSetIDNotFutureStepping]",
              "\t&&[IsFuturestepping]=0",
              "\t&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              "\t,QueryBug[ww_submitted_nbr])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "ww_future_stepping_withEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if([tenant]=\"server\"",
              ", minx(filter(QueryBug",
              ", QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "&&QueryBug[generation]=EARLIER(QueryBug[generation])",
              "&&QueryBug[IsRealBug]=1",
              "&&QueryBug[IsTestChip]=0",
              "&&[id]=[MinSetIDFutureStepping]",
              "&&[IsFuturestepping]=1",
              "&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              ",QueryBug[ww_submitted_nbr])",
              "\t, minx(filter(QueryBug",
              "\t, QueryBug[Lineage_ID_Unique]=EARLIER(QueryBug[Lineage_ID_Unique])",
              "\t&&QueryBug[IPFamily]=EARLIER(QueryBug[IPFamily])",
              "\t&&QueryBug[IsRealBug]=1",
              "\t&&QueryBug[IsTestChip]=0",
              "\t&&[id]=[MinSetIDFutureStepping]",
              "\t&&[IsFuturestepping]=1",
              "\t&&QueryBug[IsTrackingorSupport]=0&&QueryBug[Is_from_subject_exclude]=0&&QueryBug[is_from_tenant_exclude]=0)",
              "\t,QueryBug[ww_submitted_nbr])",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "final_ww_future_stepping_withEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([ww_not_future_stepping_withEnhancement]), [ww_future_stepping_withEnhancement], [ww_not_future_stepping_withEnhancement])"
          },
          {
            "type": "calculated",
            "name": "final_unique_ww_submitted_nbr_withEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([final_ww_future_stepping_withEnhancement]), [unique_ww_submitted_nbr_withEnhancement], [final_ww_future_stepping_withEnhancement])"
          },
          {
            "type": "calculated",
            "name": "IsUniquewithEnhancement",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([ww_submitted_nbr]=[final_unique_ww_submitted_nbr_withEnhancement]&&[id]=[MinSetIDFinalwithEnhancement], 1, 0)"
          },
          {
            "name": "drop_fix",
            "dataType": "string",
            "sourceColumn": "drop_fix"
          },
          {
            "type": "calculated",
            "name": "drop_fix_substring_start",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var findmilestoneid = find(\"milestone_id\",QueryBug[drop_fix],1,0)",
              "return if(findmilestoneid = 0,1, findmilestoneid)"
            ]
          },
          {
            "type": "calculated",
            "name": "drop_fix_substring_end",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var milestoneidfind  = find(\"milestone_id\",QueryBug[drop_fix],1,0)",
              "",
              "return if(milestoneidfind = 0, 0, find(\":\", QueryBug[drop_fix],QueryBug[drop_fix_substring_start],0))"
            ]
          },
          {
            "type": "calculated",
            "name": "drop_fix_milestone_id_length",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              " if(QueryBug[drop_fix_substring_start] = 1 && QueryBug[drop_fix_substring_end] = 0, 0, QueryBug[drop_fix_substring_end] - QueryBug[drop_fix_substring_start] - 13)"
            ]
          },
          {
            "type": "calculated",
            "name": "drop_fix_milestone_id",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": [
              "",
              "var startpoint = if(QueryBug[drop_fix_substring_start] = 1, 1, QueryBug[drop_fix_substring_start] + 13)",
              "--var findmilestoneid = if(startpoint = BLANK(), BLANK(), MID(QueryBug[drop_fix], startpoint, QueryBug[drop_fix_milestone_id_length]))",
              "var findmilestoneid = mid(QueryBug[drop_fix], startpoint,QueryBug[drop_fix_milestone_id_length])",
              "return if(findmilestoneid = \"\", BLANK(), value(findmilestoneid))",
              "",
              "--mid(QueryBug[drop_fix], QueryBug[drop_fix_substring_start],QueryBug[drop_fix_milestone_id_length])"
            ]
          },
          {
            "type": "calculated",
            "name": "reuse_carbon",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " related(QueryCarbon[reuse])"
          },
          {
            "type": "calculated",
            "name": "UniqueKey_redrops",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "-- if(QueryBug[reuse_carbon] = \"configurable\", [project] & QueryBug[drop_fix_milestone_id], CONVERT(QueryBug[drop_fix_milestone_id],STRING))",
              " --[project] & ",
              " QueryBug[drop_fix_milestone_id]",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "related_uniquekey_redrop",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "/*related(QueryFVRedrop[UniqueKey_product_milestoneid])*/",
              "RELATED(QueryFVRedropBridge[milestoneid])"
            ]
          },
          {
            "name": "repo_modified_date",
            "dataType": "dateTime",
            "sourceColumn": "repo_modified_date"
          },
          {
            "type": "calculated",
            "name": "IsBugTicket",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " if(QueryBug[IsRealBug] =1 && QueryBug[IsTrackingorSupport] = 0, 1, 0)"
          },
          {
            "type": "calculated",
            "name": "is_submitted_in_last_year",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var currentww = QueryBug[CurrentWWSeqNbr]",
              "var ticketww = QueryBug[WWSubmittedSeqNbr]",
              "",
              "return if(ticketww <= currentww && ticketww >= currentww - 52, 1, 0)"
            ]
          },
          {
            "type": "calculated",
            "name": "Not_aBug",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryBug[IsRealBug]=0||QueryBug[IsTrackingorSupport]=1||QueryBug[bugeco.type] in{\"enhancement\", \"consultation\"}||ISBLANK([bugeco.type]), 1, 0) "
          },
          {
            "type": "calculated",
            "name": "Rejected_for_IncomingClosedBug",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryBug[status]=\"rejected\"&&[status_detail] in {\"rejected.wont_fix\", \"rejected\", \"rejected.wont_do\", \"wont_fix\"}, 1, 0)"
          },
          {
            "type": "calculated",
            "name": "Not_aBug_for_incomingvsClosed",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if((QueryBug[IsRealBug]=0||QueryBug[IsTrackingorSupport]=1||QueryBug[bugeco.type] in{\"enhancement\", \"consultation\"}||ISBLANK([bugeco.type]))&&[Rejected_for_IncomingClosedBug]=0, 1, 0) "
          },
          {
            "name": "support_type",
            "dataType": "string",
            "sourceColumn": "support_type"
          }
        ],
        "partitions": [
          {
            "name": "QueryBug",
            "source": {
              "type": "query",
              "query": [
                "select ",
                "[tenant]",
                ",ww",
                ",[family]",
                ",[original_family]",
                ",priority",
                ",[ip_supplier] ",
                ",[release]",
                ",[release] as [Configuration]",
                ",[release_affected] ",
                ", [tag]",
                ",[status]",
                ",[status_detail]",
                ",[project]",
                ",[Soc Die] as [SoCDieForSorting]",
                ",[id]",
                ",[lineage]",
                ",[original_lineage]",
                ",[title]",
                ", [ww_submitted_date]",
                ",CONVERT(INT,[BugFixedDoneDate]) as [BugFixedDoneDate]",
                ",[bugeco.env_found] ",
                ",[bugeco.team_found]",
                ",[bug_category]",
                ",from_tenant",
                ", from_subject",
                ",[bugeco.type]",
                ",component",
                ",url",
                ",[ccb_prq_gating]",
                ",[currentww]",
                ",[currentmonth]",
                ",[currentyear]",
                ",[subip_family]",
                ",[subip_supplier]",
                ",[ingredient]",
                ",[is_PreSiPostSi]",
                ",[is_found_bySoc]",
                ",IsCount ",
                ",[lineage_final]",
                ",IsSubIP",
                ",[sub_bugcategory]",
                ",[bugeco.release_found]",
                ",retro_status",
                ",retro_ip_escape",
                ",retro_global_learning",
                ",retro_global_action",
                ", retro_analysis",
                ", retro_learnings",
                ",owner",
                ",CONVERT (INT,REPLACE([ww_closed_date] ,'ww','')) as [ww_closed_date] ",
                ",[generation]",
                ",IsRealBug",
                ",milestone",
                ",[submitted_date]",
                ",[closed_date]",
                ",supplier_org",
                ",[totalID]",
                ",submitted_by",
                ",updated_by",
                ",ww_sla_response_date as responseSLA",
                ",ww_sla_resolution_date as resolutionSLA",
                ",[sla_response_met]",
                ",[sla_response_date]",
                ",[sla_resolution_met]",
                ",[sla_resolution_date]",
                ",updated_date",
                ",[ww_updated_date]",
                ",drop_fix",
                ",[repo_modified_date]",
                ",CONVERT (INT,REPLACE([ww_repo_modified_date] ,'ww','')) as [ww_repo_modified_date] ",
                ",CONVERT (INT,REPLACE([ww_future_date] ,'ww','')) as [ww_future_date]",
                ",CASE WHEN  datepart(ww,[submitted_date]) >= datepart(ww,dateadd(week,-1,getdate())) THEN 1 ELSE 0 END as [is_new]",
                ",CASE WHEN [sla_response_met] = 'SLAFailed' THEN 1 else 0  END as [is_response_failed]",
                ",CASE WHEN([sla_response_met] = 'SLAMet' AND [sla_response_date] is null)THEN 1 else 0 END as [is_response_met]",
                ",case when  DATEPART(ww,[submitted_date]) = datepart(ww,dateadd(week,-1,getdate()))THEN 1 else 0 END as [response_time_filter]",
                ",CASE WHEN [sla_resolution_met] = 'SLAFailed' THEN 1 else 0  END as [is_resolution_failed]",
                ",CASE WHEN([sla_resolution_met] = 'SLAMet' AND [sla_resolution_date] is null)THEN 1 else 0 END as [is_resolution_met]",
                ",CASE WHEN DATEPART(ww,isnull([sla_resolution_date],[closed_date])) = datepart(ww,dateadd(week,-1,getdate()))and  DATEPART(ww,[submitted_date]) < datepart(ww, GETDATE())THEN 1 else 0 END as [resolution_time_filter]",
                ",support_type",
                "from [v_ipg_bug_all]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "[tenant]",
                  ",ww",
                  ",[family]",
                  ",[original_family]",
                  ",priority",
                  ",[ip_supplier] ",
                  ",[release]",
                  ",[release] as [Configuration]",
                  ",[release_affected] ",
                  ", [tag]",
                  ",[status]",
                  ",[status_detail]",
                  ",[project]",
                  ",[Soc Die] as [SoCDieForSorting]",
                  ",[id]",
                  ",[lineage]",
                  ",[original_lineage]",
                  ",[title]",
                  ", [ww_submitted_date]",
                  ",CONVERT(INT,[BugFixedDoneDate]) as [BugFixedDoneDate]",
                  ",[bugeco.env_found] ",
                  ",[bugeco.team_found]",
                  ",[bug_category]",
                  ",from_tenant",
                  ", from_subject",
                  ",[bugeco.type]",
                  ",component",
                  ",url",
                  ",[ccb_prq_gating]",
                  ",[currentww]",
                  ",[currentmonth]",
                  ",[currentyear]",
                  ",[subip_family]",
                  ",[subip_supplier]",
                  ",[ingredient]",
                  ",[is_PreSiPostSi]",
                  ",[is_found_bySoc]",
                  ",IsCount ",
                  ",[lineage_final]",
                  ",IsSubIP",
                  ",[sub_bugcategory]",
                  ",[bugeco.release_found]",
                  ",retro_status",
                  ",retro_ip_escape",
                  ",retro_global_learning",
                  ",retro_global_action",
                  ", retro_analysis",
                  ", retro_learnings",
                  ",owner",
                  ",CONVERT (INT,REPLACE([ww_closed_date] ,'ww','')) as [ww_closed_date] ",
                  ",[generation]",
                  ",IsRealBug",
                  ",milestone",
                  ",[submitted_date]",
                  ",[closed_date]",
                  ",supplier_org",
                  ",[totalID]",
                  ",submitted_by",
                  ",updated_by",
                  ",ww_sla_response_date as responseSLA",
                  ",ww_sla_resolution_date as resolutionSLA",
                  ",[sla_response_met]",
                  ",[sla_response_date]",
                  ",[sla_resolution_met]",
                  ",[sla_resolution_date]",
                  ",updated_date",
                  ",[ww_updated_date]",
                  ",drop_fix",
                  ",[repo_modified_date]",
                  ",CONVERT (INT,REPLACE([ww_repo_modified_date] ,'ww','')) as [ww_repo_modified_date] ",
                  ",CONVERT (INT,REPLACE([ww_future_date] ,'ww','')) as [ww_future_date]",
                  ",CASE WHEN  datepart(ww,[submitted_date]) >= datepart(ww,dateadd(week,-1,getdate())) THEN 1 ELSE 0 END as [is_new]",
                  ",CASE WHEN [sla_response_met] = 'SLAFailed' THEN 1 else 0  END as [is_response_failed]",
                  ",CASE WHEN([sla_response_met] = 'SLAMet' AND [sla_response_date] is null)THEN 1 else 0 END as [is_response_met]",
                  ",case when  DATEPART(ww,[submitted_date]) = datepart(ww,dateadd(week,-1,getdate()))THEN 1 else 0 END as [response_time_filter]",
                  ",CASE WHEN [sla_resolution_met] = 'SLAFailed' THEN 1 else 0  END as [is_resolution_failed]",
                  ",CASE WHEN([sla_resolution_met] = 'SLAMet' AND [sla_resolution_date] is null)THEN 1 else 0 END as [is_resolution_met]",
                  ",CASE WHEN DATEPART(ww,isnull([sla_resolution_date],[closed_date])) = datepart(ww,dateadd(week,-1,getdate()))and  DATEPART(ww,[submitted_date]) < datepart(ww, GETDATE())THEN 1 else 0 END as [resolution_time_filter]",
                  ",support_type",
                  "from [v_ipg_bug_all]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "TotalofID",
            "expression": "CALCULATE(COUNTA([id]), QueryBug[IsRealBug]=1, QueryBug[IsTrackingorSupport]=0)"
          },
          {
            "name": "2020Bug",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[SubmittedYear]=\"2020\", QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}, QueryBug[IsActiveIP]=1, QueryBug[bugeco.type]=\"bug\", QueryBug[IsUnique]=1, QueryBug[IsRealBug]=1, QueryBug[IsTestChip]=0, QueryBug[IsTrackingorSupport]=0)",
            "formatString": "0"
          },
          {
            "name": "2020BugCum",
            "expression": "Calculate([2020Bug], filter(all(QueryTrendWW[ww_trend]), QueryTrendWW[ww_trend]<=max(QueryTrendWW[ww_trend])))",
            "formatString": "0"
          },
          {
            "name": "Bug",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[IsRealBug]=1, QueryBug[IsTrackingorSupport]=0) "
          },
          {
            "name": "2020_APBl",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[NoiseFilter], QueryBug[bugeco.type]=\"bug\", QueryBug[IsUnique_External]=1 , QueryBug[IsActiveIP]=1,QueryBug[APBExclude]=0, QueryBug[IsRealBug]=1, QueryBug[IsTestChip]=0, QueryBug[IsTrackingorSupport]=0)"
          },
          {
            "name": "count of submitted bugs",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[IsRealBug]=1, QueryBug[IsTrackingorSupport]=0,",
              "FILTER(ALL(QueryBug[ww_submitted_nbr]), QueryBug[ww_submitted_nbr]=MAX(QueryIntelWW[Intel Year-Work Week])),",
              "ALL(QueryIntelWW[Intel Year-Work Week])",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "count of closed bugs",
            "expression": [
              " ",
              "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[IsRealBug]=1,QueryBug[IsTrackingorSupport]=0,",
              "FILTER(ALL(QueryBug[ww_closed_date]), QueryBug[ww_closed_date]=MAX(QueryIntelWW[Intel Year-Work Week])),",
              "ALL(QueryIntelWW[Intel Year-Work Week])",
              ")"
            ],
            "formatString": "0"
          },
          {
            "name": "count of active bugs",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[IsRealBug]=1, QueryBug[IsTrackingorSupport]=0,",
              "FILTER(ALL(QueryBug[ww_submitted_nbr]), QueryBug[ww_submitted_nbr] <=MAX(QueryIntelWW[Intel Year-Work Week])),",
              "FILTER(ALL(QueryBug[ww_closed_date]), QueryBug[ww_closed_date] >=MAX(QueryIntelWW[Intel Year-Work Week])|| ISBLANK(QueryBug[ww_closed_date])),",
              "ALL(QueryIntelWW[Intel Year-Work Week])",
              ")"
            ]
          },
          {
            "name": "SoC",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[SubmittedYear]=\"2021\", QueryBug[IsActiveIP]=1, QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"SW/FW PreSiBug Found by SoC\",\"SW/FW PreSiBug Found by Customers\"}, QueryBug[bugeco.type]=\"bug\", QueryBug[IsUnique]=1, QueryBug[IsRealBug]=1, QueryBug[IsTestChip]=0, QueryBug[IsTrackingorSupport]=0, QueryBug[IsTrackingorSupport]=0)"
          },
          {
            "name": "Silicon",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[SubmittedYear]=\"2021\", QueryBug[IsActiveIP]=1, QueryBug[is_found_bySoc] in{\"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\"},  QueryBug[bugeco.type]=\"bug\", QueryBug[IsUnique]=1, QueryBug[IsRealBug]=1, QueryBug[IsTestChip]=0, QueryBug[IsTrackingorSupport]=0)"
          },
          {
            "name": "BugCum",
            "expression": [
              "var minww=CALCULATE(MIN(QueryIntelWWYear[SubmittedYear])*100+1,CROSSFILTER(QueryBug[ww_submitted_nbr], QueryIntelWWYear[WWSubmitted],Both),all(QueryIntelWWYear))",
              "var maxyear=CALCULATE(MAX(QueryIntelWWYear[SubmittedYear]),CROSSFILTER(QueryBug[ww_submitted_nbr],QueryIntelWWYear[WWSubmitted],Both),all(QueryIntelWWYear)) ",
              "var maxww=MAXX(FILTER(ALL(QueryIntelWWYear),QueryIntelWWYear[SubmittedYear]=maxyear&&QueryIntelWWYear[WWSubmitted]<=QueryIntelWWYear[currentww]),QueryIntelWWYear[WWSubmitted])",
              "var curww=min(QueryIntelWWYear[WWSubmitted])",
              "var cumBugCount=If(max(QueryBug[ww_submitted_nbr])<=max(QueryBug[currentww]),Calculate([Bug], filter(all(QueryIntelWWYear[WWSubmitted]), QueryIntelWWYear[WWSubmitted]<=max(QueryIntelWWYear[WWSubmitted]))))",
              "var result=cumBugCount+if(curww>=minww&&curww<=maxww,0)",
              "return result"
            ]
          },
          {
            "name": "CumBug",
            "expression": "If(max(QueryBug[ww_submitted_nbr])<=max(QueryBug[currentww]),Calculate([Bug], filter(all(QueryBug[ww_trend]), QueryBug[ww_trend]<=max(QueryBug[ww_trend]))))"
          },
          {
            "name": "2021Bug",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[SubmittedYear]=\"2021\", QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}, QueryBug[IsActiveIP]=1, QueryBug[bugeco.type]=\"bug\", QueryBug[IsUnique]=1, QueryBug[IsRealBug]=1, QueryBug[IsTestChip]=0, QueryBug[IsTrackingorSupport]=0)"
          },
          {
            "name": "2021BugCum",
            "expression": "Calculate([2021Bug], filter(all(QueryTrendWW[ww_trend]), QueryTrendWW[ww_trend]<=max(QueryTrendWW[ww_trend])))"
          },
          {
            "name": "SOCBug",
            "expression": [
              "CALCULATE(DISTINCTCOUNT(QueryBug[id]), ",
              "//QueryBug[IsUnique]=1, ",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PreSiBug Found by Customers\",\"SW/FW PostSiBug Found by Customers\"},",
              "//FILTER(ALL(QueryBug[project]), SEARCH(LOWER(MAX(support_manual_data[f_soc])), QueryBug[project],,-1)>0)",
              "QueryBug[IsActiveIP]=1, QueryBug[IsRealBug]=1, QueryBug[IsTrackingorSupport]=0",
              ")"
            ]
          },
          {
            "name": "SOCActiveBug",
            "expression": [
              "CALCULATE([SOCBug], ",
              "QueryBug[is_active_bug]=1, QueryBug[IsRealBug]=1, QueryBug[IsTrackingorSupport]=0",
              ")"
            ]
          },
          {
            "name": "closed minus incoming",
            "expression": "0+ [count of closed bugs] - [count of submitted bugs]"
          },
          {
            "name": "Bug_by_soc_dates",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(ALL(QueryBug[ww_submitted_nbr]), QueryBug[ww_submitted_nbr]< MAX(soc_dates[SOC Date YYYYWW]) )",
              "//QueryBug[ww_submitted_nbr] < MAX(soc_dates[SOC Date YYYYWW])",
              ")"
            ]
          },
          {
            "name": "Bug_by_soc_dates_A",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(ALL(QueryBug[ww_submitted_nbr]), QueryBug[ww_submitted_nbr]< MAX(soc_dates[SOC Date YYYYWW]) ), ",
              "ALL(soc_key[SoC B])",
              ")"
            ]
          },
          {
            "name": "Bug_by_soc_dates_B",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(ALL(QueryBug[ww_submitted_nbr]), QueryBug[ww_submitted_nbr]< MAX(soc_dates[SOC Date YYYYWW]) ),  ",
              "ALL(soc_key[SoC A])",
              ")"
            ]
          },
          {
            "name": "BugEscapeGoal",
            "expression": "Calculate(sumx(QueryTrendWW,[AverageBaseBugEscape])*0.5, filter(all(QueryTrendWW[ww_trend]), QueryTrendWW[ww_trend]<=max(QueryTrendWW[ww_trend])))",
            "formatString": "0"
          },
          {
            "name": "AverageBaseBugEscape",
            "expression": "CALCULATE(sum([Base_BugEscape])/52,all(QueryTrendWW))"
          },
          {
            "name": "Bug&NotBug",
            "expression": "[NotABug]+[UniqueBug]"
          },
          {
            "name": "BugforWWsubmitted",
            "expression": [
              "",
              "-- *100 + 1 to transform yyyy into yyyyww (ex 2020 => 202001), based on ww_submitted_nbr, get the according oldest bug submitted year from QueryIntelWWYear",
              "var minww=CALCULATE(MIN(QueryIntelWWYear[SubmittedYear])*100+1,CROSSFILTER(QueryBug[ww_submitted_nbr], QueryIntelWWYear[WWSubmitted],Both),all(QueryIntelWWYear))",
              "-- same as minww, except this time we do not format into yyyyww but keep yyyy to get latest bug submitted year",
              "var maxyear=CALCULATE(MAX(QueryIntelWWYear[SubmittedYear]),CROSSFILTER(QueryBug[ww_submitted_nbr],QueryIntelWWYear[WWSubmitted],Both),all(QueryIntelWWYear)) ",
              "-- get the max ww by first filtering out only the ones with submittedYear = maxyear and cap at currentww",
              "var maxww=MAXX(FILTER(ALL(QueryIntelWWYear),QueryIntelWWYear[SubmittedYear]=maxyear&&QueryIntelWWYear[WWSubmitted]<=QueryIntelWWYear[currentww]),QueryIntelWWYear[WWSubmitted])",
              "var curww=min(QueryIntelWWYear[WWSubmitted])",
              "var BugCnt=CALCULATE(DISTINCTCOUNT(QueryBug[id]),QueryBug[IsRealBug]=1, QueryBug[IsTrackingorSupport]=0)",
              "var result=BugCnt+if(curww>=minww&&curww<=maxww,0)",
              "return result"
            ]
          },
          {
            "name": "BugforWWsubmittedtesting",
            "expression": [
              "var minww=CALCULATE(MIN(QueryIntelWWYear[SubmittedYear])*100+1,CROSSFILTER(QueryBug[ww_submitted_nbr], QueryIntelWWYear[WWSubmitted],Both),all(QueryIntelWWYear))",
              "var maxyear=CALCULATE(MAX(QueryIntelWWYear[SubmittedYear]),CROSSFILTER(QueryBug[ww_submitted_nbr],QueryIntelWWYear[WWSubmitted],Both),all(QueryIntelWWYear)) ",
              "var maxww=MAXX(FILTER(ALL(QueryIntelWWYear),QueryIntelWWYear[SubmittedYear]=maxyear),QueryIntelWWYear[WWSubmitted])",
              "var curww=min(QueryIntelWWYear[WWSubmitted])",
              "var BugCnt=CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[IsRealBug]=1, QueryBug[IsTrackingorSupport]=0)",
              "var result=BugCnt+if(curww>=minww&&curww<=maxww,0)",
              "return result"
            ]
          },
          {
            "name": "BugEscape",
            "expression": [
              "CALCULATE(DISTINCTCOUNT([id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"},",
              "QueryBug[IsTrackingorSupport]=0)"
            ]
          },
          {
            "name": "BugEscapeFixed",
            "expression": [
              "CALCULATE(",
              "DISTINCTCOUNT([id])",
              ",QueryBug[IsRealBug]=1",
              ",QueryBug[bugeco.type]=\"bug\"",
              ",QueryBug[IsUnique]=1",
              ",QueryBug[IsActiveIP]=1",
              ",QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              ",not QueryBug[retro_status] in {\"accepted\",\"completed\",\"defined\",\"not_applicable\"}",
              ",QueryBug[status] in {\"complete\",\"repo_modified\"}",
              ",QueryBug[IsTrackingorSupport]=0)"
            ]
          },
          {
            "name": "BugEscapeHaveRetro",
            "expression": [
              "CALCULATE(",
              "DISTINCTCOUNT([id])",
              ",QueryBug[IsRealBug]=1",
              ",QueryBug[bugeco.type]=\"bug\"",
              ",QueryBug[IsUnique]=1",
              ",QueryBug[IsActiveIP]=1",
              ",QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              ",QueryBug[retro_status] in {\"accepted\",\"completed\",\"defined\",\"not_applicable\"}",
              ",QueryBug[IsTrackingorSupport]=0)"
            ]
          },
          {
            "name": "BugEscapeOpen",
            "expression": [
              "CALCULATE(",
              "DISTINCTCOUNT([id])",
              ",QueryBug[IsRealBug]=1",
              ",QueryBug[bugeco.type]=\"bug\"",
              ",QueryBug[IsUnique]=1",
              ",QueryBug[IsActiveIP]=1",
              ",QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              ",not QueryBug[retro_status] in {\"accepted\",\"completed\",\"defined\",\"not_applicable\"}",
              ", not QueryBug[status] in {\"complete\",\"repo_modified\"}",
              ",QueryBug[IsTrackingorSupport]=0)"
            ]
          },
          {
            "name": "BugEscapeHaveRetro%",
            "expression": "if(isblank([BugEscapeHaveRetro]),0,[BugEscapeHaveRetro]/[BugEscape])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "RetrospectiveColorCode",
            "expression": "if([BugEscapeHaveRetro%] >= 0.95,1,if([BugEscapeHaveRetro%]<0.85,3,if([BugEscapeHaveRetro%] < 0.95, 2))) //1=Green, 2=Yellow, 3=Red"
          },
          {
            "name": "BugInternal",
            "expression": [
              "CALCULATE(DISTINCTCOUNT([id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by IP\",\"SW/FW PreSiBug Found by IP\",\"SW/FW PostSiBug Found by IP\",\"HW PostSiBug Found by TestChip\",",
              "    \"HW PreSiBug Found by TestChip\",\t\"SW/FW PostSiBug Found by TestChip\",\"SW/FW PreSiBug Found by TestChip\"",
              "}",
              ",QueryBug[IsTrackingorSupport]=0)+0"
            ]
          },
          {
            "name": "BugInternalWithFixDone",
            "expression": [
              "CALCULATE(DISTINCTCOUNT([id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by IP\",\"SW/FW PreSiBug Found by IP\",\"SW/FW PostSiBug Found by IP\",\"HW PostSiBug Found by TestChip\",",
              "    \"HW PreSiBug Found by TestChip\",\t\"SW/FW PostSiBug Found by TestChip\",\"SW/FW PreSiBug Found by TestChip\"",
              "},",
              "QueryBug[status] in {\"complete\", \"repo_modified\"},",
              "QueryBug[IsBugInternalFixedDateMatchWW_Submitted]=1",
              ",QueryBug[IsTrackingorSupport]=0)+0"
            ]
          },
          {
            "name": "BugInternalRemaining",
            "expression": [
              "CALCULATE(DISTINCTCOUNT([id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by IP\",\"SW/FW PreSiBug Found by IP\",\"SW/FW PostSiBug Found by IP\",\"HW PostSiBug Found by TestChip\",",
              "    \"HW PreSiBug Found by TestChip\",\t\"SW/FW PostSiBug Found by TestChip\",\"SW/FW PreSiBug Found by TestChip\"",
              "},",
              "QueryBug[status] in {\"open\",\"approved\",\"change_defined\"}",
              ",QueryBug[IsTrackingorSupport]=0)+0"
            ]
          },
          {
            "name": "NotABug",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[Not_aBug]=1)"
          },
          {
            "name": "UniqueBug",
            "expression": [
              "CALCULATE(",
              "\tDISTINCTCOUNT(QueryBug[id])",
              "\t, QueryBug[IsRealBug]=1",
              "\t,QueryBug[IsUnique]=1",
              "\t, QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              "\t, QueryBug[IsActiveIP]=1",
              "\t, QueryBug[bugeco.type]=\"bug\"",
              "\t, QueryBug[IsTestChip]=0",
              "\t,QueryBug[IsTrackingorSupport]=0",
              ") "
            ]
          },
          {
            "name": "BugEscapePreSiSoC",
            "expression": [
              "CALCULATE(DISTINCTCOUNT([id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"SW/FW PreSiBug Found by SoC\",\"SW/FW PreSiBug Found by Customers\"},",
              "QueryBug[IsTrackingorSupport]=0)"
            ]
          },
          {
            "name": "BugEscapePostSiIPSoC",
            "expression": [
              "CALCULATE(DISTINCTCOUNT([id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PostSiBug Found by SoC\",\"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\"}",
              ",QueryBug[IsTrackingorSupport]=0)"
            ]
          },
          {
            "name": "BugEscapeCollateral",
            "expression": [
              "CALCULATE(DISTINCTCOUNT([id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"},",
              "QueryBug[subbugcategory]=\"Collateral\",",
              "QueryBug[IsTrackingorSupport]=0)"
            ]
          },
          {
            "name": "BugEscapeVal",
            "expression": [
              "CALCULATE(DISTINCTCOUNT([id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"},",
              "QueryBug[subbugcategory]=\"VAL\",",
              "QueryBug[IsTrackingorSupport]=0)"
            ]
          },
          {
            "name": "QuarterComp",
            "expression": [
              " ",
              "/* ",
              "This does not count all Bug Escape from last Quarter, only count up to the number of weeks",
              "that we currently in this quarter",
              "Ex: We are in Q2 2021 => WW 202118  => 5 weeks in 2nd quarter 2021",
              "So we would only count Bugs from Q1 2021 => first 5 weeks => 202101 - 202105",
              "*/",
              "var percent_change = if (ISBLANK([PrevQuarterToCurrentWWTrendBugEscape]) || [PrevQuarterToCurrentWWTrendBugEscape] = 0,",
              "IF(ISBLANK([CurrentQuarterBugEscape]) || [CurrentQuarterBugEscape] = 0, 0, 1),",
              "ROUND(ABS([PrevQuarterToCurrentWWTrendBugEscape] - [CurrentQuarterBugEscape])/[PrevQuarterToCurrentWWTrendBugEscape], 0)",
              ")",
              "return",
              "(percent_change * 100) & \"%\"",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "QuarterCompArrow",
            "expression": [
              " SWITCH(",
              "                          TRUE(),",
              "                              ISBLANK(QueryBug[QuarterCompWithout%Sign]),BLANK(),",
              "                   QueryBug[QuarterCompWithout%Sign] = 0,UNICHAR(9644),",
              "                   QueryBug[QuarterCompWithout%Sign] > 0,UNICHAR(9660),",
              "                   QueryBug[QuarterCompWithout%Sign] < 0,UNICHAR(128314),",
              "              BLANK()",
              "             )",
              "",
              ""
            ]
          },
          {
            "name": "WeekComp",
            "expression": [
              " ",
              "var prev_ww_bug_count = CALCULATE((QueryBug[bug]),FILTER(QueryBug,QueryBug[ww_submitted_nbr] = QueryBug[previousww]))",
              "var current_ww_bug_count = CALCULATE((QueryBug[bug]),FILTER(QueryBug,QueryBug[ww_submitted_nbr] = QueryBug[currentww]))",
              "",
              "return if (ISBLANK(prev_ww_bug_count)",
              "\t,\"N/A\"",
              "\t,ROUND(ABS(prev_ww_bug_count - current_ww_bug_count)/prev_ww_bug_count * 100,0) & \"%\")"
            ]
          },
          {
            "name": "WeekCompArrow",
            "expression": [
              " SWITCH(",
              "                          TRUE(),",
              "                              ISBLANK(QueryBug[WeekCompWithout%Sign]),BLANK(),",
              "                   QueryBug[WeekCompWithout%Sign] = 0,UNICHAR(9644),",
              "                   QueryBug[WeekCompWithout%Sign] > 0,UNICHAR(9660),",
              "                   QueryBug[WeekCompWithout%Sign] < 0,UNICHAR(128314),",
              "              BLANK()",
              "             )",
              "",
              ""
            ]
          },
          {
            "name": "YearComp",
            "expression": [
              " ",
              "var prev_year_bug_count = CALCULATE((QueryBug[bug]),FILTER(QueryBug, QueryBug[SubmittedYear]=QueryBug[PreviousYear]))",
              "var current_year_bug_count = CALCULATE((QueryBug[bug]),FILTER(QueryBug, QueryBug[SubmittedYear]=QueryBug[currentyear]))",
              "",
              "return if(isblank(prev_year_bug_count)",
              "\t,\"N/A\"",
              "\t,ROUND(ABS(prev_year_bug_count-current_year_bug_count)/prev_year_bug_count * 100 ,0) & \"%\"",
              ")",
              ""
            ]
          },
          {
            "name": "YearCompArrow",
            "expression": [
              " SWITCH(",
              "                          TRUE(),",
              "                              ISBLANK(QueryBug[YearCompWithout%Sign]),BLANK(),",
              "                   QueryBug[YearCompWithout%Sign] = 0,UNICHAR(9644),",
              "                   QueryBug[YearCompWithout%Sign] > 0,UNICHAR(9660),",
              "                   QueryBug[YearCompWithout%Sign] < 0,UNICHAR(128314),",
              "              BLANK()",
              "             )",
              "",
              ""
            ]
          },
          {
            "name": "WeekCompWithout%Sign",
            "expression": [
              " ",
              "var prev_ww_bug_count = CALCULATE((QueryBug[bug]),FILTER(QueryBug,QueryBug[ww_submitted_nbr] = QueryBug[previousww]))",
              "var current_ww_bug_count = CALCULATE((QueryBug[bug]),FILTER(QueryBug,QueryBug[ww_submitted_nbr] = QueryBug[currentww]))",
              "",
              "return if (ISBLANK(prev_ww_bug_count)",
              "\t,BLANK()",
              "\t,(prev_ww_bug_count - current_ww_bug_count)/prev_ww_bug_count )"
            ]
          },
          {
            "name": "QuarterCompWithout%Sign",
            "expression": [
              " ",
              "/* ",
              "This does not count all Bug Escape from last Quarter, only count up to the number of weeks",
              "that we currently in this quarter",
              "Ex: We are in Q2 2021 => WW 202118  => 5 weeks in 2nd quarter 2021",
              "So we would only count Bugs from Q1 2021 => first 5 weeks => 202101 - 202105",
              "*/",
              " if (ISBLANK([PrevQuarterToCurrentWWTrendBugEscape])",
              "\t, BLANK(), ",
              "\t([PrevQuarterToCurrentWWTrendBugEscape] - [CurrentQuarterBugEscape])/[PrevQuarterToCurrentWWTrendBugEscape]",
              "\t)"
            ]
          },
          {
            "name": "YearCompWithout%Sign",
            "expression": [
              " ",
              "var prev_year_bug_count = CALCULATE((QueryBug[Bug]),FILTER(QueryBug, QueryBug[SubmittedYear]=QueryBug[PreviousYear]))",
              "var current_year_bug_count = CALCULATE((QueryBug[bug]),FILTER(QueryBug, QueryBug[SubmittedYear]=QueryBug[currentyear]))",
              "",
              "return if(isblank(prev_year_bug_count)",
              "\t,BLANK()",
              "\t,(prev_year_bug_count-current_year_bug_count)/prev_year_bug_count ",
              ")"
            ]
          },
          {
            "name": "2020BugCum_L2",
            "expression": "Calculate([2020Bug], filter(all(QueryBug[ww_trend]), QueryBug[ww_trend] <= RIGHT(MAX(QueryBug[currentww]),2)))"
          },
          {
            "name": "2021BugCumL2",
            "expression": "Calculate([2021Bug], filter(all(QueryBug[ww_trend]), QueryBug[ww_trend] <= RIGHT(MAX(QueryBug[currentww]),2)))"
          },
          {
            "name": "UniqueBugCount",
            "expression": [
              " CALCULATE(DISTINCTCOUNT([id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1,",
              "QueryBug[IsTestChip]=0,",
              "QueryBug[IsTrackingorSupport]=0)"
            ]
          },
          {
            "name": "PrevQuarterToCurrentWWTrendBugEscape",
            "expression": [
              " ",
              "/* ",
              "This does not count all Bug Escape from last Quarter, only count up to the number of weeks",
              "that we currently in this quarter",
              "Ex: We are in Q2 2021 => WW 202118  => 5 weeks in 2nd quarter 2021",
              "So we would only count Bugs from Q1 2021 => first 5 weeks => 202101 - 202105",
              "*/",
              "var prev_year_quarter = MAX(QueryBug[PreviousYearQuarter])",
              "var current_quarter_ww_trend = MAX(QueryBug[current_ww_trend_in_quarter])",
              "return CALCULATE(DISTINCTCOUNT(QueryBug[id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              ",QueryBug[SubmittedYear_Quarter] = prev_year_quarter",
              ",QueryBug[ww_submitted_trend_in_quarter] <= current_quarter_ww_trend",
              ",QueryBug[IsTrackingorSupport]=0",
              ")"
            ]
          },
          {
            "name": "CurrentQuarterBugEscape",
            "expression": [
              "",
              "var current_year_quarter = MAX(QueryBug[CurrentYearQuarter])",
              "return CALCULATE(DISTINCTCOUNT(QueryBug[id]),",
              "QueryBug[IsRealBug]=1,",
              "QueryBug[bugeco.type]=\"bug\", ",
              "QueryBug[IsUnique]=1,",
              "QueryBug[IsActiveIP]=1, ",
              "QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}",
              ",QueryBug[SubmittedYear_Quarter] = current_year_quarter",
              ",QueryBug[IsTrackingorSupport]=0",
              ")"
            ]
          },
          {
            "name": "ClientSOC_status_check_int",
            "expression": [
              "IF(COUNTROWS(VALUES(QueryBug[id]))=1,",
              " IF(MAX(QueryBug[status]) = MAX(QueryClientSoCChipsetBug[soc_status]),1,0)",
              " ,3)"
            ]
          },
          {
            "name": "ClientSOC_status_check",
            "expression": [
              " IF([ClientSOC_status_check_int]=1,\"Match\",",
              "IF([ClientSOC_status_check_int]=0, \"Not Match\"",
              " ))"
            ]
          },
          {
            "name": "ClientSOC_type_check_int",
            "expression": [
              "IF(COUNTROWS(VALUES(QueryBug[id]))=1,",
              " IF(MAX(QueryBug[bugeco.type]) = MAX(QueryClientSoCChipsetBug[soc_bugeco_type]),1,0)",
              " ,3)"
            ]
          },
          {
            "name": "ClientSOC_type_check",
            "expression": [
              " IF([ClientSOC_type_check_int]=1,\"Match\",",
              "IF([ClientSOC_type_check_int]=0, \"Not Match\"",
              " ))"
            ]
          },
          {
            "name": "URL_BugEscapeInfo",
            "expression": [
              " \"https://wiki.ith.intel.com/display/IPG/Bug+Escape\"",
              "--Link to documentation of Bug Escape indicators"
            ]
          },
          {
            "name": "BugRateLast4WeeksToDateAvg",
            "expression": [
              " ",
              "var bug_submitted_last_4_week_to_date = CALCULATE(QueryBug[Bug], QueryBug[sub_bugcategory] in {\"Functional\",\"VAL\"}, QueryBug[IsSubmittedLast4WkToDate]=1, QueryBug[IsUnique]=1, QueryBug[bugeco.type]=\"bug\", QueryBug[IsActiveIP]=1)",
              "return bug_submitted_last_4_week_to_date/4"
            ]
          },
          {
            "name": "PendingBugs",
            "expression": " CALCULATE(QueryBug[Bug], QueryBug[sub_bugcategory] in {\"Functional\", \"VAL\"}, QueryBug[status] in {\"open\", \"change_defined\", \"approved\", \"repo_modified\"}, QueryBug[IsUnique]=1, QueryBug[bugeco.type]=\"bug\", QueryBug[IsActiveIP]=1)"
          },
          {
            "name": "UncodedBugs",
            "expression": " CALCULATE(QueryBug[Bug], QueryBug[sub_bugcategory] in {\"Functional\", \"VAL\"}, QueryBug[status] in {\"open\", \"change_defined\", \"approved\"}, QueryBug[IsUnique]=1,QueryBug[bugeco.type]=\"bug\",  QueryBug[IsActiveIP]=1)"
          },
          {
            "name": "BugNotBugSupportBugCnt",
            "expression": " CALCULATE(DISTINCTCOUNT(QueryBug[id]))"
          },
          {
            "name": "DEG_PostTiSoC",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[IsUnique] = 1, QueryBug[DEG_Program] in {\"ADL\", \"TGL\", \"MTL\", \"LNL\"}, QueryBug[IsActiveIP] = 1, QueryBug[bugeco.type] = \"bug\", QueryBug[sub_bugcategory] in {\"Functional\", \"Physical\"})"
          },
          {
            "name": "DEG_PreTiSoC",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[DEG_Program] in {\"TGL\", \"ADL\", \"MTL\", \"LNL\"}, QueryBug[is_found_bySoc] in {\"HW PostSiBug Found by SoC\", \"HW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\"}, QueryBug[IsUnique] = 1, QueryBug[IsActiveIP] = 1, QueryBug[bugeco.type] = \"bug\", QueryBug[sub_bugcategory] in {\"Functional\", \"Physical\"})"
          },
          {
            "name": "4week Average",
            "expression": [
              " ",
              "var CurrentWW = AVERAGE(QueryBug[WWSubmittedSeqNbr])",
              "",
              "var FourWeekTotal = ",
              "CALCULATE(",
              "    DISTINCTCOUNTNOBLANK(QueryBug[InternalBugIds]),",
              "    REMOVEFILTERS(QueryBug[ww_submitted_nbr]), ",
              "    REMOVEFILTERS(DynamicCalendar[Month]),",
              "    REMOVEFILTERS(DynamicCalendar[Quarter]),",
              "    REMOVEFILTERS(DynamicCalendar[WW]),",
              "    REMOVEFILTERS(DynamicCalendar[Year]),",
              "    REMOVEFILTERS(DynamicCalendar[Category]),",
              "    QueryBug[WWSubmittedSeqNbr] <= (CurrentWW) && QueryBug[WWSubmittedSeqNbr] > (CurrentWW-4)",
              ")",
              "",
              "return (FourWeekTotal/4)"
            ]
          },
          {
            "name": "2021BugCum_datauntilcurrentweek",
            "expression": "If(max(QueryTrendWW[WW])<=max(QueryTrendWW[currentweek]),Calculate([2021Bug], filter(all(QueryTrendWW[ww_trend]), QueryTrendWW[ww_trend]<=max(QueryTrendWW[ww_trend]))))"
          },
          {
            "name": "Incoming_bugs",
            "expression": [
              "CALCULATE([Bug], FILTER(QueryBug, QueryBug[ww_submitted_nbr] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              ", DynamicProjectAffectedCalendarBridge[ww_submitted_nbr] <> BLANK())"
            ]
          },
          {
            "name": "Incoming_bugs_4wk",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[ww_submitted_nbr]<= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryBug[ww_submitted_nbr] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(MAX(IntelYearWW[Intel Year-Work Week]), 2))<= 4, 51, 3) )",
              ",QueryBug[ww_submitted_nbr] <> BLANK()",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), 0, BLANK())"
            ],
            "formatString": "0"
          },
          {
            "name": "Closed_bugs",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[closed_date_filter] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              "--, QueryBug[status] in {\"complete\", \"rejected\"}",
              ", QueryBug[closed_date_filter] <> -1)"
            ]
          },
          {
            "name": "Closed_bugs_4wk",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[closed_date_filter] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryBug[closed_date_filter] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(max(IntelYearWW[Intel Year-Work Week]), 2)) <= 4, 51, 3) )",
              "--,QueryBug[status] in {\"complete\", \"rejected\"}",
              ",QueryBug[closed_date_filter] <> -1",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), 0, BLANK())"
            ],
            "formatString": "0"
          },
          {
            "name": "PendingBug_BugEscape",
            "expression": [
              " CALCULATE([Bug], FILTER(QueryBug, ",
              "QueryBug[ww_submitted_nbr] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "&& (QueryBug[bug_termination_date] > MAX(IntelYearWW[Intel Year-Work Week]) || QueryBug[bug_termination_date] = -1)",
              "&& (QueryBug[future_date_filter] > MAX(IntelYearWW[Intel Year-Work Week]) || QueryBug[future_date_filter] = -1)",
              "",
              ")",
              "",
              ") +  ",
              "IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), BLANK(), BLANK())"
            ]
          },
          {
            "name": "PendingBugAlias",
            "expression": " IF(SELECTEDVALUE(IntelYearWW[Intel Year-Work Week]) in Values(QueryDynamicCalendar[ww]), [PendingBug_BugEscape]+0 , -1)"
          },
          {
            "name": "Repo_modified_bugs",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[ww_repo_modified_date] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              ", QueryBug[status] in {\"repo_modified\"}",
              ", QueryBug[ww_repo_modified_date] <> BLANK()",
              ", QueryBug[ww_closed_date] = BLANK())"
            ]
          },
          {
            "name": "Repo_modified_4wk",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[ww_repo_modified_date] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryBug[ww_repo_modified_date] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(max(IntelYearWW[Intel Year-Work Week]), 2)) <= 4, 51, 3) )",
              ",QueryBug[status] in {\"repo_modified\"}",
              ",QueryBug[ww_repo_modified_date] <> BLANK()",
              ",QueryBug[ww_closed_date] = BLANK()",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), 0, BLANK())"
            ],
            "formatString": "0"
          },
          {
            "name": "Silicon2022",
            "expression": [
              "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[SubmittedYear]=\"2022\", QueryBug[IsActiveIP]=1, QueryBug[is_found_bySoc] in{\"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\"},  QueryBug[bugeco.type]=\"bug\", QueryBug[IsUnique]=1, QueryBug[IsRealBug]=1, QueryBug[IsTestChip]=0, QueryBug[IsTrackingorSupport]=0)",
              ""
            ]
          },
          {
            "name": "SoC2022",
            "expression": [
              "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[SubmittedYear]=\"2022\", QueryBug[IsActiveIP]=1, QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"SW/FW PreSiBug Found by SoC\",\"SW/FW PreSiBug Found by Customers\"}, QueryBug[bugeco.type]=\"bug\", QueryBug[IsUnique]=1, QueryBug[IsRealBug]=1, QueryBug[IsTestChip]=0, QueryBug[IsTrackingorSupport]=0, QueryBug[IsTrackingorSupport]=0)",
              ""
            ]
          },
          {
            "name": "2022Bug",
            "expression": [
              "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[SubmittedYear]=\"2022\", QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by SoC\", \"HW PostSiBug Found by SoC\", \"HW PostSiBug Found by IP\", \"SW/FW PreSiBug Found by SoC\", \"SW/FW PostSiBug Found by SoC\", \"SW/FW PostSiBug Found by Customers\",\"SW/FW PreSiBug Found by Customers\"}, QueryBug[IsActiveIP]=1, QueryBug[bugeco.type]=\"bug\", QueryBug[IsUnique]=1, QueryBug[IsRealBug]=1, QueryBug[IsTestChip]=0, QueryBug[IsTrackingorSupport]=0)",
              ""
            ]
          },
          {
            "name": "2022BugCum",
            "expression": [
              "Calculate([2022Bug], filter(all(QueryTrendWW[ww_trend]), QueryTrendWW[ww_trend]<=max(QueryTrendWW[ww_trend])))",
              ""
            ]
          },
          {
            "name": "2022BugEscapeGoal",
            "expression": [
              "Calculate(sumx(QueryTrendWW,[2021AverageBaseBugEscape])*0.5, filter(all(QueryTrendWW[ww_trend]), QueryTrendWW[ww_trend]<=max(QueryTrendWW[ww_trend])))",
              ""
            ]
          },
          {
            "name": "2021AverageBaseBugEscape",
            "expression": [
              "CALCULATE(sum([2021Base_BugEscape])/52,all(QueryTrendWW))",
              ""
            ]
          },
          {
            "name": "2022BugCum_datauntilcurrentweek",
            "expression": "If(max(QueryTrendWW[WW])<=max(QueryTrendWW[currentweek]),Calculate([2022Bug], filter(all(QueryTrendWW[ww_trend]), QueryTrendWW[ww_trend]<=max(QueryTrendWW[ww_trend]))))"
          },
          {
            "name": "PendingBug_BugEscape_zero",
            "expression": "[PendingBug_BugEscape]+0"
          },
          {
            "name": "DynamicTitleForBugsWWSubmittedProfile",
            "expression": [
              " ",
              "var years = CONVERT(CONCATENATEX(VALUES(QueryBug[SubmittedYear]),QueryBug[SubmittedYear],\",\", QueryBug[SubmittedYear], DESC), STRING)",
              "--var stat = CONCATENATEX(distinct(querybug[status]), QueryBug[status], \",\",QueryBug[status],ASC)",
              "var minyear = MIN(QueryBug[SubmittedYear])",
              "var maxyear = MAX(QueryBug[SubmittedYear])",
              "return  /*stat &*/ [DynamicBugorBugEscapeTitle] & \" Per WW Submitted by Status From \" & minyear & \"-\" & maxyear"
            ]
          },
          {
            "name": "PendingInternalBugs",
            "expression": [
              " CALCULATE(DISTINCTCOUNT(QueryBug[id])",
              ",QueryBug[IsRealBug] = 1",
              ",QueryBug[bugeco.type] = \"bug\"",
              ",QueryBug[IsUnique]=1",
              ",QueryBug[IsActiveIP]=1",
              ",QueryBug[is_found_bySoc] in {\"HW PreSiBug Found by IP\",\"SW/FW PreSiBug Found by IP\",\"SW/FW PostSiBug Found by IP\",\"HW PostSiBug Found by TestChip\",\"HW PreSiBug Found by TestChip\",\"SW/FW PostSiBug Found by TestChip\",\"SW/FW PreSiBug Found by TestChip\"}",
              ",QueryBug[IsTrackingorSupport]=0",
              ",QueryBug[status] in {\"open\", \"approved\", \"change_defined\", \"future\"}",
              "",
              ")"
            ]
          },
          {
            "name": "DynamicBugorBugEscapeTitle",
            "expression": [
              " ",
              "var is_found_bySoc_selections = DISTINCT(QueryBug[is_found_bySoc])",
              "var bug_or_bug_escape = IF(",
              "    \"HW PreSiBug Found by IP\" in is_found_bySoc_selections",
              "    || \"PostSiBug NoSoC\" in is_found_bySoc_selections",
              "    || \"PreSiBug NoSoC\" in is_found_bySoc_selections",
              "    || \"SW/FW PostSiBug Found by IP\" in is_found_bySoc_selections",
              "    || \"SW/FW PreSiBug Found by IP\" in is_found_bySoc_selections",
              "    , \"Bugs\"",
              "    , \"Bug Escapes\"",
              "    )",
              "return bug_or_bug_escape"
            ]
          },
          {
            "name": "Title_BugProfileDynamic",
            "expression": [
              " ",
              "",
              "var checkipfamilyfilter = IF(NOT(ISFILTERED(QueryBug[IPFamily])), \"ALL\", CONCATENATEX(ALLSELECTED(QueryBug[IPFamily]), QueryBug[IPFamily],\",\", QueryBug[IPFamily], ASC)) ",
              "",
              "return [DynamicBugorBugEscapeTitle] & \" Profile Per IPFamily: \" & checkipfamilyfilter"
            ]
          },
          {
            "name": "Future_Bugs",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[future_date_filter] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              ", QueryBug[future_date_filter] <> -1)"
            ]
          },
          {
            "name": "Future_bugs_4wk",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[future_date_filter] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryBug[future_date_filter] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(max(IntelYearWW[Intel Year-Work Week]), 2)) <= 4, 51, 3) )",
              ",QueryBug[future_date_filter] <> -1",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), 0, BLANK())"
            ]
          },
          {
            "name": "TitleBugSummary",
            "expression": [
              " ",
              "var checkipfamilyfilter = IF(NOT(ISFILTERED(QueryBug[IPFamily])), \"ALL\", CONCATENATEX(ALLSELECTED(QueryBug[IPFamily]), QueryBug[IPFamily],\",\", QueryBug[IPFamily], ASC)) ",
              "",
              "return [DynamicBugorBugEscapeTitle] & \" Summary per IPFamily: \" & checkipfamilyfilter"
            ]
          },
          {
            "name": "TotalAllID",
            "expression": " COUNTA(QueryBug[id])"
          },
          {
            "name": "Total_Incoming",
            "expression": [
              "CALCULATE([TotalAllID], FILTER(QueryBug, QueryBug[ww_submitted_nbr] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              ", DynamicProjectAffectedCalendarBridge[ww_submitted_nbr] <> BLANK()) + 0"
            ]
          },
          {
            "name": "Total_Closed",
            "expression": [
              "CALCULATE([TotalAllID], ",
              "FILTER(QueryBug, QueryBug[closed_date_filter] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              "--, QueryBug[status] in {\"complete\", \"rejected\"}",
              ", QueryBug[closed_date_filter] <> -1) + 0"
            ]
          },
          {
            "name": "Total_RepoModified",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[ww_repo_modified_date] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              ", QueryBug[status] in {\"repo_modified\"} --confirmed with Irene/Chris/Kristine on this on 9/20/22 only real bug",
              ", QueryBug[ww_repo_modified_date] <> BLANK()",
              ", QueryBug[ww_closed_date] = BLANK()) + 0"
            ]
          },
          {
            "name": "Total_Future",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[future_date_filter] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              ", QueryBug[future_date_filter] <> -1, QueryBug[bugeco.type]=\"bug\") + 0 --confirmed with Irene/Chris/Kristine on this on 9/20/22 only bug escape"
            ]
          },
          {
            "name": "Total_Incoming_4wk",
            "expression": [
              "CALCULATE([TotalAllID], ",
              "FILTER(QueryBug, QueryBug[ww_submitted_nbr]<= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryBug[ww_submitted_nbr] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(MAX(IntelYearWW[Intel Year-Work Week]), 2))<= 4, 51, 3) )",
              ",QueryBug[ww_submitted_nbr] <> BLANK()",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), 0, BLANK()) + 0"
            ],
            "formatString": "0"
          },
          {
            "name": "Total_Closed_4wk",
            "expression": [
              "CALCULATE([TotalAllID], ",
              "FILTER(QueryBug, QueryBug[closed_date_filter] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryBug[closed_date_filter] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(max(IntelYearWW[Intel Year-Work Week]), 2)) <= 4, 51, 3) )",
              "--,QueryBug[status] in {\"complete\", \"rejected\"}",
              ",QueryBug[closed_date_filter] <> -1",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), 0, BLANK()) + 0"
            ],
            "formatString": "0"
          },
          {
            "name": "Total_RepoModified_4wk",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[ww_repo_modified_date] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryBug[ww_repo_modified_date] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(max(IntelYearWW[Intel Year-Work Week]), 2)) <= 4, 51, 3) )",
              ",QueryBug[status] in {\"repo_modified\"}",
              ",QueryBug[ww_repo_modified_date] <> BLANK()",
              ",QueryBug[ww_closed_date] = BLANK(), QueryBug[bugeco.type]=\"bug\" --Per Kristine/Irene/Chris confirmation on 9/20/22",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), 0, BLANK()) + 0"
            ],
            "formatString": "0"
          },
          {
            "name": "Total_Future_4wk",
            "expression": [
              "CALCULATE([Bug], ",
              "FILTER(QueryBug, QueryBug[future_date_filter] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryBug[future_date_filter] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(max(IntelYearWW[Intel Year-Work Week]), 2)) <= 4, 51, 3) )",
              ",QueryBug[future_date_filter] <> -1, QueryBug[bugeco.type]=\"bug\" --Confirmed with Kristine/Irene/Chris on 9/20/22",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), 0, BLANK()) + 0"
            ],
            "formatString": "0"
          },
          {
            "name": "Total_PendingBug_BugEscape",
            "expression": [
              " CALCULATE([Bug], FILTER(QueryBug, ",
              "QueryBug[ww_submitted_nbr] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "&& (QueryBug[bug_termination_date] > MAX(IntelYearWW[Intel Year-Work Week]) || QueryBug[bug_termination_date] = -1)",
              "&& (QueryBug[future_date_filter] > MAX(IntelYearWW[Intel Year-Work Week]) || QueryBug[future_date_filter] = -1) &&QueryBug[bugeco.type]=\"bug\" --confirmed with Kristine/Irene/Chris on 9/20/22",
              "",
              ")",
              "",
              ") +  ",
              "IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryBug[currentww], 1), BLANK(), BLANK())"
            ]
          },
          {
            "name": "Total_PendingBug_BugEscape_zero",
            "expression": "[Total_PendingBug_BugEscape]+0"
          },
          {
            "name": "NotABug_for_ComingvsClosedAllBug",
            "expression": "CALCULATE(DISTINCTCOUNT(QueryBug[id]), QueryBug[Not_aBug_for_incomingvsClosed]=1)"
          },
          {
            "name": "column_name",
            "expression": "SWITCH(LASTNONBLANK(Column_slicer[Item],1),\"id\",LASTNONBLANK(QueryBug[id],1),\"url\",LASTNONBLANK(QueryBug[url],1),\"ip_supplier\",LASTNONBLANK(QueryBug[ip_supplier],1),\"SOC Die\",LASTNONBLANK(QueryBug[SOC Die],1),\"IPFamily\",LASTNONBLANK(QueryBug[IPFamily],1),\"is_found_bySoc\",LASTNONBLANK(QueryBug[is_found_bySoc],1),\"is_PreSiPostSi\",LASTNONBLANK(QueryBug[is_PreSiPostSi],1),\"sub_bugcategory\",LASTNONBLANK(QueryBug[sub_bugcategory],1),\"submitted_date\",LASTNONBLANK(QueryBug[submitted_date],1),\"SubmittedYear_Quarter\",LASTNONBLANK(QueryBug[SubmittedYear_Quarter],1),\"title\",LASTNONBLANK(QueryBug[title],1),\"bug_category\",LASTNONBLANK(QueryBug[bug_category],1),\"status\",LASTNONBLANK(QueryBug[status],1),\"status_detail\",LASTNONBLANK(QueryBug[status_detail],1),\"priority\",LASTNONBLANK(QueryBug[priority],1),\"owner\",LASTNONBLANK(QueryBug[owner],1),\"ccb_prq_gating\",LASTNONBLANK(QueryBug[ccb_prq_gating],1),\"retro_status\",LASTNONBLANK(QueryBug[retro_status],1),\"retro_ip_escape\",LASTNONBLANK(QueryBug[retro_ip_escape],1),\"retro_global_action\",LASTNONBLANK(QueryBug[retro_global_action],1),\"retro_analysis\",LASTNONBLANK(QueryBug[retro_analysis],1),\"retro_learnings\",LASTNONBLANK(QueryBug[retro_learnings],1),\"component\",LASTNONBLANK(QueryBug[component],1),\"Configuration\",LASTNONBLANK(QueryBug[Configuration],1),\"release_affected\",LASTNONBLANK(QueryBug[release_affected],1),\"tenant\",LASTNONBLANK(QueryBug[tenant],1),\"from_tenant\",LASTNONBLANK(QueryBug[from_tenant],1),\"submitted_by\",LASTNONBLANK(QueryBug[submitted_by],1),\"updated_by\",LASTNONBLANK(QueryBug[updated_by],1),\"responseSLA\",LASTNONBLANK(QueryBug[responseSLA],1),\"resolutionSLA\",LASTNONBLANK(QueryBug[resolutionSLA],1),\"bugeco.env_found\",LASTNONBLANK(QueryBug[bugeco.env_found],1),\"team_found\",LASTNONBLANK(QueryBug[team_found],1),\"bugeco.type\",LASTNONBLANK(QueryBug[bugeco.type],1),\"ingredient\",LASTNONBLANK(QueryBug[ingredient],1),\"closed_date\",LASTNONBLANK(QueryBug[closed_date],1),\"ww_closed_date\",LASTNONBLANK(QueryBug[ww_closed_date],1),\"ww_updated_date\",LASTNONBLANK(QueryBug[ww_updated_date],1),\"repo_modified_date\",LASTNONBLANK(QueryBug[repo_modified_date],1),\"ww_repo_modified_date\",LASTNONBLANK(QueryBug[ww_repo_modified_date],1),\"sla_resolution_met\",LASTNONBLANK(QueryBug[sla_resolution_met],1)) "
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "[tenant]",
              ",ww",
              ",[family]",
              ",[original_family]",
              ",priority",
              ",[ip_supplier] ",
              ",[release]",
              ",[release] as [Configuration]",
              ",[release_affected] ",
              ", [tag]",
              ",[status]",
              ",[status_detail]",
              ",[project]",
              ",[Soc Die] as [SoCDieForSorting]",
              ",[id]",
              ",[lineage]",
              ",[original_lineage]",
              ",[title]",
              ", [ww_submitted_date]",
              ",CONVERT(INT,[BugFixedDoneDate]) as [BugFixedDoneDate]",
              ",[bugeco.env_found] ",
              ",[bugeco.team_found]",
              ",[bug_category]",
              ",from_tenant",
              ", from_subject",
              ",[bugeco.type]",
              ",component",
              ",url",
              ",[ccb_prq_gating]",
              ",[currentww]",
              ",[currentmonth]",
              ",[currentyear]",
              ",[subip_family]",
              ",[subip_supplier]",
              ",[ingredient]",
              ",[is_PreSiPostSi]",
              ",[is_found_bySoc]",
              ",IsCount ",
              ",[lineage_final]",
              ",IsSubIP",
              ",[sub_bugcategory]",
              ",[bugeco.release_found]",
              ",retro_status",
              ",retro_ip_escape",
              ",retro_global_learning",
              ",retro_global_action",
              ", retro_analysis",
              ", retro_learnings",
              ",owner",
              ",CONVERT (INT,REPLACE([ww_closed_date] ,'ww','')) as [ww_closed_date] ",
              ",[generation]",
              ",IsRealBug",
              ",milestone",
              ",[submitted_date]",
              ",[closed_date]",
              ",supplier_org",
              ",[totalID]",
              ",submitted_by",
              ",updated_by",
              ",ww_sla_response_date as responseSLA",
              ",ww_sla_resolution_date as resolutionSLA",
              ",[sla_response_met]",
              ",[sla_response_date]",
              ",[sla_resolution_met]",
              ",[sla_resolution_date]",
              ",updated_date",
              ",[ww_updated_date]",
              ",drop_fix",
              ",[repo_modified_date]",
              ",CONVERT (INT,REPLACE([ww_repo_modified_date] ,'ww','')) as [ww_repo_modified_date] ",
              ",CONVERT (INT,REPLACE([ww_future_date] ,'ww','')) as [ww_future_date]",
              ",CASE WHEN  datepart(ww,[submitted_date]) >= datepart(ww,dateadd(week,-1,getdate())) THEN 1 ELSE 0 END as [is_new]",
              ",CASE WHEN [sla_response_met] = 'SLAFailed' THEN 1 else 0  END as [is_response_failed]",
              ",CASE WHEN([sla_response_met] = 'SLAMet' AND [sla_response_date] is null)THEN 1 else 0 END as [is_response_met]",
              ",case when  DATEPART(ww,[submitted_date]) = datepart(ww,dateadd(week,-1,getdate()))THEN 1 else 0 END as [response_time_filter]",
              ",CASE WHEN [sla_resolution_met] = 'SLAFailed' THEN 1 else 0  END as [is_resolution_failed]",
              ",CASE WHEN([sla_resolution_met] = 'SLAMet' AND [sla_resolution_date] is null)THEN 1 else 0 END as [is_resolution_met]",
              ",CASE WHEN DATEPART(ww,isnull([sla_resolution_date],[closed_date])) = datepart(ww,dateadd(week,-1,getdate()))and  DATEPART(ww,[submitted_date]) < datepart(ww, GETDATE())THEN 1 else 0 END as [resolution_time_filter]",
              ",support_type",
              "from [v_ipg_bug_all]"
            ]
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "[tenant]",
              ",ww",
              ",[family]",
              ",[original_family]",
              ",priority",
              ",[ip_supplier] ",
              ",[release]",
              ",[release] as [Configuration]",
              ",[release_affected] ",
              ", [tag]",
              ",[status]",
              ",[status_detail]",
              ",[project]",
              ",[Soc Die] as [SoCDieForSorting]",
              ",[id]",
              ",[lineage]",
              ",[original_lineage]",
              ",[title]",
              ", [ww_submitted_date]",
              ",CONVERT(INT,[BugFixedDoneDate]) as [BugFixedDoneDate]",
              ",[bugeco.env_found] ",
              ",[bugeco.team_found]",
              ",[bug_category]",
              ",from_tenant",
              ", from_subject",
              ",[bugeco.type]",
              ",component",
              ",url",
              ",[ccb_prq_gating]",
              ",[currentww]",
              ",[currentmonth]",
              ",[currentyear]",
              ",[subip_family]",
              ",[subip_supplier]",
              ",[ingredient]",
              ",[is_PreSiPostSi]",
              ",[is_found_bySoc]",
              ",IsCount ",
              ",[lineage_final]",
              ",IsSubIP",
              ",[sub_bugcategory]",
              ",[bugeco.release_found]",
              ",retro_status",
              ",retro_ip_escape",
              ",retro_global_learning",
              ",retro_global_action",
              ", retro_analysis",
              ", retro_learnings",
              ",owner",
              ",CONVERT (INT,REPLACE([ww_closed_date] ,'ww','')) as [ww_closed_date] ",
              ",[generation]",
              ",IsRealBug",
              ",milestone",
              ",[submitted_date]",
              ",[closed_date]",
              ",supplier_org",
              ",[totalID]",
              ",submitted_by",
              ",updated_by",
              ",ww_sla_response_date as responseSLA",
              ",ww_sla_resolution_date as resolutionSLA",
              ",[sla_response_met]",
              ",[sla_response_date]",
              ",[sla_resolution_met]",
              ",[sla_resolution_date]",
              ",updated_date",
              ",[ww_updated_date]",
              ",drop_fix",
              ",[repo_modified_date]",
              ",CONVERT (INT,REPLACE([ww_repo_modified_date] ,'ww','')) as [ww_repo_modified_date] ",
              ",CONVERT (INT,REPLACE([ww_future_date] ,'ww','')) as [ww_future_date]",
              ",CASE WHEN  datepart(ww,[submitted_date]) >= datepart(ww,dateadd(week,-1,getdate())) THEN 1 ELSE 0 END as [is_new]",
              ",CASE WHEN [sla_response_met] = 'SLAFailed' THEN 1 else 0  END as [is_response_failed]",
              ",CASE WHEN([sla_response_met] = 'SLAMet' AND [sla_response_date] is null)THEN 1 else 0 END as [is_response_met]",
              ",case when  DATEPART(ww,[submitted_date]) = datepart(ww,dateadd(week,-1,getdate()))THEN 1 else 0 END as [response_time_filter]",
              ",CASE WHEN [sla_resolution_met] = 'SLAFailed' THEN 1 else 0  END as [is_resolution_failed]",
              ",CASE WHEN([sla_resolution_met] = 'SLAMet' AND [sla_resolution_date] is null)THEN 1 else 0 END as [is_resolution_met]",
              ",CASE WHEN DATEPART(ww,isnull([sla_resolution_date],[closed_date])) = datepart(ww,dateadd(week,-1,getdate()))and  DATEPART(ww,[submitted_date]) < datepart(ww, GETDATE())THEN 1 else 0 END as [resolution_time_filter]",
              ",support_type",
              "from [v_ipg_bug_all]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryIntelWW",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Work Week"
          },
          {
            "type": "calculated",
            "name": "WWSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(COUNTROWS(QueryIntelWW), QueryIntelWW[Intel Year-Work Week]<=EARLIER(QueryIntelWW[Intel Year-Work Week]))"
          }
        ],
        "partitions": [
          {
            "name": "QueryIntelWW",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week] from [v_time_day] ",
                "order by [Intel Year-Work Week] asc"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [v_time_day] ",
                  "order by [Intel Year-Work Week] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week] from [v_time_day] ",
              "order by [Intel Year-Work Week] asc"
            ]
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] from [v_time_day] ",
              "order by [Intel Year-Work Week] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryCIGActiveIP",
        "columns": [
          {
            "name": "family.name",
            "dataType": "string",
            "sourceColumn": "family.name"
          },
          {
            "name": "IsActiveIP",
            "dataType": "int64",
            "sourceColumn": "IsActiveIP"
          }
        ],
        "partitions": [
          {
            "name": "QueryCIGActiveIP",
            "source": {
              "type": "query",
              "query": [
                "select distinct  [family.name]",
                ",CASE WHEN [family.name] in ('PSTH', 'SATA3 Controller', 'PES P2SB', 'PES ITSS', 'PES RTC', 'PES LPC', 'PES SMB') THEN 0 ELSE 1 END as IsActiveIP",
                "  from [DW.release_central.family] where ",
                "ww = datepart(ww, getutcdate())",
                "and [family.hsdes_tenant] in ('sip', 'client_conn_ip') and [family.visibility] = 'show'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [family.name]",
                  ",CASE WHEN [family.name] in ('PSTH', 'SATA3 Controller', 'PES P2SB', 'PES ITSS', 'PES RTC', 'PES LPC', 'PES SMB') THEN 0 ELSE 1 END as IsActiveIP",
                  "  from [DW.release_central.family] where ",
                  "ww = datepart(ww, getutcdate())",
                  "and [family.hsdes_tenant] in ('sip', 'client_conn_ip') and [family.visibility] = 'show'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct  [family.name]",
              ",CASE WHEN [family.name] in ('PSTH', 'SATA3 Controller', 'PES P2SB', 'PES ITSS', 'PES RTC', 'PES LPC', 'PES SMB') THEN 0 ELSE 1 END as IsActiveIP",
              "  from [DW.release_central.family] where ",
              "ww = datepart(ww, getutcdate())",
              "and [family.hsdes_tenant] in ('sip', 'client_conn_ip') and [family.visibility] = 'show'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          },
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct  [family.name]",
              ",CASE WHEN [family.name] in ('PSTH', 'SATA3 Controller', 'PES P2SB', 'PES ITSS', 'PES RTC', 'PES LPC', 'PES SMB') THEN 0 ELSE 1 END as IsActiveIP",
              "  from [DW.release_central.family] where ",
              "ww = datepart(ww, getutcdate())",
              "and [family.hsdes_tenant] in ('sip', 'client_conn_ip') and [family.visibility] = 'show'"
            ]
          }
        ]
      },
      {
        "name": "QueryTrendWW",
        "columns": [
          {
            "name": "WW",
            "dataType": "int64",
            "sourceColumn": "WW"
          },
          {
            "name": "currentweek",
            "dataType": "int64",
            "sourceColumn": "currentweek"
          },
          {
            "type": "calculated",
            "name": "ww_trend",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RIGHT([WW],2)"
          }
        ],
        "partitions": [
          {
            "name": "QueryTrendWW",
            "source": {
              "type": "query",
              "query": "select distinct[Intel Year-Work Week] as WW, datepart(ww, getutcdate())  as currentweek from [v_time_day] where left(ww, 4)= left(datepart(ww, getutcdate()), 4)",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct[Intel Year-Work Week] as WW, datepart(ww, getutcdate())  as currentweek from [v_time_day] where left(ww, 4)= left(datepart(ww, getutcdate()), 4)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct[Intel Year-Work Week] as WW, datepart(ww, getutcdate())  as currentweek from [v_time_day] where left(ww, 4)= left(datepart(ww, getutcdate()), 4)</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          },
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct[Intel Year-Work Week] as WW, datepart(ww, getutcdate())  as currentweek from [v_time_day] where left(ww, 4)= left(datepart(ww, getutcdate()), 4)"
          }
        ]
      },
      {
        "name": "QueryLastRefresh",
        "columns": [
          {
            "name": "lastRefresh",
            "dataType": "dateTime",
            "sourceColumn": "lastRefresh",
            "formatString": "General Date"
          },
          {
            "type": "calculated",
            "name": "LastRefreshTime",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[lastRefresh]&\" PST\""
          }
        ],
        "partitions": [
          {
            "name": "QueryLastRefresh",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "getdate() as lastRefresh",
                "from [cig_devsuborg_cached]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "getdate() as lastRefresh",
                  "from [cig_devsuborg_cached]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "getdate() as lastRefresh",
              "from [cig_devsuborg_cached]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryIntelCalendar",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Work Week",
            "sourceProviderType": "Integer"
          },
          {
            "name": "intel Quarter",
            "dataType": "string",
            "sourceColumn": "intel Quarter",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "IntelYear",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LEFT([Intel Year-Work Week], 4)"
          },
          {
            "type": "calculated",
            "name": "IntelYearQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[IntelYear]&[intel Quarter]"
          },
          {
            "name": "Intel Month",
            "dataType": "string",
            "sourceColumn": "Intel Month"
          },
          {
            "name": "Intel Month Name",
            "dataType": "string",
            "sourceColumn": "Intel Month Name",
            "sortByColumn": "Intel Month"
          }
        ],
        "partitions": [
          {
            "name": "QueryIntelCalendar",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week]",
                ",[intel Quarter]",
                ",RIGHT('0'+CAST([intel month] AS VARCHAR(2)),2) as [Intel Month]",
                ", CASE",
                "WHEN [Intel Month] = 01 THEN 'Jan'",
                "WHEN [Intel Month] = 02 THEN 'Feb'",
                "WHEN [Intel Month] = 03 THEN 'Mar'",
                "WHEN [Intel Month] = 04 THEN 'Apr'",
                "WHEN [Intel Month] = 05 THEN 'May'",
                "WHEN [Intel Month] = 06 THEN 'Jun'",
                "WHEN [Intel Month] = 07 THEN 'Jul'",
                "WHEN [Intel Month] = 08 THEN 'Aug'",
                "WHEN [Intel Month] = 09 THEN 'Sept'",
                "WHEN [Intel Month] = 10 THEN 'Oct'",
                "WHEN [Intel Month] = 11 THEN 'Nov'",
                "WHEN [Intel Month] = 12 THEN 'Dec'",
                "END as [Intel Month Name]",
                "from [V_TIME_DAY]",
                "order by [Intel Year-Work Week] desc"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week]",
                  ",[intel Quarter]",
                  ",RIGHT('0'+CAST([intel month] AS VARCHAR(2)),2) as [Intel Month]",
                  ", CASE",
                  "WHEN [Intel Month] = 01 THEN 'Jan'",
                  "WHEN [Intel Month] = 02 THEN 'Feb'",
                  "WHEN [Intel Month] = 03 THEN 'Mar'",
                  "WHEN [Intel Month] = 04 THEN 'Apr'",
                  "WHEN [Intel Month] = 05 THEN 'May'",
                  "WHEN [Intel Month] = 06 THEN 'Jun'",
                  "WHEN [Intel Month] = 07 THEN 'Jul'",
                  "WHEN [Intel Month] = 08 THEN 'Aug'",
                  "WHEN [Intel Month] = 09 THEN 'Sept'",
                  "WHEN [Intel Month] = 10 THEN 'Oct'",
                  "WHEN [Intel Month] = 11 THEN 'Nov'",
                  "WHEN [Intel Month] = 12 THEN 'Dec'",
                  "END as [Intel Month Name]",
                  "from [V_TIME_DAY]",
                  "order by [Intel Year-Work Week] desc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week]",
              ",[intel Quarter]",
              ",RIGHT('0'+CAST([intel month] AS VARCHAR(2)),2) as [Intel Month]",
              ", CASE",
              "WHEN [Intel Month] = 01 THEN 'Jan'",
              "WHEN [Intel Month] = 02 THEN 'Feb'",
              "WHEN [Intel Month] = 03 THEN 'Mar'",
              "WHEN [Intel Month] = 04 THEN 'Apr'",
              "WHEN [Intel Month] = 05 THEN 'May'",
              "WHEN [Intel Month] = 06 THEN 'Jun'",
              "WHEN [Intel Month] = 07 THEN 'Jul'",
              "WHEN [Intel Month] = 08 THEN 'Aug'",
              "WHEN [Intel Month] = 09 THEN 'Sept'",
              "WHEN [Intel Month] = 10 THEN 'Oct'",
              "WHEN [Intel Month] = 11 THEN 'Nov'",
              "WHEN [Intel Month] = 12 THEN 'Dec'",
              "END as [Intel Month Name]",
              "from [V_TIME_DAY]",
              "order by [Intel Year-Work Week] desc"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIntelCalendar"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week]",
              ",[intel Quarter]",
              ",RIGHT('0'+CAST([intel month] AS VARCHAR(2)),2) as [Intel Month]",
              ", CASE",
              "WHEN [Intel Month] = 01 THEN 'Jan'",
              "WHEN [Intel Month] = 02 THEN 'Feb'",
              "WHEN [Intel Month] = 03 THEN 'Mar'",
              "WHEN [Intel Month] = 04 THEN 'Apr'",
              "WHEN [Intel Month] = 05 THEN 'May'",
              "WHEN [Intel Month] = 06 THEN 'Jun'",
              "WHEN [Intel Month] = 07 THEN 'Jul'",
              "WHEN [Intel Month] = 08 THEN 'Aug'",
              "WHEN [Intel Month] = 09 THEN 'Sept'",
              "WHEN [Intel Month] = 10 THEN 'Oct'",
              "WHEN [Intel Month] = 11 THEN 'Nov'",
              "WHEN [Intel Month] = 12 THEN 'Dec'",
              "END as [Intel Month Name]",
              "from [V_TIME_DAY]",
              "order by [Intel Year-Work Week] desc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryGladius",
        "columns": [
          {
            "name": "old_family",
            "dataType": "string",
            "sourceColumn": "old_family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Family",
            "dataType": "string",
            "sourceColumn": "Family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Gladius",
            "dataType": "string",
            "sourceColumn": "Gladius",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ip_supplier",
            "dataType": "string",
            "sourceColumn": "ip_supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "suborg_supplier",
            "dataType": "string",
            "sourceColumn": "suborg_supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "devsuborg",
            "dataType": "string",
            "sourceColumn": "devsuborg",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Dev_Lead",
            "dataType": "string",
            "sourceColumn": "Dev_Lead",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Product_Owner",
            "dataType": "string",
            "sourceColumn": "Product_Owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Support_Lead",
            "dataType": "string",
            "sourceColumn": "Support_Lead",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Program_Manager",
            "dataType": "string",
            "sourceColumn": "Program_Manager",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "Query_Gladius",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct old_family",
                ",Family",
                ",Gladius",
                ",ip_supplier",
                ",suborg_supplier",
                ",devsuborg",
                ",Dev_Lead",
                ",Product_Owner",
                ",Support_Lead",
                ",Program_Manager",
                ",configuration",
                "from v_ipg_contacts"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct old_family",
                  ",Family",
                  ",Gladius",
                  ",ip_supplier",
                  ",suborg_supplier",
                  ",devsuborg",
                  ",Dev_Lead",
                  ",Product_Owner",
                  ",Support_Lead",
                  ",Program_Manager",
                  ",configuration",
                  "from v_ipg_contacts</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct old_family",
              ",Family",
              ",Gladius",
              ",ip_supplier",
              ",suborg_supplier",
              ",devsuborg",
              ",Dev_Lead",
              ",Product_Owner",
              ",Support_Lead",
              ",Program_Manager",
              ",configuration",
              "from v_ipg_contacts"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Query_Gladius"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct old_family",
              ",Family",
              ",Gladius",
              ",ip_supplier",
              ",suborg_supplier",
              ",devsuborg",
              ",Dev_Lead",
              ",Product_Owner",
              ",Support_Lead",
              ",Program_Manager",
              ",configuration",
              "from v_ipg_contacts</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryDevGroup",
        "columns": [
          {
            "name": "devgroup",
            "dataType": "string",
            "sourceColumn": "devgroup",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "devsuborg",
            "dataType": "string",
            "sourceColumn": "devsuborg",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "QueryDevGroup",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct devgroup, devsuborg from [v_ipg_carbon_milestone] where devorg = 'IPG'",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct devgroup, devsuborg from [v_ipg_carbon_milestone] where devorg = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct devgroup, devsuborg from [v_ipg_carbon_milestone] where devorg = 'IPG'"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryDevGroup"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct devgroup, devsuborg from [v_ipg_carbon_milestone] where devorg = 'IPG'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "worker_public",
        "columns": [
          {
            "name": "User_Name",
            "dataType": "string",
            "sourceColumn": "User_Name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "User_WWID",
            "dataType": "string",
            "sourceColumn": "User_WWID",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "User_Idsid",
            "dataType": "string",
            "sourceColumn": "User_Idsid",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "worker_public",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
                "from [WORKER_PUBLIC]",
                "where [IsActive] =1",
                "and [ShortID] is not null",
                "group by [ShortID]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
                  "from [WORKER_PUBLIC]",
                  "where [IsActive] =1",
                  "and [ShortID] is not null",
                  "group by [ShortID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
              "from [WORKER_PUBLIC]",
              "where [IsActive] =1",
              "and [ShortID] is not null",
              "group by [ShortID]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "worker_public"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct max([ccMailName]) as [User_Name],max([WWID]) as [User_WWID],[ShortID]as [User_Idsid]",
              "from [WORKER_PUBLIC]",
              "where [IsActive] =1",
              "and [ShortID] is not null",
              "group by [ShortID]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryClientSoCChipsetBug",
        "columns": [
          {
            "name": "soc_bug_id",
            "dataType": "int64",
            "sourceColumn": "soc_bug_id"
          },
          {
            "name": "soc_tenant",
            "dataType": "string",
            "isHidden": true,
            "sourceColumn": "soc_tenant"
          },
          {
            "name": "soc_status",
            "dataType": "string",
            "sourceColumn": "soc_status"
          },
          {
            "name": "soc_bugeco_type",
            "dataType": "string",
            "sourceColumn": "soc_bugeco_type"
          },
          {
            "name": "soc_ww_submitted_date",
            "dataType": "string",
            "sourceColumn": "soc_ww_submitted_date"
          },
          {
            "name": "soc_Submitted_Year",
            "dataType": "string",
            "sourceColumn": "soc_Submitted_Year"
          },
          {
            "name": "IsDifferences",
            "dataType": "string",
            "sourceColumn": "IsDifferences"
          },
          {
            "name": "soc_bug_title",
            "dataType": "string",
            "sourceColumn": "soc_bug_title"
          },
          {
            "name": "ipg_bug_id",
            "dataType": "int64",
            "sourceColumn": "ipg_bug_id"
          },
          {
            "name": "ipg_tenant",
            "dataType": "string",
            "sourceColumn": "ipg_tenant"
          },
          {
            "name": "ipg_status",
            "dataType": "string",
            "sourceColumn": "ipg_status"
          },
          {
            "name": "ipg_status_detail",
            "dataType": "string",
            "sourceColumn": "ipg_status_detail"
          },
          {
            "name": "ipg_bugeco_type",
            "dataType": "string",
            "sourceColumn": "ipg_bugeco_type"
          },
          {
            "name": "SoC Die",
            "dataType": "string",
            "sourceColumn": "SoC Die"
          },
          {
            "name": "IPG SoC Die",
            "dataType": "string",
            "sourceColumn": "IPG SoC Die"
          },
          {
            "name": "ipg_ww_submitted_date",
            "dataType": "string",
            "sourceColumn": "ipg_ww_submitted_date"
          },
          {
            "name": "ipg_bug_title",
            "dataType": "string",
            "sourceColumn": "ipg_bug_title"
          },
          {
            "name": "soc_bug_url",
            "dataType": "string",
            "sourceColumn": "soc_bug_url"
          },
          {
            "name": "ipg_bug_url",
            "dataType": "string",
            "sourceColumn": "ipg_bug_url"
          },
          {
            "name": "soc_status_detail",
            "dataType": "string",
            "sourceColumn": "soc_status_detail"
          },
          {
            "name": "ipg_lineage",
            "dataType": "int64",
            "sourceColumn": "ipg_lineage"
          },
          {
            "name": "soc_bug_category",
            "dataType": "string",
            "sourceColumn": "soc_bug_category"
          },
          {
            "name": "ipg_bug_category",
            "dataType": "string",
            "sourceColumn": "ipg_bug_category"
          },
          {
            "name": "ipg_family",
            "dataType": "string",
            "sourceColumn": "ipg_family"
          },
          {
            "type": "calculated",
            "name": "IPG IPFamily",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK([gladius_family])||[gladius_family] in{\"tbd\", \"multi\"}, [ipg_family], [gladius_family])"
          },
          {
            "type": "calculated",
            "name": "IsDifferencesToValue",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " if(QueryClientSoCChipsetBug[IsDifferences] = \"differences\", 1, 0)"
          },
          {
            "name": "soc_family",
            "dataType": "string",
            "sourceColumn": "soc_family"
          },
          {
            "type": "calculated",
            "name": "is_ipg_bug_category_equal_to_soc_bug_category",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryClientSoCChipsetBug[ipg_bug_category] == QueryClientSoCChipsetBug[soc_bug_category], 1,0)"
          },
          {
            "type": "calculated",
            "name": "is_ipg_bugeco_type_equal_to_soc_bugeco_type",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryClientSoCChipsetBug[ipg_bugeco_type] == QueryClientSoCChipsetBug[soc_bugeco_type], 1,0)"
          },
          {
            "type": "calculated",
            "name": "is_ipg_status_equal_to_soc_status",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryClientSoCChipsetBug[ipg_status] == QueryClientSoCChipsetBug[soc_status], 1,0)"
          },
          {
            "type": "calculated",
            "name": "is_ipg_status_detail_equal_to_soc_status_detail",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(QueryClientSoCChipsetBug[ipg_status_detail] == QueryClientSoCChipsetBug[soc_status_detail], 1,0)"
          },
          {
            "type": "calculated",
            "name": "gladius_family",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryGladius[Family], QueryGladius[old_family], QueryClientSoCChipsetBug[ipg_family])"
          }
        ],
        "partitions": [
          {
            "name": "QueryClientSoCChipsetBug",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select",
                "soc.id as soc_bug_id",
                ",ip.id as ipg_bug_id",
                ",soc.tenant as soc_tenant",
                ",ip.tenant as ipg_tenant",
                ",soc.status as soc_status",
                ",[client_soc_chipset.bugeco.status_detail] as soc_status_detail",
                ",ip.status as ipg_status",
                ",[status_detail] as ipg_status_detail",
                ",soc.[bugeco.type] as soc_bugeco_type",
                ",ip.[bugeco.type] as ipg_bugeco_type",
                ",ip.lineage [ipg_lineage]",
                ",soc.family as [SoC Die]",
                ",ip.[Soc Die] as [IPG SoC Die]",
                ",soc.ww_submitted_date as soc_ww_submitted_date",
                ",left(soc.ww_submitted_date, 4) as soc_Submitted_Year",
                ",ip.ww_submitted_date as ipg_ww_submitted_date",
                ",[client_soc_chipset.bugeco.bug_classification] as soc_bug_category",
                ",ip.bug_category as [ipg_bug_category]",
                ",CASE ",
                "WHEN ipg_bug_category is NULL or ipg_bug_category = '' or ip.[SoC Die] is NULL or ip.[SoC Die] = '' THEN 'NotCloneTicket'",
                "WHEN soc.status <> ip.status or",
                "[client_soc_chipset.bugeco.status_detail] <> [status_detail] or",
                "soc.[bugeco.type]<> ip.[bugeco.type] or",
                "[client_soc_chipset.bugeco.bug_classification] <> ip.bug_category",
                "THEN 'differences' ELSE 'matched' END as IsDifferences",
                ",soc.title as soc_bug_title",
                ",ip.title as ipg_bug_title",
                ",'https://hsdes.intel.com/home/default.html#article?id='+ soc.id as soc_bug_url",
                ",'https://hsdes.intel.com/home/default.html#article?id='+ ip.id as ipg_bug_url",
                ",ip.family as ipg_family",
                ", [client_soc_chipset.bugeco.family_ip] as soc_family",
                "from",
                "(",
                "SELECT id,lineage,family,[bugeco.type], [client_soc_chipset.bugeco.family_ip],[client_soc_chipset.bugeco.bug_classification], [client_soc_chipset.bugeco.status_detail], status, ww_submitted_date, tenant, title",
                "FROM [dw.client_soc_chipset.bugeco]",
                "WHERE 1=1",
                "and ww = datepart(ww, getutcdate())",
                "--and [bugeco.type] = 'bug'",
                "--and [family] = 'Meteor Lake SOC-M South'",
                "--and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
                "--and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
                "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
                "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
                "and [lineage] is not null",
                "and [lineage] <> ''",
                ") soc",
                "left join",
                "(select id",
                ",lineage",
                ",status",
                ",[status_detail]",
                ",family",
                ",[bugeco.type]",
                ",bug_category",
                ",[SoC Die]",
                ",tenant",
                ",ww_submitted_date",
                ",title",
                "from v_ipg_bug_all",
                "/* [DW.sip.bugeco]  ",
                "where 1=1 ",
                "and ww = datepart(ww, getutcdate())",
                "and family in (select old_family from ipg_old_family_cached)",
                "and ([sip.bugeco.release_status] not like '%trunk%' or [sip.bugeco.release_status] = '' or [sip.bugeco.release_status] is null)",
                "and (([bugeco.team_found]<> 'ext.tcss.icl' and [bugeco.team_found] <> 'ext.tcss.tgl') or [bugeco.team_found] is null or [bugeco.team_found] = '') */",
                ")ip",
                "on soc.lineage = ip.lineage",
                "",
                "",
                "",
                "",
                "",
                "/*SELECT distinct id,lineage,from_tenant,status,family,[bugeco.type] as [type]",
                "FROM [es.client_soc_chipset.bugeco]",
                "WHERE 1=1",
                "and [bugeco.type] = 'bug'",
                "and [family] = 'Meteor Lake SOC-M South'",
                "and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
                "and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
                "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
                "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
                "and [lineage] is not null",
                "and [lineage] <> '' */"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select",
                  "soc.id as soc_bug_id",
                  ",ip.id as ipg_bug_id",
                  ",soc.tenant as soc_tenant",
                  ",ip.tenant as ipg_tenant",
                  ",soc.status as soc_status",
                  ",[client_soc_chipset.bugeco.status_detail] as soc_status_detail",
                  ",ip.status as ipg_status",
                  ",[status_detail] as ipg_status_detail",
                  ",soc.[bugeco.type] as soc_bugeco_type",
                  ",ip.[bugeco.type] as ipg_bugeco_type",
                  ",ip.lineage [ipg_lineage]",
                  ",soc.family as [SoC Die]",
                  ",ip.[Soc Die] as [IPG SoC Die]",
                  ",soc.ww_submitted_date as soc_ww_submitted_date",
                  ",left(soc.ww_submitted_date, 4) as soc_Submitted_Year",
                  ",ip.ww_submitted_date as ipg_ww_submitted_date",
                  ",[client_soc_chipset.bugeco.bug_classification] as soc_bug_category",
                  ",ip.bug_category as [ipg_bug_category]",
                  ",CASE ",
                  "WHEN ipg_bug_category is NULL or ipg_bug_category = '' or ip.[SoC Die] is NULL or ip.[SoC Die] = '' THEN 'NotCloneTicket'",
                  "WHEN soc.status <> ip.status or",
                  "[client_soc_chipset.bugeco.status_detail] <> [status_detail] or",
                  "soc.[bugeco.type]<> ip.[bugeco.type] or",
                  "[client_soc_chipset.bugeco.bug_classification] <> ip.bug_category",
                  "THEN 'differences' ELSE 'matched' END as IsDifferences",
                  ",soc.title as soc_bug_title",
                  ",ip.title as ipg_bug_title",
                  ",'https://hsdes.intel.com/home/default.html#article?id='+ soc.id as soc_bug_url",
                  ",'https://hsdes.intel.com/home/default.html#article?id='+ ip.id as ipg_bug_url",
                  ",ip.family as ipg_family",
                  ", [client_soc_chipset.bugeco.family_ip] as soc_family",
                  "from",
                  "(",
                  "SELECT id,lineage,family,[bugeco.type], [client_soc_chipset.bugeco.family_ip],[client_soc_chipset.bugeco.bug_classification], [client_soc_chipset.bugeco.status_detail], status, ww_submitted_date, tenant, title",
                  "FROM [dw.client_soc_chipset.bugeco]",
                  "WHERE 1=1",
                  "and ww = datepart(ww, getutcdate())",
                  "--and [bugeco.type] = 'bug'",
                  "--and [family] = 'Meteor Lake SOC-M South'",
                  "--and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
                  "--and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
                  "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
                  "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
                  "and [lineage] is not null",
                  "and [lineage] <> ''",
                  ") soc",
                  "left join",
                  "(select id",
                  ",lineage",
                  ",status",
                  ",[status_detail]",
                  ",family",
                  ",[bugeco.type]",
                  ",bug_category",
                  ",[SoC Die]",
                  ",tenant",
                  ",ww_submitted_date",
                  ",title",
                  "from v_ipg_bug_all",
                  "/* [DW.sip.bugeco]  ",
                  "where 1=1 ",
                  "and ww = datepart(ww, getutcdate())",
                  "and family in (select old_family from ipg_old_family_cached)",
                  "and ([sip.bugeco.release_status] not like '%trunk%' or [sip.bugeco.release_status] = '' or [sip.bugeco.release_status] is null)",
                  "and (([bugeco.team_found]<> 'ext.tcss.icl' and [bugeco.team_found] <> 'ext.tcss.tgl') or [bugeco.team_found] is null or [bugeco.team_found] = '') */",
                  ")ip",
                  "on soc.lineage = ip.lineage",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "/*SELECT distinct id,lineage,from_tenant,status,family,[bugeco.type] as [type]",
                  "FROM [es.client_soc_chipset.bugeco]",
                  "WHERE 1=1",
                  "and [bugeco.type] = 'bug'",
                  "and [family] = 'Meteor Lake SOC-M South'",
                  "and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
                  "and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
                  "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
                  "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
                  "and [lineage] is not null",
                  "and [lineage] <> '' */</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select",
              "soc.id as soc_bug_id",
              ",ip.id as ipg_bug_id",
              ",soc.tenant as soc_tenant",
              ",ip.tenant as ipg_tenant",
              ",soc.status as soc_status",
              ",[client_soc_chipset.bugeco.status_detail] as soc_status_detail",
              ",ip.status as ipg_status",
              ",[status_detail] as ipg_status_detail",
              ",soc.[bugeco.type] as soc_bugeco_type",
              ",ip.[bugeco.type] as ipg_bugeco_type",
              ",ip.lineage [ipg_lineage]",
              ",soc.family as [SoC Die]",
              ",ip.[Soc Die] as [IPG SoC Die]",
              ",soc.ww_submitted_date as soc_ww_submitted_date",
              ",left(soc.ww_submitted_date, 4) as soc_Submitted_Year",
              ",ip.ww_submitted_date as ipg_ww_submitted_date",
              ",[client_soc_chipset.bugeco.bug_classification] as soc_bug_category",
              ",ip.bug_category as [ipg_bug_category]",
              ",CASE ",
              "WHEN ipg_bug_category is NULL or ipg_bug_category = '' or ip.[SoC Die] is NULL or ip.[SoC Die] = '' THEN 'NotCloneTicket'",
              "WHEN soc.status <> ip.status or",
              "[client_soc_chipset.bugeco.status_detail] <> [status_detail] or",
              "soc.[bugeco.type]<> ip.[bugeco.type] or",
              "[client_soc_chipset.bugeco.bug_classification] <> ip.bug_category",
              "THEN 'differences' ELSE 'matched' END as IsDifferences",
              ",soc.title as soc_bug_title",
              ",ip.title as ipg_bug_title",
              ",'https://hsdes.intel.com/home/default.html#article?id='+ soc.id as soc_bug_url",
              ",'https://hsdes.intel.com/home/default.html#article?id='+ ip.id as ipg_bug_url",
              ",ip.family as ipg_family",
              ", [client_soc_chipset.bugeco.family_ip] as soc_family",
              "from",
              "(",
              "SELECT id,lineage,family,[bugeco.type], [client_soc_chipset.bugeco.family_ip],[client_soc_chipset.bugeco.bug_classification], [client_soc_chipset.bugeco.status_detail], status, ww_submitted_date, tenant, title",
              "FROM [dw.client_soc_chipset.bugeco]",
              "WHERE 1=1",
              "and ww = datepart(ww, getutcdate())",
              "--and [bugeco.type] = 'bug'",
              "--and [family] = 'Meteor Lake SOC-M South'",
              "--and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
              "--and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
              "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
              "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
              "and [lineage] is not null",
              "and [lineage] <> ''",
              ") soc",
              "left join",
              "(select id",
              ",lineage",
              ",status",
              ",[status_detail]",
              ",family",
              ",[bugeco.type]",
              ",bug_category",
              ",[SoC Die]",
              ",tenant",
              ",ww_submitted_date",
              ",title",
              "from v_ipg_bug_all",
              "/* [DW.sip.bugeco]  ",
              "where 1=1 ",
              "and ww = datepart(ww, getutcdate())",
              "and family in (select old_family from ipg_old_family_cached)",
              "and ([sip.bugeco.release_status] not like '%trunk%' or [sip.bugeco.release_status] = '' or [sip.bugeco.release_status] is null)",
              "and (([bugeco.team_found]<> 'ext.tcss.icl' and [bugeco.team_found] <> 'ext.tcss.tgl') or [bugeco.team_found] is null or [bugeco.team_found] = '') */",
              ")ip",
              "on soc.lineage = ip.lineage",
              "",
              "",
              "",
              "",
              "",
              "/*SELECT distinct id,lineage,from_tenant,status,family,[bugeco.type] as [type]",
              "FROM [es.client_soc_chipset.bugeco]",
              "WHERE 1=1",
              "and [bugeco.type] = 'bug'",
              "and [family] = 'Meteor Lake SOC-M South'",
              "and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
              "and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
              "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
              "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
              "and [lineage] is not null",
              "and [lineage] <> '' */"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryClientSoCChipsetBug"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select",
              "soc.id as soc_bug_id",
              ",ip.id as ipg_bug_id",
              ",soc.tenant as soc_tenant",
              ",ip.tenant as ipg_tenant",
              ",soc.status as soc_status",
              ",[client_soc_chipset.bugeco.status_detail] as soc_status_detail",
              ",ip.status as ipg_status",
              ",[status_detail] as ipg_status_detail",
              ",soc.[bugeco.type] as soc_bugeco_type",
              ",ip.[bugeco.type] as ipg_bugeco_type",
              ",ip.lineage [ipg_lineage]",
              ",soc.family as [SoC Die]",
              ",ip.[Soc Die] as [IPG SoC Die]",
              ",soc.ww_submitted_date as soc_ww_submitted_date",
              ",left(soc.ww_submitted_date, 4) as soc_Submitted_Year",
              ",ip.ww_submitted_date as ipg_ww_submitted_date",
              ",[client_soc_chipset.bugeco.bug_classification] as soc_bug_category",
              ",ip.bug_category as [ipg_bug_category]",
              ",CASE ",
              "WHEN ipg_bug_category is NULL or ipg_bug_category = '' or ip.[SoC Die] is NULL or ip.[SoC Die] = '' THEN 'NotCloneTicket'",
              "WHEN soc.status <> ip.status or",
              "[client_soc_chipset.bugeco.status_detail] <> [status_detail] or",
              "soc.[bugeco.type]<> ip.[bugeco.type] or",
              "[client_soc_chipset.bugeco.bug_classification] <> ip.bug_category",
              "THEN 'differences' ELSE 'matched' END as IsDifferences",
              ",soc.title as soc_bug_title",
              ",ip.title as ipg_bug_title",
              ",'https://hsdes.intel.com/home/default.html#article?id='+ soc.id as soc_bug_url",
              ",'https://hsdes.intel.com/home/default.html#article?id='+ ip.id as ipg_bug_url",
              ",ip.family as ipg_family",
              ", [client_soc_chipset.bugeco.family_ip] as soc_family",
              "from",
              "(",
              "SELECT id,lineage,family,[bugeco.type], [client_soc_chipset.bugeco.family_ip],[client_soc_chipset.bugeco.bug_classification], [client_soc_chipset.bugeco.status_detail], status, ww_submitted_date, tenant, title",
              "FROM [dw.client_soc_chipset.bugeco]",
              "WHERE 1=1",
              "and ww = datepart(ww, getutcdate())",
              "--and [bugeco.type] = 'bug'",
              "--and [family] = 'Meteor Lake SOC-M South'",
              "--and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
              "--and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
              "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
              "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
              "and [lineage] is not null",
              "and [lineage] <> ''",
              ") soc",
              "left join",
              "(select id",
              ",lineage",
              ",status",
              ",[status_detail]",
              ",family",
              ",[bugeco.type]",
              ",bug_category",
              ",[SoC Die]",
              ",tenant",
              ",ww_submitted_date",
              ",title",
              "from v_ipg_bug_all",
              "/* [DW.sip.bugeco]  ",
              "where 1=1 ",
              "and ww = datepart(ww, getutcdate())",
              "and family in (select old_family from ipg_old_family_cached)",
              "and ([sip.bugeco.release_status] not like '%trunk%' or [sip.bugeco.release_status] = '' or [sip.bugeco.release_status] is null)",
              "and (([bugeco.team_found]<> 'ext.tcss.icl' and [bugeco.team_found] <> 'ext.tcss.tgl') or [bugeco.team_found] is null or [bugeco.team_found] = '') */",
              ")ip",
              "on soc.lineage = ip.lineage",
              "",
              "",
              "",
              "",
              "",
              "/*SELECT distinct id,lineage,from_tenant,status,family,[bugeco.type] as [type]",
              "FROM [es.client_soc_chipset.bugeco]",
              "WHERE 1=1",
              "and [bugeco.type] = 'bug'",
              "and [family] = 'Meteor Lake SOC-M South'",
              "and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
              "and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
              "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
              "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
              "and [lineage] is not null",
              "and [lineage] <> '' */</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryLineageClientSoCChipsetBug",
        "columns": [
          {
            "name": "lineage",
            "dataType": "int64",
            "sourceColumn": "lineage",
            "sourceProviderType": "BigInt"
          }
        ],
        "partitions": [
          {
            "name": "QueryLineageClientSoCChipsetBug",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct lineage",
                "FROM [dw.client_soc_chipset.bugeco]",
                "WHERE 1=1 ",
                "and ww = datepart(ww, getutcdate())",
                "--and [bugeco.type] = 'bug' ",
                "and [family] = 'Meteor Lake SOC-M South' ",
                "and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
                "and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
                "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
                "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
                "and [lineage] is not null ",
                "and [lineage] <> ''",
                "",
                "UNION",
                "",
                "select distinct ",
                "isnull(lineage, id) as lineage",
                "from [DW.sip.bugeco]  ",
                "where 1=1 ",
                "and ww = datepart(ww, getutcdate())",
                "and family in (select old_family from ipg_old_family_cached)",
                "and ([sip.bugeco.release_status] not like '%trunk%' or [sip.bugeco.release_status] = '' or [sip.bugeco.release_status] is null)",
                "/*and ([sip.bugeco.bug_category] not in ('tracking', 'support') or [sip.bugeco.bug_category]  is null or [sip.bugeco.bug_category]  = '')*/",
                "and (([bugeco.team_found]<> 'ext.tcss.icl' and [bugeco.team_found] <> 'ext.tcss.tgl') or [bugeco.team_found] is null or [bugeco.team_found] = '')"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct lineage",
                  "FROM [dw.client_soc_chipset.bugeco]",
                  "WHERE 1=1 ",
                  "and ww = datepart(ww, getutcdate())",
                  "--and [bugeco.type] = 'bug' ",
                  "and [family] = 'Meteor Lake SOC-M South' ",
                  "and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
                  "and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
                  "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
                  "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
                  "and [lineage] is not null ",
                  "and [lineage] <> ''",
                  "",
                  "UNION",
                  "",
                  "select distinct ",
                  "isnull(lineage, id) as lineage",
                  "from [DW.sip.bugeco]  ",
                  "where 1=1 ",
                  "and ww = datepart(ww, getutcdate())",
                  "and family in (select old_family from ipg_old_family_cached)",
                  "and ([sip.bugeco.release_status] not like '%trunk%' or [sip.bugeco.release_status] = '' or [sip.bugeco.release_status] is null)",
                  "/*and ([sip.bugeco.bug_category] not in ('tracking', 'support') or [sip.bugeco.bug_category]  is null or [sip.bugeco.bug_category]  = '')*/",
                  "and (([bugeco.team_found]<> 'ext.tcss.icl' and [bugeco.team_found] <> 'ext.tcss.tgl') or [bugeco.team_found] is null or [bugeco.team_found] = '')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct lineage",
              "FROM [dw.client_soc_chipset.bugeco]",
              "WHERE 1=1 ",
              "and ww = datepart(ww, getutcdate())",
              "--and [bugeco.type] = 'bug' ",
              "and [family] = 'Meteor Lake SOC-M South' ",
              "and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
              "and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
              "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
              "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
              "and [lineage] is not null ",
              "and [lineage] <> ''",
              "",
              "UNION",
              "",
              "select distinct ",
              "isnull(lineage, id) as lineage",
              "from [DW.sip.bugeco]  ",
              "where 1=1 ",
              "and ww = datepart(ww, getutcdate())",
              "and family in (select old_family from ipg_old_family_cached)",
              "and ([sip.bugeco.release_status] not like '%trunk%' or [sip.bugeco.release_status] = '' or [sip.bugeco.release_status] is null)",
              "/*and ([sip.bugeco.bug_category] not in ('tracking', 'support') or [sip.bugeco.bug_category]  is null or [sip.bugeco.bug_category]  = '')*/",
              "and (([bugeco.team_found]<> 'ext.tcss.icl' and [bugeco.team_found] <> 'ext.tcss.tgl') or [bugeco.team_found] is null or [bugeco.team_found] = '')"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryLineageClientSoCChipsetBug"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct lineage",
              "FROM [dw.client_soc_chipset.bugeco]",
              "WHERE 1=1 ",
              "and ww = datepart(ww, getutcdate())",
              "--and [bugeco.type] = 'bug' ",
              "and [family] = 'Meteor Lake SOC-M South' ",
              "and ([component] like '%#%' or [component] like '%.ehip%' and [component] not like '%hip%')",
              "and [client_soc_chipset.bugeco.bug_classification] in ('CKT', 'ROM', 'RTL', 'SD', 'HIP GDS')",
              "--and [client_soc_chipset.bugeco.status_detail] not in ('cannot_reproduce', 'filed_by_mistake', 'merged', 'not_a_defect')",
              "and ([from_tenant] is null or [from_tenant] = '' or ([tenant] = [from_tenant] and ([lineage] <> id)))",
              "and [lineage] is not null ",
              "and [lineage] <> ''",
              "",
              "UNION",
              "",
              "select distinct ",
              "isnull(lineage, id) as lineage",
              "from [DW.sip.bugeco]  ",
              "where 1=1 ",
              "and ww = datepart(ww, getutcdate())",
              "and family in (select old_family from ipg_old_family_cached)",
              "and ([sip.bugeco.release_status] not like '%trunk%' or [sip.bugeco.release_status] = '' or [sip.bugeco.release_status] is null)",
              "/*and ([sip.bugeco.bug_category] not in ('tracking', 'support') or [sip.bugeco.bug_category]  is null or [sip.bugeco.bug_category]  = '')*/",
              "and (([bugeco.team_found]<> 'ext.tcss.icl' and [bugeco.team_found] <> 'ext.tcss.tgl') or [bugeco.team_found] is null or [bugeco.team_found] = '')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryQuarter",
        "columns": [
          {
            "name": "Intel Year",
            "dataType": "int64",
            "sourceColumn": "Intel Year",
            "sourceProviderType": "Integer"
          },
          {
            "name": "intelquarter",
            "dataType": "string",
            "sourceColumn": "intelquarter",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "QuarterSorting",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "COUNTROWS(FILTER(QueryQuarter, QueryQuarter[Intel Year]<EARLIER(QueryQuarter[Intel Year])||QueryQuarter[Intel Year]=EARLIER(QueryQuarter[Intel Year])&&QueryQuarter[IntelQuarter]<=EARLIER(QueryQuarter[IntelQuarter])))"
          },
          {
            "type": "calculated",
            "name": "Year_Quarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[Intel Year]&[intelquarter]"
          }
        ],
        "partitions": [
          {
            "name": "QueryQuarter",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year]",
                ",right([intel Quarter],1) as [intelquarter]",
                "from [V_TIME_DAY]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year]",
                  ",right([intel Quarter],1) as [intelquarter]",
                  "from [V_TIME_DAY]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year]",
              ",right([intel Quarter],1) as [intelquarter]",
              "from [V_TIME_DAY]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryQuarter"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year]",
              ",right([intel Quarter],1) as [intelquarter]",
              "from [V_TIME_DAY]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "soc_family",
        "columns": [
          {
            "name": "SOC",
            "dataType": "string",
            "sourceColumn": "SOC",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpFamily",
            "dataType": "string",
            "sourceColumn": "IpFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Old IpFamily",
            "dataType": "string",
            "sourceColumn": "Old IpFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "family, soc",
            "dataType": "string",
            "sourceColumn": "family, soc"
          }
        ],
        "partitions": [
          {
            "name": "soc_family",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct[SOC], [IpFamily],[Old IpFamily], isnull(lower([Old IpFamily]),' ')+', '+isnull(lower([SOC]),' ') as [family, soc]",
                "from [ipg_support_manual_dataset]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct[SOC], [IpFamily],[Old IpFamily], isnull(lower([Old IpFamily]),' ')+', '+isnull(lower([SOC]),' ') as [family, soc]",
                  "from [ipg_support_manual_dataset]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct[SOC], [IpFamily],[Old IpFamily], isnull(lower([Old IpFamily]),' ')+', '+isnull(lower([SOC]),' ') as [family, soc]",
              "from [ipg_support_manual_dataset]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "soc_family"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct[SOC], [IpFamily],[Old IpFamily], isnull(lower([Old IpFamily]),' ')+', '+isnull(lower([SOC]),' ') as [family, soc]",
              "from [ipg_support_manual_dataset]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "soc_dates",
        "columns": [
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Stepping Name",
            "dataType": "string",
            "sourceColumn": "Stepping Name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Milestone",
            "dataType": "string",
            "sourceColumn": "Milestone",
            "sortByColumn": "SOC Milestone order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SOC Milestone order",
            "dataType": "int64",
            "sourceColumn": "SOC Milestone order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "SOC Date YYYYWW",
            "dataType": "int64",
            "sourceColumn": "SOC Date YYYYWW",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SOC Date",
            "dataType": "dateTime",
            "sourceColumn": "SOC Date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "SOC Date Complete",
            "dataType": "string",
            "sourceColumn": "SOC Date Complete",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "SOC Date YYYYWW for_comparison",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(RELATED(soc_key[is_dates_provider])=1,[SOC Date YYYYWW])"
          }
        ],
        "partitions": [
          {
            "name": "soc_dates",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct bom.[DieID],[DieName],",
                "soc_dates.[Stepping Name] ,soc_dates.[Milestone],soc_dates.[SOC Milestone order],soc_dates.[SOC Date YYYYWW],soc_dates.[SOC Date],soc_dates.[SOC Date Complete]",
                "",
                "from",
                "               (select distinct  [DieID],[DieName],[DieStatus],[SiProductItemCd],[SiProductItemDsc],[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                "              from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                "              where ([DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' )",
                "\t) as bom",
                "left join",
                "              (select distinct  [Speed ID], [Stepping Name] ,[Milestone],",
                "\t--case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                "\t--when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                "\tcase when [Milestone] = 'SoC Val 0.0' then 5 when [Milestone] = 'SoC Val 0.3' then 10 when [Milestone] = 'SoC Val 0.5' then 15  ",
                "\twhen [Milestone] = 'SoC Val 0.8' then 20 when [Milestone] = 'SoC Val 1.0' then 25 when [Milestone] = 'SoC Val 1.1' then 30  else 50 end as [SOC Milestone order],",
                "              cast(isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as int) as [SOC Date YYYYWW],",
                "              isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                "              case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                "              from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "              where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                "\tand  [Milestone] like'%SoC Val%'",
                "              ) as soc_dates",
                "on bom .[DieID] = soc_dates.[Speed ID]",
                "",
                "/*(bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                "       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                "       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )*/",
                "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct bom.[DieID],[DieName],",
                  "soc_dates.[Stepping Name] ,soc_dates.[Milestone],soc_dates.[SOC Milestone order],soc_dates.[SOC Date YYYYWW],soc_dates.[SOC Date],soc_dates.[SOC Date Complete]",
                  "",
                  "from",
                  "               (select distinct  [DieID],[DieName],[DieStatus],[SiProductItemCd],[SiProductItemDsc],[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
                  "              from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  "              where ([DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' )",
                  "\t) as bom",
                  "left join",
                  "              (select distinct  [Speed ID], [Stepping Name] ,[Milestone],",
                  "\t--case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
                  "\t--when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
                  "\tcase when [Milestone] = 'SoC Val 0.0' then 5 when [Milestone] = 'SoC Val 0.3' then 10 when [Milestone] = 'SoC Val 0.5' then 15  ",
                  "\twhen [Milestone] = 'SoC Val 0.8' then 20 when [Milestone] = 'SoC Val 1.0' then 25 when [Milestone] = 'SoC Val 1.1' then 30  else 50 end as [SOC Milestone order],",
                  "              cast(isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as int) as [SOC Date YYYYWW],",
                  "              isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
                  "              case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
                  "              from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "              where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
                  "\tand  [Milestone] like'%SoC Val%'",
                  "              ) as soc_dates",
                  "on bom .[DieID] = soc_dates.[Speed ID]",
                  "",
                  "/*(bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
                  "       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
                  "       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )*/",
                  "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct bom.[DieID],[DieName],",
              "soc_dates.[Stepping Name] ,soc_dates.[Milestone],soc_dates.[SOC Milestone order],soc_dates.[SOC Date YYYYWW],soc_dates.[SOC Date],soc_dates.[SOC Date Complete]",
              "",
              "from",
              "               (select distinct  [DieID],[DieName],[DieStatus],[SiProductItemCd],[SiProductItemDsc],[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "              from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "              where ([DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' )",
              "\t) as bom",
              "left join",
              "              (select distinct  [Speed ID], [Stepping Name] ,[Milestone],",
              "\t--case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t--when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "\tcase when [Milestone] = 'SoC Val 0.0' then 5 when [Milestone] = 'SoC Val 0.3' then 10 when [Milestone] = 'SoC Val 0.5' then 15  ",
              "\twhen [Milestone] = 'SoC Val 0.8' then 20 when [Milestone] = 'SoC Val 1.0' then 25 when [Milestone] = 'SoC Val 1.1' then 30  else 50 end as [SOC Milestone order],",
              "              cast(isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as int) as [SOC Date YYYYWW],",
              "              isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "              case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "              from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "              where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\tand  [Milestone] like'%SoC Val%'",
              "              ) as soc_dates",
              "on bom .[DieID] = soc_dates.[Speed ID]",
              "",
              "/*(bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )*/",
              "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "soc_dates"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct bom.[DieID],[DieName],",
              "soc_dates.[Stepping Name] ,soc_dates.[Milestone],soc_dates.[SOC Milestone order],soc_dates.[SOC Date YYYYWW],soc_dates.[SOC Date],soc_dates.[SOC Date Complete]",
              "",
              "from",
              "               (select distinct  [DieID],[DieName],[DieStatus],[SiProductItemCd],[SiProductItemDsc],[SecondLvlPlatformConfigID],[SecondLvlPlatformConfigNm]",
              "              from [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "              where ([DieStatus] = 'Active' or [SiProductStatus]  ='Active' or [SecondLvlPlatformStatus] ='Active' )",
              "\t) as bom",
              "left join",
              "              (select distinct  [Speed ID], [Stepping Name] ,[Milestone],",
              "\t--case when [Milestone] like'%Tape In%' then 'Tape In' when [Milestone] like'%Power On%' then 'Power On' when [Milestone] like'%PRQ%' then 'PRQ' ",
              "\t--when [Milestone] like'%Alpha%' then 'Alpha' when [Milestone] like'%Beta%' then 'Beta' when [Milestone] like'%PV%' then 'PV' end as [SOC Drop],",
              "\tcase when [Milestone] = 'SoC Val 0.0' then 5 when [Milestone] = 'SoC Val 0.3' then 10 when [Milestone] = 'SoC Val 0.5' then 15  ",
              "\twhen [Milestone] = 'SoC Val 0.8' then 20 when [Milestone] = 'SoC Val 1.0' then 25 when [Milestone] = 'SoC Val 1.1' then 30  else 50 end as [SOC Milestone order],",
              "              cast(isnull(isnull(isnull([Actual Finish YYYYWW],[Trend YYYYWW]),[POR YYYYWW]) ,[Drive To YYYYWW])as int) as [SOC Date YYYYWW],",
              "              isnull(isnull(isnull([Actual Finish],[Trend]),[POR]) ,[DriveTo])as [SOC Date],",
              "              case when  [Actual Finish] is null then 'No' else 'Yes' end as [SOC Date Complete]",
              "              from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "              where [Planning State] not in ('Delete' ,'Cancelled','Abandoned')",
              "\tand  [Milestone] like'%SoC Val%'",
              "              ) as soc_dates",
              "on bom .[DieID] = soc_dates.[Speed ID]",
              "",
              "/*(bom .[DieID] = soc_dates.[Speed ID] and [SOC Drop] = 'Tape In') or ",
              "       (bom .[SiProductItemCd] = soc_dates.[Speed ID] and [SOC Drop] in( 'Power On', 'PRQ')) or ",
              "       (bom .[SecondLvlPlatformConfigID] = soc_dates.[Speed ID] and [SOC Drop]  in( 'Alpha', 'Beta','PV')  )*/",
              "where bom.[DieID] is not null and bom.[DieStatus] = 'Active'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "soc_key",
        "columns": [
          {
            "name": "DieID",
            "dataType": "int64",
            "sourceColumn": "DieID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DieName",
            "dataType": "string",
            "sourceColumn": "DieName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SoC",
            "dataType": "string",
            "sourceColumn": "SoC",
            "sortByColumn": "SoC_order"
          },
          {
            "name": "SoC_order",
            "dataType": "int64",
            "sourceColumn": "SoC_order"
          },
          {
            "type": "calculated",
            "name": "SoC A",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[SoC]"
          },
          {
            "type": "calculated",
            "name": "SoC B",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[SoC]"
          },
          {
            "name": "is_dates_provider",
            "dataType": "int64",
            "sourceColumn": "is_dates_provider"
          }
        ],
        "partitions": [
          {
            "name": "soc_key",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select die.*, soc.[SoC], soc.[SoC_order],soc.[is_dates_provider]",
                "from",
                "\t(select distinct  [DieID],[DieName]",
                "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                "\twhere [DieStatus] = 'Active') as die",
                "left join",
                "\t(select distinct [project], [SoC],[is_dates_provider],",
                "\tcase when [SoC] = 'NA'  or [SoC]  is null  then 1 else 0 end as [SoC_order] ",
                "\tfrom [ipg_soc_customers_anchor] ) as soc",
                "on die.[DieName] = soc.[project]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select die.*, soc.[SoC], soc.[SoC_order],soc.[is_dates_provider]",
                  "from",
                  "\t(select distinct  [DieID],[DieName]",
                  "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
                  "\twhere [DieStatus] = 'Active') as die",
                  "left join",
                  "\t(select distinct [project], [SoC],[is_dates_provider],",
                  "\tcase when [SoC] = 'NA'  or [SoC]  is null  then 1 else 0 end as [SoC_order] ",
                  "\tfrom [ipg_soc_customers_anchor] ) as soc",
                  "on die.[DieName] = soc.[project]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select die.*, soc.[SoC], soc.[SoC_order],soc.[is_dates_provider]",
              "from",
              "\t(select distinct  [DieID],[DieName]",
              "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\twhere [DieStatus] = 'Active') as die",
              "left join",
              "\t(select distinct [project], [SoC],[is_dates_provider],",
              "\tcase when [SoC] = 'NA'  or [SoC]  is null  then 1 else 0 end as [SoC_order] ",
              "\tfrom [ipg_soc_customers_anchor] ) as soc",
              "on die.[DieName] = soc.[project]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "soc_key"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select die.*, soc.[SoC], soc.[SoC_order],soc.[is_dates_provider]",
              "from",
              "\t(select distinct  [DieID],[DieName]",
              "\tfrom [V_IPG_SPEED_FLATTENED_DESIGN_BOM_CACHED]",
              "\twhere [DieStatus] = 'Active') as die",
              "left join",
              "\t(select distinct [project], [SoC],[is_dates_provider],",
              "\tcase when [SoC] = 'NA'  or [SoC]  is null  then 1 else 0 end as [SoC_order] ",
              "\tfrom [ipg_soc_customers_anchor] ) as soc",
              "on die.[DieName] = soc.[project]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryProjectAffected",
        "columns": [
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ww",
            "dataType": "int64",
            "sourceColumn": "ww",
            "sourceProviderType": "Integer"
          },
          {
            "name": "original_family",
            "dataType": "string",
            "sourceColumn": "original_family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "family",
            "dataType": "string",
            "sourceColumn": "family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "priority",
            "dataType": "string",
            "sourceColumn": "priority",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ip_supplier",
            "dataType": "string",
            "sourceColumn": "ip_supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "release",
            "dataType": "string",
            "sourceColumn": "release",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "release_affected",
            "dataType": "string",
            "sourceColumn": "release_affected",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "tag",
            "dataType": "string",
            "sourceColumn": "tag",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "status",
            "dataType": "string",
            "sourceColumn": "status",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "status_order",
            "dataType": "int64",
            "sourceColumn": "status_order",
            "formatString": "0",
            "sourceProviderType": "Integer"
          },
          {
            "name": "status_detail",
            "dataType": "string",
            "sourceColumn": "status_detail",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "lineage",
            "dataType": "int64",
            "sourceColumn": "lineage",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "original_lineage",
            "dataType": "int64",
            "sourceColumn": "original_lineage",
            "sourceProviderType": "Integer"
          },
          {
            "name": "title",
            "dataType": "string",
            "sourceColumn": "title",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ww_submitted_date",
            "dataType": "string",
            "sourceColumn": "ww_submitted_date",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bugeco.env_found",
            "dataType": "string",
            "sourceColumn": "bugeco.env_found",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bugeco.team_found",
            "dataType": "string",
            "sourceColumn": "bugeco.team_found",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bug_category",
            "dataType": "string",
            "sourceColumn": "bug_category",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "from_tenant",
            "dataType": "string",
            "sourceColumn": "from_tenant",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "from_subject",
            "dataType": "string",
            "sourceColumn": "from_subject",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bugeco.type",
            "dataType": "string",
            "sourceColumn": "bugeco.type",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "component",
            "dataType": "string",
            "sourceColumn": "component",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "url",
            "dataType": "string",
            "sourceColumn": "url",
            "sourceProviderType": "VarChar",
            "dataCategory": "WebUrl"
          },
          {
            "name": "ccb_prq_gating",
            "dataType": "string",
            "sourceColumn": "ccb_prq_gating",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "currentww",
            "dataType": "int64",
            "sourceColumn": "currentww",
            "sourceProviderType": "Integer"
          },
          {
            "name": "currentmonth",
            "dataType": "int64",
            "sourceColumn": "currentmonth",
            "sourceProviderType": "Integer"
          },
          {
            "name": "currentyear",
            "dataType": "int64",
            "sourceColumn": "currentyear",
            "sourceProviderType": "Integer"
          },
          {
            "name": "subip_family",
            "dataType": "string",
            "sourceColumn": "subip_family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "subip_supplier",
            "dataType": "string",
            "sourceColumn": "subip_supplier",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "bugeco.release_found",
            "dataType": "string",
            "sourceColumn": "bugeco.release_found",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "supplier_org",
            "dataType": "string",
            "sourceColumn": "supplier_org",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is_PreSiPostSi",
            "dataType": "string",
            "sourceColumn": "is_PreSiPostSi",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "is_found_bySoc",
            "dataType": "string",
            "sourceColumn": "is_found_bySoc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "lineage_final",
            "dataType": "int64",
            "sourceColumn": "lineage_final",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "IsSubIP",
            "dataType": "string",
            "sourceColumn": "IsSubIP",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "sub_bugcategory",
            "dataType": "string",
            "sourceColumn": "sub_bugcategory",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_status",
            "dataType": "string",
            "sourceColumn": "retro_status",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_ip_escape",
            "dataType": "string",
            "sourceColumn": "retro_ip_escape",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_global_learning",
            "dataType": "string",
            "sourceColumn": "retro_global_learning",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_global_action",
            "dataType": "string",
            "sourceColumn": "retro_global_action",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_analysis",
            "dataType": "string",
            "sourceColumn": "retro_analysis",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "retro_learnings",
            "dataType": "string",
            "sourceColumn": "retro_learnings",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "owner",
            "dataType": "string",
            "sourceColumn": "owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ww_closed_date",
            "dataType": "string",
            "sourceColumn": "ww_closed_date",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "totalID",
            "dataType": "int64",
            "sourceColumn": "totalID",
            "sourceProviderType": "Integer"
          },
          {
            "type": "calculated",
            "name": "IPFamily",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryGladius[Family])"
          },
          {
            "type": "calculated",
            "name": "IPSupplier",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryGladius[ip_supplier])"
          },
          {
            "type": "calculated",
            "name": "DevSubOrg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(ISBLANK(RELATED(QueryGladius[devsuborg])), RELATED(QueryDevGroup[devsuborg]), RELATED(QueryGladius[devsuborg]))"
          },
          {
            "type": "calculated",
            "name": "StatusOrder",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if([status]=\"open\", 1, if([status]=\"approved\", 2, if([status]=\"in_progress\", 3, if([status]=\"change_defined\", 4, if([status]=\"repo_modified\", 5,  if([status]=\"rejected\", 6, if([status]=\"complete\", 7, if([status]=\"future\", 8, 9))))))))"
          },
          {
            "type": "calculated",
            "name": "StatusNameOrder",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[status]",
            "sortByColumn": "StatusOrder"
          },
          {
            "type": "calculated",
            "name": "ww_submitted_nbr",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "value(SUBSTITUTE(QueryProjectAffected[ww_submitted_date],\"ww\",\"\"))"
          },
          {
            "type": "calculated",
            "name": "SubmittedYear",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LEFT(QueryProjectAffected[ww_submitted_date],4)"
          },
          {
            "type": "calculated",
            "name": "Year_QuarterSorting",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIntelWWYear[Sorting_Quarter])"
          },
          {
            "type": "calculated",
            "name": "Submitted_YearQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIntelWWYear[Year_Quarter])",
            "sortByColumn": "Year_QuarterSorting"
          },
          {
            "type": "calculated",
            "name": "IntelYearQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIntelWWYear[Year_Quarter])",
            "sortByColumn": "SubmittedYear"
          },
          {
            "type": "calculated",
            "name": "Intel_Month_NBR",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "RELATED(QueryIntelWWYear[Intel Month])"
          },
          {
            "type": "calculated",
            "name": "Intel_Month_Name",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "RELATED(QueryIntelWWYear[Intel Month Name])",
              ""
            ],
            "sortByColumn": "Intel_Month_NBR"
          },
          {
            "type": "calculated",
            "name": "ww_closed_nbr",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "value(SUBSTITUTE(QueryProjectAffected[ww_closed_date],\"ww\",\"\"))"
          },
          {
            "name": "ww_repo_modified_date",
            "dataType": "string",
            "sourceColumn": "ww_repo_modified_date"
          },
          {
            "type": "calculated",
            "name": "ww_repo_modified_nbr",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "value(SUBSTITUTE(QueryProjectAffected[ww_repo_modified_date],\"ww\",\"\"))"
          },
          {
            "type": "calculated",
            "name": "LenProjectAffected",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " LEN(QueryProjectAffected[project_affected_orig])-LEN(SUBSTITUTE(QueryProjectAffected[project_affected_orig],\",\",\"\")) + 1"
          },
          {
            "name": "project_affected_orig",
            "dataType": "string",
            "sourceColumn": "project_affected_orig"
          }
        ],
        "partitions": [
          {
            "name": "Query",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct ",
                "[project]",
                ",[project_affected_orig]",
                ",[tenant]",
                ",[ww] ",
                ",[original_family]",
                ",[family]",
                ",[priority]",
                ",[ip_supplier]",
                ",[release]",
                ",[release_affected]",
                ",[tag]",
                ",[status]",
                ",[status_order]",
                ",[status_detail] ",
                ",[id]",
                ",[lineage]",
                ",[original_lineage]",
                ",[title]",
                ",[ww_submitted_date]",
                ",[bugeco.env_found]",
                ",[bugeco.team_found]",
                ",[bug_category]",
                ",[from_tenant]",
                ",[from_subject]",
                ",[bugeco.type]",
                ",[component]",
                ",[url]",
                ",[ccb_prq_gating]",
                ",[currentww] ",
                ",[currentmonth]",
                ",[currentyear]",
                ",[subip_family]",
                ",[subip_supplier]",
                ",[bugeco.release_found]",
                ",[supplier_org]",
                ",[is_PreSiPostSi]",
                ",[is_found_bySoc]",
                ",[lineage_final]",
                ",[IsSubIP]",
                ",[sub_bugcategory]",
                ",[retro_status]",
                ",[retro_ip_escape]",
                ",[retro_global_learning]",
                ",[retro_global_action]",
                ",[retro_analysis]",
                ",[retro_learnings]",
                ",[owner]",
                ",[ww_closed_date]",
                ",[ww_repo_modified_date]",
                ",[totalID]",
                "from v_ipg_bug_project_affected"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ",
                  "[project]",
                  ",[project_affected_orig]",
                  ",[tenant]",
                  ",[ww] ",
                  ",[original_family]",
                  ",[family]",
                  ",[priority]",
                  ",[ip_supplier]",
                  ",[release]",
                  ",[release_affected]",
                  ",[tag]",
                  ",[status]",
                  ",[status_order]",
                  ",[status_detail] ",
                  ",[id]",
                  ",[lineage]",
                  ",[original_lineage]",
                  ",[title]",
                  ",[ww_submitted_date]",
                  ",[bugeco.env_found]",
                  ",[bugeco.team_found]",
                  ",[bug_category]",
                  ",[from_tenant]",
                  ",[from_subject]",
                  ",[bugeco.type]",
                  ",[component]",
                  ",[url]",
                  ",[ccb_prq_gating]",
                  ",[currentww] ",
                  ",[currentmonth]",
                  ",[currentyear]",
                  ",[subip_family]",
                  ",[subip_supplier]",
                  ",[bugeco.release_found]",
                  ",[supplier_org]",
                  ",[is_PreSiPostSi]",
                  ",[is_found_bySoc]",
                  ",[lineage_final]",
                  ",[IsSubIP]",
                  ",[sub_bugcategory]",
                  ",[retro_status]",
                  ",[retro_ip_escape]",
                  ",[retro_global_learning]",
                  ",[retro_global_action]",
                  ",[retro_analysis]",
                  ",[retro_learnings]",
                  ",[owner]",
                  ",[ww_closed_date]",
                  ",[ww_repo_modified_date]",
                  ",[totalID]",
                  "from v_ipg_bug_project_affected</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "TotalBug",
            "expression": "DISTINCTCOUNT([id])"
          },
          {
            "name": "TotalBugCum",
            "expression": "If(max(QueryProjectAffected[ww_submitted_nbr])<=max([currentww]),Calculate([TotalBug],filter(all(QueryProjectAffected[ww_submitted_nbr]), QueryProjectAffected[ww_submitted_nbr]<=max(QueryProjectAffected[ww_submitted_nbr]))))"
          },
          {
            "name": "ProjectAffectedWWsubmitted",
            "expression": [
              "",
              "VAR minww =",
              "    CALCULATE (",
              "        MIN ( QueryIntelWWYear[SubmittedYear] ) * 100 + 1,",
              "        CROSSFILTER ( QueryProjectAffected[ww_submitted_nbr], QueryIntelWWYear[WWSubmitted], BOTH ),",
              "        ALL ( QueryIntelWWYear )",
              "    )",
              "VAR maxyear =",
              "    CALCULATE (",
              "        MAX ( QueryIntelWWYear[SubmittedYear] ),",
              "        CROSSFILTER ( QueryProjectAffected[ww_submitted_nbr], QueryIntelWWYear[WWSubmitted], BOTH ),",
              "        ALL ( QueryIntelWWYear )",
              "    )",
              "VAR maxww =",
              "    MAXX (",
              "        FILTER (",
              "            ALL ( QueryIntelWWYear ),",
              "            QueryIntelWWYear[SubmittedYear] = maxyear",
              "                && QueryIntelWWYear[WWSubmitted] <= QueryIntelWWYear[currentww]",
              "        ),",
              "        QueryIntelWWYear[WWSubmitted]",
              "    )",
              "VAR curww =",
              "    MIN ( QueryIntelWWYear[WWSubmitted] )",
              "",
              "VAR ProjectAffectedCount =",
              "    DISTINCTCOUNT(QueryProjectAffected[id])",
              "",
              "VAR result =",
              "    ProjectAffectedCount",
              "        + IF ( curww >= minww && curww <= maxww, 0 )",
              "RETURN",
              "    result"
            ]
          },
          {
            "name": "ProjectAffectedCumu",
            "expression": [
              "",
              "VAR minww =",
              "    CALCULATE (",
              "        MIN ( QueryIntelWWYear[SubmittedYear] ) * 100 + 1,",
              "        CROSSFILTER ( QueryProjectAffected[ww_submitted_nbr], QueryIntelWWYear[WWSubmitted], BOTH ),",
              "        ALL ( QueryIntelWWYear )",
              "    )",
              "VAR maxyear =",
              "    CALCULATE (",
              "        MAX ( QueryIntelWWYear[SubmittedYear] ),",
              "        CROSSFILTER ( QueryProjectAffected[ww_submitted_nbr], QueryIntelWWYear[WWSubmitted], BOTH ),",
              "        ALL ( QueryIntelWWYear )",
              "    )",
              "VAR maxww =",
              "    MAXX (",
              "        FILTER (",
              "            ALL ( QueryIntelWWYear ),",
              "            QueryIntelWWYear[SubmittedYear] = maxyear",
              "                && QueryIntelWWYear[WWSubmitted] <= QueryIntelWWYear[currentww]",
              "        ),",
              "        QueryIntelWWYear[WWSubmitted]",
              "    )",
              "VAR curww =",
              "    MIN ( QueryIntelWWYear[WWSubmitted] )",
              "",
              "",
              "VAR CumProjectAffectCount =",
              "    IF (",
              "        MAX ( QueryProjectAffected[ww_submitted_nbr] ) <= MAX ( QueryProjectAffected[currentww] ),",
              "        CALCULATE (",
              "            [TotalBug],",
              "            FILTER (",
              "                ALL ( QueryIntelWWYear[WWSubmitted] ),",
              "                QueryIntelWWYear[WWSubmitted] <= MAX ( QueryIntelWWYear[WWSubmitted] )",
              "            )",
              "        )",
              "    )",
              "VAR result =",
              "    CumProjectAffectCount\t",
              "        + IF ( curww >= minww && curww <= maxww, 0 )",
              "RETURN",
              "    result"
            ]
          },
          {
            "name": "count of submitted bugs a",
            "expression": [
              "",
              "CALCULATE(DISTINCTCOUNT(QueryProjectAffected[id]),",
              "FILTER(ALL(QueryProjectAffected[ww_submitted_nbr]), QueryProjectAffected[ww_submitted_nbr]=MAX(QueryIntelWW[Intel Year-Work Week])),",
              "ALL(QueryIntelWW[Intel Year-Work Week])",
              ")",
              "",
              ""
            ]
          },
          {
            "name": "count of closed bugs a",
            "expression": [
              " ",
              "CALCULATE(DISTINCTCOUNT(QueryProjectAffected[id]), ",
              "FILTER(ALL(QueryProjectAffected[ww_closed_nbr]), QueryProjectAffected[ww_closed_nbr]=MAX(QueryIntelWW[Intel Year-Work Week])),",
              "ALL(QueryIntelWW[Intel Year-Work Week])",
              ")"
            ]
          },
          {
            "name": "closed minus incoming a",
            "expression": "0+ [count of closed bugs a] - [count of submitted bugs a]"
          },
          {
            "name": "BugNotBugSupportBugCntaffected",
            "expression": " CALCULATE(DISTINCTCOUNT(QueryProjectAffected[id]))"
          },
          {
            "name": "MaxProjectAffected",
            "expression": "  MAX(QueryProjectAffected[LenProjectAffected])"
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct ",
              "[project]",
              ",[project_affected_orig]",
              ",[tenant]",
              ",[ww] ",
              ",[original_family]",
              ",[family]",
              ",[priority]",
              ",[ip_supplier]",
              ",[release]",
              ",[release_affected]",
              ",[tag]",
              ",[status]",
              ",[status_order]",
              ",[status_detail] ",
              ",[id]",
              ",[lineage]",
              ",[original_lineage]",
              ",[title]",
              ",[ww_submitted_date]",
              ",[bugeco.env_found]",
              ",[bugeco.team_found]",
              ",[bug_category]",
              ",[from_tenant]",
              ",[from_subject]",
              ",[bugeco.type]",
              ",[component]",
              ",[url]",
              ",[ccb_prq_gating]",
              ",[currentww] ",
              ",[currentmonth]",
              ",[currentyear]",
              ",[subip_family]",
              ",[subip_supplier]",
              ",[bugeco.release_found]",
              ",[supplier_org]",
              ",[is_PreSiPostSi]",
              ",[is_found_bySoc]",
              ",[lineage_final]",
              ",[IsSubIP]",
              ",[sub_bugcategory]",
              ",[retro_status]",
              ",[retro_ip_escape]",
              ",[retro_global_learning]",
              ",[retro_global_action]",
              ",[retro_analysis]",
              ",[retro_learnings]",
              ",[owner]",
              ",[ww_closed_date]",
              ",[ww_repo_modified_date]",
              ",[totalID]",
              "from v_ipg_bug_project_affected"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Query"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct ",
              "[project]",
              ",[project_affected_orig]",
              ",[tenant]",
              ",[ww] ",
              ",[original_family]",
              ",[family]",
              ",[priority]",
              ",[ip_supplier]",
              ",[release]",
              ",[release_affected]",
              ",[tag]",
              ",[status]",
              ",[status_order]",
              ",[status_detail] ",
              ",[id]",
              ",[lineage]",
              ",[original_lineage]",
              ",[title]",
              ",[ww_submitted_date]",
              ",[bugeco.env_found]",
              ",[bugeco.team_found]",
              ",[bug_category]",
              ",[from_tenant]",
              ",[from_subject]",
              ",[bugeco.type]",
              ",[component]",
              ",[url]",
              ",[ccb_prq_gating]",
              ",[currentww] ",
              ",[currentmonth]",
              ",[currentyear]",
              ",[subip_family]",
              ",[subip_supplier]",
              ",[bugeco.release_found]",
              ",[supplier_org]",
              ",[is_PreSiPostSi]",
              ",[is_found_bySoc]",
              ",[lineage_final]",
              ",[IsSubIP]",
              ",[sub_bugcategory]",
              ",[retro_status]",
              ",[retro_ip_escape]",
              ",[retro_global_learning]",
              ",[retro_global_action]",
              ",[retro_analysis]",
              ",[retro_learnings]",
              ",[owner]",
              ",[ww_closed_date]",
              ",[ww_repo_modified_date]",
              ",[totalID]",
              "from v_ipg_bug_project_affected</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryIntelWWYear",
        "columns": [
          {
            "name": "SubmittedYear",
            "dataType": "string",
            "sourceColumn": "SubmittedYear",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "WWSubmitted",
            "dataType": "int64",
            "sourceColumn": "WWSubmitted"
          },
          {
            "name": "currentww",
            "dataType": "int64",
            "sourceColumn": "currentww"
          },
          {
            "name": "currentyear",
            "dataType": "int64",
            "sourceColumn": "currentyear"
          },
          {
            "name": "intel Quarter",
            "dataType": "string",
            "sourceColumn": "intel Quarter"
          },
          {
            "name": "Intel Month Name",
            "dataType": "string",
            "sourceColumn": "Intel Month Name",
            "sortByColumn": "Intel Month"
          },
          {
            "name": "Intel Month",
            "dataType": "int64",
            "sourceColumn": "Intel Month"
          },
          {
            "name": "Year_Quarter",
            "dataType": "string",
            "sourceColumn": "Year_Quarter"
          },
          {
            "type": "calculated",
            "name": "Sorting_Quarter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "COUNTROWS (",
              "    FILTER (",
              "        QueryIntelWWYear,",
              "        QueryIntelWWYear[SubmittedYear] < EARLIER ( QueryIntelWWYear[SubmittedYear] )",
              "            || QueryIntelWWYear[SubmittedYear] = EARLIER ( QueryIntelWWYear[SubmittedYear] )",
              "                && QueryIntelWWYear[Intel Quarter] <= EARLIER ( QueryIntelWWYear[Intel Quarter] )",
              "    )",
              ")"
            ]
          }
        ],
        "partitions": [
          {
            "name": "QueryIntelWWYear",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [Intel Year-Work Week] as WWSubmitted",
                ", left([Intel Year-Work Week], 4) as SubmittedYear ",
                ",datepart(ww, getutcdate()) as [currentww] ",
                ",datepart(yy, getutcdate()) as [currentyear] ",
                ",[intel Quarter]",
                ",case ",
                "when [Intel Month] = 1 then 'Jan'",
                "when [Intel Month] = 2 then 'Feb'",
                "when [Intel Month] = 3 then 'Mar'",
                "when [Intel Month] = 4 then 'Apr'",
                "when [Intel Month] = 5 then 'May'",
                "when [Intel Month] = 6 then 'Jun'",
                "when [Intel Month] = 7 then 'Jul'",
                "when [Intel Month] = 8 then 'Aug'",
                "when [Intel Month] = 9 then 'Sep'",
                "when [Intel Month] = 10 then 'Oct'",
                "when [Intel Month] = 11 then 'Nov'",
                "when [Intel Month] = 12 then 'Dec'",
                "else 'No Month Mapped'",
                "end as [Intel Month Name]",
                ",[Intel Month]",
                ",[submittedYear]+[Intel Quarter] as Year_Quarter",
                "from [v_time_day] ",
                "",
                "order by [Intel Year-Work Week] asc"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] as WWSubmitted",
                  ", left([Intel Year-Work Week], 4) as SubmittedYear ",
                  ",datepart(ww, getutcdate()) as [currentww] ",
                  ",datepart(yy, getutcdate()) as [currentyear] ",
                  ",[intel Quarter]",
                  ",case ",
                  "when [Intel Month] = 1 then 'Jan'",
                  "when [Intel Month] = 2 then 'Feb'",
                  "when [Intel Month] = 3 then 'Mar'",
                  "when [Intel Month] = 4 then 'Apr'",
                  "when [Intel Month] = 5 then 'May'",
                  "when [Intel Month] = 6 then 'Jun'",
                  "when [Intel Month] = 7 then 'Jul'",
                  "when [Intel Month] = 8 then 'Aug'",
                  "when [Intel Month] = 9 then 'Sep'",
                  "when [Intel Month] = 10 then 'Oct'",
                  "when [Intel Month] = 11 then 'Nov'",
                  "when [Intel Month] = 12 then 'Dec'",
                  "else 'No Month Mapped'",
                  "end as [Intel Month Name]",
                  ",[Intel Month]",
                  ",[submittedYear]+[Intel Quarter] as Year_Quarter",
                  "from [v_time_day] ",
                  "",
                  "order by [Intel Year-Work Week] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [Intel Year-Work Week] as WWSubmitted",
              ", left([Intel Year-Work Week], 4) as SubmittedYear ",
              ",datepart(ww, getutcdate()) as [currentww] ",
              ",datepart(yy, getutcdate()) as [currentyear] ",
              ",[intel Quarter]",
              ",case ",
              "when [Intel Month] = 1 then 'Jan'",
              "when [Intel Month] = 2 then 'Feb'",
              "when [Intel Month] = 3 then 'Mar'",
              "when [Intel Month] = 4 then 'Apr'",
              "when [Intel Month] = 5 then 'May'",
              "when [Intel Month] = 6 then 'Jun'",
              "when [Intel Month] = 7 then 'Jul'",
              "when [Intel Month] = 8 then 'Aug'",
              "when [Intel Month] = 9 then 'Sep'",
              "when [Intel Month] = 10 then 'Oct'",
              "when [Intel Month] = 11 then 'Nov'",
              "when [Intel Month] = 12 then 'Dec'",
              "else 'No Month Mapped'",
              "end as [Intel Month Name]",
              ",[Intel Month]",
              ",[submittedYear]+[Intel Quarter] as Year_Quarter",
              "from [v_time_day] ",
              "",
              "order by [Intel Year-Work Week] asc"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIntelWWYear"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] as WWSubmitted",
              ", left([Intel Year-Work Week], 4) as SubmittedYear ",
              ",datepart(ww, getutcdate()) as [currentww] ",
              ",datepart(yy, getutcdate()) as [currentyear] ",
              ",[intel Quarter]",
              ",case ",
              "when [Intel Month] = 1 then 'Jan'",
              "when [Intel Month] = 2 then 'Feb'",
              "when [Intel Month] = 3 then 'Mar'",
              "when [Intel Month] = 4 then 'Apr'",
              "when [Intel Month] = 5 then 'May'",
              "when [Intel Month] = 6 then 'Jun'",
              "when [Intel Month] = 7 then 'Jul'",
              "when [Intel Month] = 8 then 'Aug'",
              "when [Intel Month] = 9 then 'Sep'",
              "when [Intel Month] = 10 then 'Oct'",
              "when [Intel Month] = 11 then 'Nov'",
              "when [Intel Month] = 12 then 'Dec'",
              "else 'No Month Mapped'",
              "end as [Intel Month Name]",
              ",[Intel Month]",
              ",[submittedYear]+[Intel Quarter] as Year_Quarter",
              "from [v_time_day] ",
              "",
              "order by [Intel Year-Work Week] asc</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryTestChip",
        "columns": [
          {
            "name": "product",
            "dataType": "string",
            "sourceColumn": "product",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IsTestChip",
            "dataType": "int64",
            "sourceColumn": "IsTestChip"
          }
        ],
        "partitions": [
          {
            "name": "QueryTestChip",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct [product.name] as product ",
                ",1 as [IsTestChip]",
                "from [dw.release_central.product]",
                "where 1=1 ",
                "and ww = datepart(ww, getutcdate())",
                "and [product.type] = 'testchip'",
                "and [product.hsdes_tenant] in ('ip_testchip', 'server', 'client_conn_ip', 'sip', 'hip', 'dft_services')"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [product.name] as product ",
                  ",1 as [IsTestChip]",
                  "from [dw.release_central.product]",
                  "where 1=1 ",
                  "and ww = datepart(ww, getutcdate())",
                  "and [product.type] = 'testchip'",
                  "and [product.hsdes_tenant] in ('ip_testchip', 'server', 'client_conn_ip', 'sip', 'hip', 'dft_services')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct [product.name] as product ",
              ",1 as [IsTestChip]",
              "from [dw.release_central.product]",
              "where 1=1 ",
              "and ww = datepart(ww, getutcdate())",
              "and [product.type] = 'testchip'",
              "and [product.hsdes_tenant] in ('ip_testchip', 'server', 'client_conn_ip', 'sip', 'hip', 'dft_services')"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryTestChip"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [product.name] as product ",
              ",1 as [IsTestChip]",
              "from [dw.release_central.product]",
              "where 1=1 ",
              "and ww = datepart(ww, getutcdate())",
              "and [product.type] = 'testchip'",
              "and [product.hsdes_tenant] in ('ip_testchip', 'server', 'client_conn_ip', 'sip', 'hip', 'dft_services')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryRTL1p0",
        "columns": [
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Category",
            "dataType": "string",
            "sourceColumn": "Category",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TrendYYYYWW",
            "dataType": "int64",
            "sourceColumn": "TrendYYYYWW",
            "sourceProviderType": "Integer"
          },
          {
            "name": "IsBlankTrendDate",
            "dataType": "int64",
            "sourceColumn": "IsBlankTrendDate",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "QueryRTL1p0",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/*----------------------------------------------------------------------------------------------------------------------------------------",
                "2021-02-25 <TinaD> - Create v_ipg_RTL1p0date based on cig_SocFiledBug_RTL_date_cached with only NonPIC config date",
                "------------------------------------------------------------------------------------------------------------------------------------------*/",
                "select configuration",
                ",'NonPIC' as [Category]",
                ", min([TrendYYYYWW]) as [TrendYYYYWW]",
                ", 0 as [IsBlankTrendDate] ",
                "from [V_IPG_CARBON_MILESTONE] a",
                "WHERE [DevOrg] = 'IPG' ",
                "and[drop] = 'RTL1p0' ",
                "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                "and [DropType] in ('Standard')",
                "and  configuration not like 'IOSF PSF%' ",
                "and [TrendYYYYWW] <>''",
                "group by configuration",
                "",
                "UNION ",
                "/*To pull in IOSF confi per Punit's request On PSF, we are supposed to do 1p0 drop ",
                "and then always do 1p1 drop. As the 1p0 drop is mostly early enough and historically ",
                "seen it change from 1p0 to 1p1, so PSF team has stopped doing 1p0 standard drop (no IPDS) ",
                "and label it as early and then 1p1 they will do standard drop (with IPDS). So we pull in all droptype for this family. ",
                "On 9/3/2019,confirmed with Kristine. We will use standard drop for all rtlp0 and rtl1p1 drops*/",
                "",
                "select configuration",
                ",'NonPIC' as [Category]",
                ", min([TrendYYYYWW]) as [TrendYYYYWW]",
                ", 0 as [IsBlankTrendDate] ",
                "from [V_IPG_CARBON_MILESTONE]a",
                "WHERE [DevOrg] = 'IPG' ",
                "and[drop] in ('RTL1p0', 'RTL1p1') ",
                "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                "and [TrendYYYYWW] <>''",
                "and  configuration like 'IOSF PSF%'",
                "group by configuration",
                "",
                "",
                "UNION ALL",
                "/*Non PIC config has blank trenddate*/",
                "select configuration",
                ",'NonPIC' as [Category]",
                ", min([TrendYYYYWW]) as [TrendYYYYWW]",
                ", 1 as [IsBlankTrendDate] ",
                "from [V_IPG_CARBON_MILESTONE] ",
                "WHERE [DevOrg] = 'IPG' ",
                "and[drop] = 'RTL1p0' ",
                "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                "and [DropType] in ('Standard')",
                "and ([TrendYYYYWW] is null or[TrendYYYYWW] = '')",
                "and configuration not in (select distinct configuration",
                "      from [V_IPG_CARBON_MILESTONE] ",
                "      WHERE 1=1 ",
                "      and[drop] = 'RTL1p0' ",
                "      and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                "      and [DropType] in ('Standard')",
                "      and [trendYYYYWW] <>'')",
                "group by configuration",
                "",
                "UNION ALL",
                "/*PIC config has trenddate*/",
                "select configuration",
                ",'PIC' as [Category]",
                ", min([TrendYYYYWW]) as [TrendYYYYWW]  /*per discussion with Kristine/Punit on 8/28/19, we will pull earliest date for RTL1p0 for PIC config as well */",
                ",0  as [IsBlankTrendDate]  ",
                "from [V_IPG_CARBON_MILESTONE]a",
                "WHERE [DevOrg] = 'IPG' ",
                "and[drop] = 'RTL1p0' ",
                "and [reuse] in ('configurable')",
                "and [DropType] in ('Standard')",
                "and [TrendYYYYWW] <>''",
                "group by configuration",
                "",
                "UNION ALL",
                "/*PIC config has blanktrenddate*/",
                "select configuration",
                ",'PIC' as [Category]",
                ", min([TrendYYYYWW]) as [TrendYYYYWW]  ",
                ",1 as [IsBlankTrendDate] ",
                "from [V_IPG_CARBON_MILESTONE]a",
                "WHERE [DevOrg] = 'IPG' ",
                "and[drop] = 'RTL1p0' ",
                "and [reuse] in ('configurable')",
                "and [DropType] in ('Standard')",
                "and ([TrendYYYYWW] is null or[TrendYYYYWW] = '')",
                " and configuration not in (select distinct configuration",
                "\t\t\t   from [V_IPG_CARBON_MILESTONE] a",
                "\t\t\t   WHERE 1=1 ",
                "\t\t\t  and [DevOrg] = 'IPG' ",
                "\t\t\t   and[drop] = 'RTL1p0' ",
                "\t\t\t   and [reuse] in ('configurable')",
                "\t\t\t   and [DropType] in ('Standard')",
                "\t\t\t   and [trendYYYYWW] <>'')",
                "group by configuration"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*----------------------------------------------------------------------------------------------------------------------------------------",
                  "2021-02-25 <TinaD> - Create v_ipg_RTL1p0date based on cig_SocFiledBug_RTL_date_cached with only NonPIC config date",
                  "------------------------------------------------------------------------------------------------------------------------------------------*/",
                  "select configuration",
                  ",'NonPIC' as [Category]",
                  ", min([TrendYYYYWW]) as [TrendYYYYWW]",
                  ", 0 as [IsBlankTrendDate] ",
                  "from [V_IPG_CARBON_MILESTONE] a",
                  "WHERE [DevOrg] = 'IPG' ",
                  "and[drop] = 'RTL1p0' ",
                  "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                  "and [DropType] in ('Standard')",
                  "and  configuration not like 'IOSF PSF%' ",
                  "and [TrendYYYYWW] <>''",
                  "group by configuration",
                  "",
                  "UNION ",
                  "/*To pull in IOSF confi per Punit's request On PSF, we are supposed to do 1p0 drop ",
                  "and then always do 1p1 drop. As the 1p0 drop is mostly early enough and historically ",
                  "seen it change from 1p0 to 1p1, so PSF team has stopped doing 1p0 standard drop (no IPDS) ",
                  "and label it as early and then 1p1 they will do standard drop (with IPDS). So we pull in all droptype for this family. ",
                  "On 9/3/2019,confirmed with Kristine. We will use standard drop for all rtlp0 and rtl1p1 drops*/",
                  "",
                  "select configuration",
                  ",'NonPIC' as [Category]",
                  ", min([TrendYYYYWW]) as [TrendYYYYWW]",
                  ", 0 as [IsBlankTrendDate] ",
                  "from [V_IPG_CARBON_MILESTONE]a",
                  "WHERE [DevOrg] = 'IPG' ",
                  "and[drop] in ('RTL1p0', 'RTL1p1') ",
                  "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                  "and [TrendYYYYWW] <>''",
                  "and  configuration like 'IOSF PSF%'",
                  "group by configuration",
                  "",
                  "",
                  "UNION ALL",
                  "/*Non PIC config has blank trenddate*/",
                  "select configuration",
                  ",'NonPIC' as [Category]",
                  ", min([TrendYYYYWW]) as [TrendYYYYWW]",
                  ", 1 as [IsBlankTrendDate] ",
                  "from [V_IPG_CARBON_MILESTONE] ",
                  "WHERE [DevOrg] = 'IPG' ",
                  "and[drop] = 'RTL1p0' ",
                  "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                  "and [DropType] in ('Standard')",
                  "and ([TrendYYYYWW] is null or[TrendYYYYWW] = '')",
                  "and configuration not in (select distinct configuration",
                  "      from [V_IPG_CARBON_MILESTONE] ",
                  "      WHERE 1=1 ",
                  "      and[drop] = 'RTL1p0' ",
                  "      and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
                  "      and [DropType] in ('Standard')",
                  "      and [trendYYYYWW] <>'')",
                  "group by configuration",
                  "",
                  "UNION ALL",
                  "/*PIC config has trenddate*/",
                  "select configuration",
                  ",'PIC' as [Category]",
                  ", min([TrendYYYYWW]) as [TrendYYYYWW]  /*per discussion with Kristine/Punit on 8/28/19, we will pull earliest date for RTL1p0 for PIC config as well */",
                  ",0  as [IsBlankTrendDate]  ",
                  "from [V_IPG_CARBON_MILESTONE]a",
                  "WHERE [DevOrg] = 'IPG' ",
                  "and[drop] = 'RTL1p0' ",
                  "and [reuse] in ('configurable')",
                  "and [DropType] in ('Standard')",
                  "and [TrendYYYYWW] <>''",
                  "group by configuration",
                  "",
                  "UNION ALL",
                  "/*PIC config has blanktrenddate*/",
                  "select configuration",
                  ",'PIC' as [Category]",
                  ", min([TrendYYYYWW]) as [TrendYYYYWW]  ",
                  ",1 as [IsBlankTrendDate] ",
                  "from [V_IPG_CARBON_MILESTONE]a",
                  "WHERE [DevOrg] = 'IPG' ",
                  "and[drop] = 'RTL1p0' ",
                  "and [reuse] in ('configurable')",
                  "and [DropType] in ('Standard')",
                  "and ([TrendYYYYWW] is null or[TrendYYYYWW] = '')",
                  " and configuration not in (select distinct configuration",
                  "\t\t\t   from [V_IPG_CARBON_MILESTONE] a",
                  "\t\t\t   WHERE 1=1 ",
                  "\t\t\t  and [DevOrg] = 'IPG' ",
                  "\t\t\t   and[drop] = 'RTL1p0' ",
                  "\t\t\t   and [reuse] in ('configurable')",
                  "\t\t\t   and [DropType] in ('Standard')",
                  "\t\t\t   and [trendYYYYWW] <>'')",
                  "group by configuration</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/*----------------------------------------------------------------------------------------------------------------------------------------",
              "2021-02-25 <TinaD> - Create v_ipg_RTL1p0date based on cig_SocFiledBug_RTL_date_cached with only NonPIC config date",
              "------------------------------------------------------------------------------------------------------------------------------------------*/",
              "select configuration",
              ",'NonPIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]",
              ", 0 as [IsBlankTrendDate] ",
              "from [V_IPG_CARBON_MILESTONE] a",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "and [DropType] in ('Standard')",
              "and  configuration not like 'IOSF PSF%' ",
              "and [TrendYYYYWW] <>''",
              "group by configuration",
              "",
              "UNION ",
              "/*To pull in IOSF confi per Punit's request On PSF, we are supposed to do 1p0 drop ",
              "and then always do 1p1 drop. As the 1p0 drop is mostly early enough and historically ",
              "seen it change from 1p0 to 1p1, so PSF team has stopped doing 1p0 standard drop (no IPDS) ",
              "and label it as early and then 1p1 they will do standard drop (with IPDS). So we pull in all droptype for this family. ",
              "On 9/3/2019,confirmed with Kristine. We will use standard drop for all rtlp0 and rtl1p1 drops*/",
              "",
              "select configuration",
              ",'NonPIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]",
              ", 0 as [IsBlankTrendDate] ",
              "from [V_IPG_CARBON_MILESTONE]a",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] in ('RTL1p0', 'RTL1p1') ",
              "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "and [TrendYYYYWW] <>''",
              "and  configuration like 'IOSF PSF%'",
              "group by configuration",
              "",
              "",
              "UNION ALL",
              "/*Non PIC config has blank trenddate*/",
              "select configuration",
              ",'NonPIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]",
              ", 1 as [IsBlankTrendDate] ",
              "from [V_IPG_CARBON_MILESTONE] ",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "and [DropType] in ('Standard')",
              "and ([TrendYYYYWW] is null or[TrendYYYYWW] = '')",
              "and configuration not in (select distinct configuration",
              "      from [V_IPG_CARBON_MILESTONE] ",
              "      WHERE 1=1 ",
              "      and[drop] = 'RTL1p0' ",
              "      and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "      and [DropType] in ('Standard')",
              "      and [trendYYYYWW] <>'')",
              "group by configuration",
              "",
              "UNION ALL",
              "/*PIC config has trenddate*/",
              "select configuration",
              ",'PIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]  /*per discussion with Kristine/Punit on 8/28/19, we will pull earliest date for RTL1p0 for PIC config as well */",
              ",0  as [IsBlankTrendDate]  ",
              "from [V_IPG_CARBON_MILESTONE]a",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('configurable')",
              "and [DropType] in ('Standard')",
              "and [TrendYYYYWW] <>''",
              "group by configuration",
              "",
              "UNION ALL",
              "/*PIC config has blanktrenddate*/",
              "select configuration",
              ",'PIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]  ",
              ",1 as [IsBlankTrendDate] ",
              "from [V_IPG_CARBON_MILESTONE]a",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('configurable')",
              "and [DropType] in ('Standard')",
              "and ([TrendYYYYWW] is null or[TrendYYYYWW] = '')",
              " and configuration not in (select distinct configuration",
              "\t\t\t   from [V_IPG_CARBON_MILESTONE] a",
              "\t\t\t   WHERE 1=1 ",
              "\t\t\t  and [DevOrg] = 'IPG' ",
              "\t\t\t   and[drop] = 'RTL1p0' ",
              "\t\t\t   and [reuse] in ('configurable')",
              "\t\t\t   and [DropType] in ('Standard')",
              "\t\t\t   and [trendYYYYWW] <>'')",
              "group by configuration"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryRTL1p0"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*----------------------------------------------------------------------------------------------------------------------------------------",
              "2021-02-25 <TinaD> - Create v_ipg_RTL1p0date based on cig_SocFiledBug_RTL_date_cached with only NonPIC config date",
              "------------------------------------------------------------------------------------------------------------------------------------------*/",
              "select configuration",
              ",'NonPIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]",
              ", 0 as [IsBlankTrendDate] ",
              "from [V_IPG_CARBON_MILESTONE] a",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "and [DropType] in ('Standard')",
              "and  configuration not like 'IOSF PSF%' ",
              "and [TrendYYYYWW] <>''",
              "group by configuration",
              "",
              "UNION ",
              "/*To pull in IOSF confi per Punit's request On PSF, we are supposed to do 1p0 drop ",
              "and then always do 1p1 drop. As the 1p0 drop is mostly early enough and historically ",
              "seen it change from 1p0 to 1p1, so PSF team has stopped doing 1p0 standard drop (no IPDS) ",
              "and label it as early and then 1p1 they will do standard drop (with IPDS). So we pull in all droptype for this family. ",
              "On 9/3/2019,confirmed with Kristine. We will use standard drop for all rtlp0 and rtl1p1 drops*/",
              "",
              "select configuration",
              ",'NonPIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]",
              ", 0 as [IsBlankTrendDate] ",
              "from [V_IPG_CARBON_MILESTONE]a",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] in ('RTL1p0', 'RTL1p1') ",
              "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "and [TrendYYYYWW] <>''",
              "and  configuration like 'IOSF PSF%'",
              "group by configuration",
              "",
              "",
              "UNION ALL",
              "/*Non PIC config has blank trenddate*/",
              "select configuration",
              ",'NonPIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]",
              ", 1 as [IsBlankTrendDate] ",
              "from [V_IPG_CARBON_MILESTONE] ",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "and [DropType] in ('Standard')",
              "and ([TrendYYYYWW] is null or[TrendYYYYWW] = '')",
              "and configuration not in (select distinct configuration",
              "      from [V_IPG_CARBON_MILESTONE] ",
              "      WHERE 1=1 ",
              "      and[drop] = 'RTL1p0' ",
              "      and [reuse] in ('Baseline Development' , 'Minor Derivative', 'Major Derivative', 'Medium Derivative', 'test chip')",
              "      and [DropType] in ('Standard')",
              "      and [trendYYYYWW] <>'')",
              "group by configuration",
              "",
              "UNION ALL",
              "/*PIC config has trenddate*/",
              "select configuration",
              ",'PIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]  /*per discussion with Kristine/Punit on 8/28/19, we will pull earliest date for RTL1p0 for PIC config as well */",
              ",0  as [IsBlankTrendDate]  ",
              "from [V_IPG_CARBON_MILESTONE]a",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('configurable')",
              "and [DropType] in ('Standard')",
              "and [TrendYYYYWW] <>''",
              "group by configuration",
              "",
              "UNION ALL",
              "/*PIC config has blanktrenddate*/",
              "select configuration",
              ",'PIC' as [Category]",
              ", min([TrendYYYYWW]) as [TrendYYYYWW]  ",
              ",1 as [IsBlankTrendDate] ",
              "from [V_IPG_CARBON_MILESTONE]a",
              "WHERE [DevOrg] = 'IPG' ",
              "and[drop] = 'RTL1p0' ",
              "and [reuse] in ('configurable')",
              "and [DropType] in ('Standard')",
              "and ([TrendYYYYWW] is null or[TrendYYYYWW] = '')",
              " and configuration not in (select distinct configuration",
              "\t\t\t   from [V_IPG_CARBON_MILESTONE] a",
              "\t\t\t   WHERE 1=1 ",
              "\t\t\t  and [DevOrg] = 'IPG' ",
              "\t\t\t   and[drop] = 'RTL1p0' ",
              "\t\t\t   and [reuse] in ('configurable')",
              "\t\t\t   and [DropType] in ('Standard')",
              "\t\t\t   and [trendYYYYWW] <>'')",
              "group by configuration</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryMonth",
        "columns": [
          {
            "name": "Intel Year",
            "dataType": "int64",
            "sourceColumn": "Intel Year",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Intel Month",
            "dataType": "string",
            "sourceColumn": "Intel Month",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IntelYear_Month",
            "dataType": "int64",
            "sourceColumn": "IntelYear_Month",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "YearMonthSeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(COUNTROWS(QueryMonth),QueryMonth[IntelYear_Month] <= EARLIER(QueryMonth[IntelYear_Month]),ALL(QueryMonth))"
          },
          {
            "name": "CurrentYear",
            "dataType": "int64",
            "sourceColumn": "CurrentYear"
          },
          {
            "name": "CurrentMonth",
            "dataType": "string",
            "sourceColumn": "CurrentMonth"
          },
          {
            "name": "CurrentYearMonth",
            "dataType": "int64",
            "sourceColumn": "CurrentYearMonth"
          },
          {
            "name": "Intel Month Name",
            "dataType": "string",
            "sourceColumn": "Intel Month Name"
          },
          {
            "name": "YearMonthDisplay",
            "dataType": "string",
            "sourceColumn": "YearMonthDisplay",
            "sortByColumn": "YearMonthSeqNbr"
          },
          {
            "type": "calculated",
            "name": "CurrentYearMonth_SeqNbr",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(QueryMonth[YearMonthSeqNbr],QueryMonth[IntelYear_Month],QueryMonth[CurrentYearMonth])"
          },
          {
            "type": "calculated",
            "name": "IsInLast4Months",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var monthDifference = QueryMonth[CurrentYearMonth_SeqNbr]-QueryMonth[YearMonthSeqNbr]",
              "return if(monthDifference < 4 && monthDifference >=0,1,0)"
            ]
          }
        ],
        "partitions": [
          {
            "name": "QueryMonth",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select ",
                "[Intel Year] ",
                ",datepart(yyyy,getutcdate()) as [CurrentYear]",
                "/*Here we make sure to pad 0s to the left of single months*/",
                ",RIGHT('0'+CAST([Intel Month] AS VARCHAR(2)),2) as [Intel Month]",
                ",RIGHT('00'+CAST(datepart(mm, getutcdate()) AS VARCHAR(2)),2) as [CurrentMonth]",
                "/*Similiar concept to above however this time we also add the year infront*/",
                ",CAST([Intel Year] AS VARCHAR(4)) + CAST(RIGHT('00'+CAST([Intel Month] AS VARCHAR(2)),2) AS VARCHAR(2)) as [IntelYear_Month]",
                ",[CurrentYear] + [CurrentMonth] as [CurrentYearMonth]",
                ", CASE",
                "WHEN [Intel Month] = 01 THEN 'Jan'",
                "WHEN [Intel Month] = 02 THEN 'Feb'",
                "WHEN [Intel Month] = 03 THEN 'Mar'",
                "WHEN [Intel Month] = 04 THEN 'Apr'",
                "WHEN [Intel Month] = 05 THEN 'May'",
                "WHEN [Intel Month] = 06 THEN 'Jun'",
                "WHEN [Intel Month] = 07 THEN 'Jul'",
                "WHEN [Intel Month] = 08 THEN 'Aug'",
                "WHEN [Intel Month] = 09 THEN 'Sept'",
                "WHEN [Intel Month] = 10 THEN 'Oct'",
                "WHEN [Intel Month] = 11 THEN 'Nov'",
                "WHEN [Intel Month] = 12 THEN 'Dec'",
                "END as [Intel Month Name]",
                ",[Intel Month Name]+'-'+RIGHT([Intel year],2) as [YearMonthDisplay]",
                "",
                "from v_time_day",
                "group by ",
                "[Intel Year] ",
                ", [Intel Month]",
                ",[IntelYear_Month]",
                "order by ",
                "[Intel Year] ",
                ", [Intel Month]",
                ",[IntelYear_Month]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "[Intel Year] ",
                  ",datepart(yyyy,getutcdate()) as [CurrentYear]",
                  "/*Here we make sure to pad 0s to the left of single months*/",
                  ",RIGHT('0'+CAST([Intel Month] AS VARCHAR(2)),2) as [Intel Month]",
                  ",RIGHT('00'+CAST(datepart(mm, getutcdate()) AS VARCHAR(2)),2) as [CurrentMonth]",
                  "/*Similiar concept to above however this time we also add the year infront*/",
                  ",CAST([Intel Year] AS VARCHAR(4)) + CAST(RIGHT('00'+CAST([Intel Month] AS VARCHAR(2)),2) AS VARCHAR(2)) as [IntelYear_Month]",
                  ",[CurrentYear] + [CurrentMonth] as [CurrentYearMonth]",
                  ", CASE",
                  "WHEN [Intel Month] = 01 THEN 'Jan'",
                  "WHEN [Intel Month] = 02 THEN 'Feb'",
                  "WHEN [Intel Month] = 03 THEN 'Mar'",
                  "WHEN [Intel Month] = 04 THEN 'Apr'",
                  "WHEN [Intel Month] = 05 THEN 'May'",
                  "WHEN [Intel Month] = 06 THEN 'Jun'",
                  "WHEN [Intel Month] = 07 THEN 'Jul'",
                  "WHEN [Intel Month] = 08 THEN 'Aug'",
                  "WHEN [Intel Month] = 09 THEN 'Sept'",
                  "WHEN [Intel Month] = 10 THEN 'Oct'",
                  "WHEN [Intel Month] = 11 THEN 'Nov'",
                  "WHEN [Intel Month] = 12 THEN 'Dec'",
                  "END as [Intel Month Name]",
                  ",[Intel Month Name]+'-'+RIGHT([Intel year],2) as [YearMonthDisplay]",
                  "",
                  "from v_time_day",
                  "group by ",
                  "[Intel Year] ",
                  ", [Intel Month]",
                  ",[IntelYear_Month]",
                  "order by ",
                  "[Intel Year] ",
                  ", [Intel Month]",
                  ",[IntelYear_Month]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "[Intel Year] ",
              ",datepart(yyyy,getutcdate()) as [CurrentYear]",
              "/*Here we make sure to pad 0s to the left of single months*/",
              ",RIGHT('0'+CAST([Intel Month] AS VARCHAR(2)),2) as [Intel Month]",
              ",RIGHT('00'+CAST(datepart(mm, getutcdate()) AS VARCHAR(2)),2) as [CurrentMonth]",
              "/*Similiar concept to above however this time we also add the year infront*/",
              ",CAST([Intel Year] AS VARCHAR(4)) + CAST(RIGHT('00'+CAST([Intel Month] AS VARCHAR(2)),2) AS VARCHAR(2)) as [IntelYear_Month]",
              ",[CurrentYear] + [CurrentMonth] as [CurrentYearMonth]",
              ", CASE",
              "WHEN [Intel Month] = 01 THEN 'Jan'",
              "WHEN [Intel Month] = 02 THEN 'Feb'",
              "WHEN [Intel Month] = 03 THEN 'Mar'",
              "WHEN [Intel Month] = 04 THEN 'Apr'",
              "WHEN [Intel Month] = 05 THEN 'May'",
              "WHEN [Intel Month] = 06 THEN 'Jun'",
              "WHEN [Intel Month] = 07 THEN 'Jul'",
              "WHEN [Intel Month] = 08 THEN 'Aug'",
              "WHEN [Intel Month] = 09 THEN 'Sept'",
              "WHEN [Intel Month] = 10 THEN 'Oct'",
              "WHEN [Intel Month] = 11 THEN 'Nov'",
              "WHEN [Intel Month] = 12 THEN 'Dec'",
              "END as [Intel Month Name]",
              ",[Intel Month Name]+'-'+RIGHT([Intel year],2) as [YearMonthDisplay]",
              "",
              "from v_time_day",
              "group by ",
              "[Intel Year] ",
              ", [Intel Month]",
              ",[IntelYear_Month]",
              "order by ",
              "[Intel Year] ",
              ", [Intel Month]",
              ",[IntelYear_Month]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryMonth"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "[Intel Year] ",
              ",datepart(yyyy,getutcdate()) as [CurrentYear]",
              "/*Here we make sure to pad 0s to the left of single months*/",
              ",RIGHT('0'+CAST([Intel Month] AS VARCHAR(2)),2) as [Intel Month]",
              ",RIGHT('00'+CAST(datepart(mm, getutcdate()) AS VARCHAR(2)),2) as [CurrentMonth]",
              "/*Similiar concept to above however this time we also add the year infront*/",
              ",CAST([Intel Year] AS VARCHAR(4)) + CAST(RIGHT('00'+CAST([Intel Month] AS VARCHAR(2)),2) AS VARCHAR(2)) as [IntelYear_Month]",
              ",[CurrentYear] + [CurrentMonth] as [CurrentYearMonth]",
              ", CASE",
              "WHEN [Intel Month] = 01 THEN 'Jan'",
              "WHEN [Intel Month] = 02 THEN 'Feb'",
              "WHEN [Intel Month] = 03 THEN 'Mar'",
              "WHEN [Intel Month] = 04 THEN 'Apr'",
              "WHEN [Intel Month] = 05 THEN 'May'",
              "WHEN [Intel Month] = 06 THEN 'Jun'",
              "WHEN [Intel Month] = 07 THEN 'Jul'",
              "WHEN [Intel Month] = 08 THEN 'Aug'",
              "WHEN [Intel Month] = 09 THEN 'Sept'",
              "WHEN [Intel Month] = 10 THEN 'Oct'",
              "WHEN [Intel Month] = 11 THEN 'Nov'",
              "WHEN [Intel Month] = 12 THEN 'Dec'",
              "END as [Intel Month Name]",
              ",[Intel Month Name]+'-'+RIGHT([Intel year],2) as [YearMonthDisplay]",
              "",
              "from v_time_day",
              "group by ",
              "[Intel Year] ",
              ", [Intel Month]",
              ",[IntelYear_Month]",
              "order by ",
              "[Intel Year] ",
              ", [Intel Month]",
              ",[IntelYear_Month]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "DynamicAxis",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "AxisAttribute",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisAttribute]",
            "sortByColumn": "SlicerOrder"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AxisValue",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisValue]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AxisId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SlicerOrder",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[SlicerOrder]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "UNION(",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"IPSupplier\"",
                "\t\t,\"AxisValue\",QueryBug[IPSupplier]",
                "\t\t,\"SlicerOrder\", 3",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"IPFamily\"",
                "\t\t,\"AxisValue\",QueryBug[IPFamily]",
                "\t\t,\"SlicerOrder\", 2",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"SoC Die\"",
                "\t\t,\"AxisValue\",QueryBug[Soc Die]",
                "\t\t,\"SlicerOrder\", 5",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"Process\"",
                "\t\t,\"AxisValue\",QueryBug[Process]",
                "\t\t,\"SlicerOrder\", 4",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"Configuration\"",
                "\t\t,\"AxisValue\",QueryBug[Configuration]",
                "\t\t,\"SlicerOrder\", 1",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"subbugcategory\"",
                "\t\t,\"AxisValue\",QueryBug[subbugcategory]",
                "\t\t,\"SlicerOrder\", 6",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"bug_category\"",
                "\t\t,\"AxisValue\",QueryBug[bug_category]",
                "\t\t,\"SlicerOrder\", 7",
                "\t)",
                "",
                ")"
              ]
            }
          }
        ]
      },
      {
        "name": "DynamicLegend",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "LegendAttribute",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LegendAttribute]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "LegendValue",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LegendValue]"
          },
          {
            "type": "calculated",
            "name": "Ordering",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH([LegendValue],",
              "\"open\", 1,",
              "\"approved\", 2,",
              "\"in_progress\", 3,",
              "\"change_defined\", 4,",
              "\"repo_modified\", 5,",
              "\"rejected\", 6,",
              "\"complete\", 7,",
              "\"future\", 8,",
              "\"Functional\", 1,",
              "\"Physical\", 2,",
              "\"DOC\", 3,",
              "\"Arch\", 4,",
              "\"Collateral\", 5,",
              "\"VAL\", 6,",
              "\"Other\", 7,",
              "\"tbd\", 8,",
              "\"1-showstopper\", 1,",
              "\"2-high\", 2,",
              "\"3-medium\", 3,",
              "\"4-low\", 4,",
              "\"code_gen\", 1,",
              "\"simulatiion\", 2, ",
              "\"simulation\", 3, ",
              "\"logic_verif\", 4, ",
              "\"phys_verif\", 5,  ",
              "\"synthesis\", 6, ",
              "\"formal\", 7,",
              "\"fpga\", 8, ",
              "\"emulation\", 9, ",
              "\"virtual_platf\", 10,",
              "\"review\", 11, ",
              "\"integration\", 12, ",
              "\"silicon\", 13,",
              "20 ",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "LegendValueWithOrder",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "[LegendValue]",
            "sortByColumn": "Ordering"
          },
          {
            "type": "calculatedTableColumn",
            "name": "LegendId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LegendId]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "UNION(",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"LegendId\",QueryBug[id]",
                "\t\t,\"LegendAttribute\",\"Status\"",
                "\t\t,\"LegendValue\",QueryBug[status]",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"LegendId\",QueryBug[id]",
                "\t\t,\"LegendAttribute\",\"subbugcategory\"",
                "\t\t,\"LegendValue\",QueryBug[subbugcategory]",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"LegendId\",QueryBug[id]",
                "\t\t,\"LegendAttribute\",\"Priority\"",
                "\t\t,\"LegendValue\",QueryBug[priority]",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"LegendId\",QueryBug[id]",
                "\t\t,\"LegendAttribute\",\"env_found\"",
                "\t\t,\"LegendValue\",QueryBug[env_found]",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"LegendId\",QueryBug[id]",
                "\t\t,\"LegendAttribute\",\"team_found\"",
                "\t\t,\"LegendValue\",QueryBug[team_found]",
                "\t),",
                "    SELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"LegendId\",QueryBug[id]",
                "\t\t,\"LegendAttribute\",\"sla_response_met\"",
                "\t\t,\"LegendValue\",QueryBug[sla_response_met]",
                "\t),",
                "    SELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"LegendId\",QueryBug[id]",
                "\t\t,\"LegendAttribute\",\"sla_resolution_met\"",
                "\t\t,\"LegendValue\",QueryBug[sla_resolution_met]",
                "\t)",
                ")"
              ]
            }
          }
        ]
      },
      {
        "name": "QueryProjectAffectDynamicAxis",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "AxisId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AxisAttribute",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisAttribute]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AxisValue",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisValue]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": " UNION( SELECTCOLUMNS( QueryBreakProjectAffectedOrig,\"AxisId\",QueryBreakProjectAffectedOrig[ID] ,\"AxisAttribute\",\"IPFamily\" ,\"AxisValue\",QueryBreakProjectAffectedOrig[IPFamily]) , SELECTCOLUMNS( QueryBreakProjectAffectedOrig,\"AxisId\",QueryBreakProjectAffectedOrig[ID] ,\"AxisAttribute\",\"Project Affected\" ,\"AxisValue\", QueryBreakProjectAffectedOrig[ProjectAffected]) , SELECTCOLUMNS( QueryBreakProjectAffectedOrig,\"AxisId\",QueryBreakProjectAffectedOrig[ID] ,\"AxisAttribute\",\"Bug_Category\" ,\"AxisValue\",QueryBreakProjectAffectedOrig[bug_category]) , SELECTCOLUMNS( QueryBreakProjectAffectedOrig,\"AxisId\",QueryBreakProjectAffectedOrig[ID] ,\"AxisAttribute\",\"IPSupplier\" ,\"AxisValue\",QueryBreakProjectAffectedOrig[IPSupplier]) , SELECTCOLUMNS( QueryBreakProjectAffectedOrig,\"AxisId\",QueryBreakProjectAffectedOrig[ID] ,\"AxisAttribute\",\"Subbugcategory\" ,\"AxisValue\", QueryBreakProjectAffectedOrig[sub_bugcategory]) )"
            }
          }
        ],
        "measures": [
          {
            "name": "totalbugaxiscount",
            "expression": " DISTINCTCOUNT([AxisId])"
          }
        ]
      },
      {
        "name": "QueryProjectAffectedDynamicLegend",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "LegendId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LegendId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "LegendAttribute",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LegendAttribute]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "LegendValue",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LegendValue]"
          },
          {
            "type": "calculated",
            "name": "Ordering",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH([LegendValue],",
              "\"open\", 1,",
              "\"approved\", 2,",
              "\"change_defined\", 3,",
              "\"repo_modified\", 4,",
              "\"rejected\", 5,",
              "\"complete\", 6,",
              "\"future\", 7,",
              "",
              "\"open\", 1,",
              "\"accepted\", 2,",
              "\"completed\", 3,",
              "\"defined\", 4,",
              "\"not_applicable\", 5,",
              "\"none\", 6,",
              "",
              "\"Functional\", 1,",
              "\"Physical\", 2,",
              "\"DOC\", 3,",
              "\"Arch\", 4,",
              "\"Collateral\", 5,",
              "\"VAL\", 6,",
              "\"Other\", 7,",
              "\"tbd\", 8,",
              "",
              "20 ",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "LegendOrdered",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "QueryProjectAffectedDynamicLegend[LegendValue]",
            "sortByColumn": "Ordering"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "UNION(",
                "\tSELECTCOLUMNS(",
                "QueryBreakProjectAffectedOrig",
                "\t\t,\"LegendId\",QueryBreakProjectAffectedOrig[id]",
                "\t\t,\"LegendAttribute\",\"Status\"",
                "\t\t,\"LegendValue\",QueryBreakProjectAffectedOrig[status]",
                "\t),",
                "SELECTCOLUMNS(",
                "QueryBreakProjectAffectedOrig",
                "\t\t,\"LegendId\", QueryBreakProjectAffectedOrig[id]",
                "\t\t,\"LegendAttribute\",\"Sub_bugcategory\"",
                "\t\t,\"LegendValue\",QueryBreakProjectAffectedOrig[Sub_bugcategory]",
                "\t),",
                "SELECTCOLUMNS(",
                "QueryBreakProjectAffectedOrig",
                "\t\t,\"LegendId\",QueryBreakProjectAffectedOrig[id]",
                "\t\t,\"LegendAttribute\",\"retro_status\"",
                "\t\t,\"LegendValue\",QueryBreakProjectAffectedOrig[retro_status]",
                "\t),",
                "SELECTCOLUMNS(",
                "QueryBreakProjectAffectedOrig",
                "\t\t,\"LegendId\",QueryBreakProjectAffectedOrig[id]",
                "\t\t,\"LegendAttribute\",\"env_found\"",
                "\t\t,\"LegendValue\",QueryBreakProjectAffectedOrig[bugeco.env_found]",
                "\t),",
                "SELECTCOLUMNS(",
                "QueryBreakProjectAffectedOrig",
                "\t\t,\"LegendId\",QueryBreakProjectAffectedOrig[id]",
                "\t\t,\"LegendAttribute\",\"Priority\"",
                "\t\t,\"LegendValue\",QueryBreakProjectAffectedOrig[priority]",
                "\t),",
                "SELECTCOLUMNS(",
                "QueryBreakProjectAffectedOrig",
                "\t\t,\"LegendId\",QueryBreakProjectAffectedOrig[id]",
                "\t\t,\"LegendAttribute\",\"team_found\"",
                "\t\t,\"LegendValue\",QueryBreakProjectAffectedOrig[bugeco.team_found]",
                "\t)",
                ")"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "totalbuglegend",
            "expression": " DISTINCTCOUNT([LegendId])"
          }
        ]
      },
      {
        "name": "DynamicCalendar",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Category",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Category]",
            "sortByColumn": "CategoryOrder"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CategoryOrder",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CategoryOrder]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "WW",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[WW]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Month]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Quarter",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Quarter]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Year",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Year]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "id",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[id]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "var currentww = MAX(QueryBug[currentww])",
                "var prevww = MAX(QueryBug[previousww])",
                "var current_ww_minus_52 = currentww - 52",
                "var _52_ww_ago = if(VALUE(RIGHT(current_ww_minus_52,2))> 52,current_ww_minus_52 - 48,current_ww_minus_52)",
                "",
                "var current_ww_minus_13 = currentww - 13",
                "var _13_ww_ago = if(VALUE(RIGHT(current_ww_minus_13,2)) > 52,current_ww_minus_13 - 48,current_ww_minus_13)",
                "",
                "var current_ww_minus_4 = currentww - 4",
                "var _4_ww_ago = if(VALUE(RIGHT(current_ww_minus_4,2)) > 52,current_ww_minus_4 - 48,current_ww_minus_4)",
                "",
                "",
                "RETURN ",
                "UNION(",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"id\",[id]",
                "\t\t,\"Category\",\"All\"",
                "\t\t,\"CategoryOrder\",5",
                "\t\t,\"WW\",QueryBug[ww_submitted_nbr]",
                "\t\t,\"Month\",QueryBug[Month]",
                "\t\t,\"Quarter\",RIGHT(QueryBug[SubmittedYear_Quarter],2)",
                "\t\t,\"Year\",QueryBug[SubmittedYear] ",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tFILTER(QueryBug,QueryBug[ww_submitted_nbr] > _52_ww_ago)",
                "\t\t,\"id\",[id]",
                "\t\t,\"Category\",\"Last 52ww\"",
                "\t\t,\"CategoryOrder\",4",
                "\t\t,\"WW\",QueryBug[ww_submitted_nbr]",
                "\t\t,\"Month\",QueryBug[Month]",
                "\t\t,\"Quarter\",RIGHT(QueryBug[SubmittedYear_Quarter],2)",
                "\t\t,\"Year\",QueryBug[SubmittedYear] ",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tFILTER(QueryBug,QueryBug[ww_submitted_nbr] > _13_ww_ago)",
                "\t\t,\"id\",[id]",
                "\t\t,\"Category\",\"Last 13ww\"",
                "\t\t,\"CategoryOrder\",3",
                "\t\t,\"WW\",QueryBug[ww_submitted_nbr]",
                "\t\t,\"Month\",QueryBug[Month]",
                "\t\t,\"Quarter\",RIGHT(QueryBug[SubmittedYear_Quarter],2)",
                "\t\t,\"Year\",QueryBug[SubmittedYear] ",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tFILTER(QueryBug,QueryBug[ww_submitted_nbr] > _4_ww_ago)",
                "\t\t,\"id\",[id]",
                "\t\t,\"Category\",\"Last 4ww\"",
                "\t\t,\"CategoryOrder\",2",
                "\t\t,\"WW\",QueryBug[ww_submitted_nbr]",
                "\t\t,\"Month\",QueryBug[Month]",
                "\t\t,\"Quarter\",RIGHT(QueryBug[SubmittedYear_Quarter],2)",
                "\t\t,\"Year\",QueryBug[SubmittedYear] ",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tFILTER(QueryBug,QueryBug[ww_submitted_nbr] = prevww)",
                "\t\t,\"id\",[id]",
                "\t\t,\"Category\",\"Last ww\"",
                "\t\t,\"CategoryOrder\",1",
                "\t\t,\"WW\",QueryBug[ww_submitted_nbr]",
                "\t\t,\"Month\",QueryBug[Month]",
                "\t\t,\"Quarter\",RIGHT(QueryBug[SubmittedYear_Quarter],2)",
                "\t\t,\"Year\",QueryBug[SubmittedYear] ",
                "\t)",
                ") ",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "DynamicProjectAffectedCalendar",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Category",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Category]",
            "sortByColumn": "CategoryOrder"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CategoryOrder",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CategoryOrder]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "WW",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[WW]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month Name",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Month Name]",
            "sortByColumn": "Month Nbr"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month Nbr",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Month Nbr]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Quarter",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Quarter]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Year",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Year]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "VAR currentww = MAX(QueryProjectAffected[currentww])",
                "",
                "/* snapshot 52 ww until now */",
                "VAR _minus_52 = currentww - 52",
                "VAR _52_WW = IF(",
                "    value(RIGHT(_minus_52,2)) > 52,",
                "    _minus_52 - 48, _minus_52)    /* minus 42 because from 100 */",
                "",
                "/* snapshot of 13 ww until now*/",
                "VAR _minus_13 = currentww - 13",
                "VAR _13_WW = IF(",
                "    VALUE(RIGHT(_minus_13, 2)) > 13,",
                "    _minus_13 - 48, _minus_13)",
                "",
                "/*snapshot of 4 ww until now*/",
                "VAR _minus_4 = currentww -4",
                "VAR _4_WW = IF(",
                "    VALUE(RIGHT(_minus_4,2 )) > 4,",
                "    _minus_4 -48, _minus_4)",
                "",
                "/*snapshot of 1 ww until now*/",
                "VAR _minus_1 = currentww - 1",
                "VAR _1_WW = IF(",
                "    VALUE(RIGHT(_minus_1,2)) > 4,",
                "    _minus_1 - 48, _minus_1)",
                "",
                "/*Calculated fact table */",
                "RETURN ",
                "        UNION(",
                "        SELECTCOLUMNS(QueryProjectAffected,",
                "        \"Category\", \"All\",",
                "        \"CategoryOrder\", 5,",
                "        \"WW\", QueryProjectAffected[ww_submitted_nbr],",
                "        \"Month Name\", QueryProjectAffected[Intel_Month_Name],",
                "         \"Month Nbr\", QueryProjectAffected[Intel_Month_NBR],",
                "        \"Quarter\", RIGHT(QueryProjectAffected[Submitted_YearQuarter],2),",
                "         \"Year\", QueryProjectAffected[SubmittedYear])",
                ",",
                "         SELECTCOLUMNS(",
                "            FILTER(QueryProjectAffected, QueryProjectAffected[ww_submitted_nbr] > _52_WW),",
                "        \"Category\", \"Last 52 WWs\",",
                "        \"CategoryOrder\", 4,",
                "       \"WW\", QueryProjectAffected[ww_submitted_nbr],",
                "        \"Month Name\", QueryProjectAffected[Intel_Month_Name],",
                "         \"Month Nbr\", QueryProjectAffected[Intel_Month_NBR],",
                "        \"Quarter\", RIGHT(QueryProjectAffected[Submitted_YearQuarter],2),",
                "         \"Year\", QueryProjectAffected[SubmittedYear])",
                ",",
                "             SELECTCOLUMNS(",
                "        FILTER(QueryProjectAffected, QueryProjectAffected[ww_submitted_nbr] > _13_WW),",
                "        \"Category\", \"Last 13 WWs\",",
                "        \"CategoryOrder\", 3,",
                "         \"WW\", QueryProjectAffected[ww_submitted_nbr],",
                "        \"Month Name\", QueryProjectAffected[Intel_Month_Name],",
                "         \"Month Nbr\", QueryProjectAffected[Intel_Month_NBR],",
                "        \"Quarter\", RIGHT(QueryProjectAffected[Submitted_YearQuarter],2),",
                "         \"Year\", QueryProjectAffected[SubmittedYear])",
                ",",
                "                ",
                "             SELECTCOLUMNS(",
                "        FILTER(QueryProjectAffected, QueryProjectAffected[ww_submitted_nbr] > _4_WW),",
                "        \"Category\", \"Last 4 WWs\",",
                "        \"CategoryOrder\", 2,",
                "         \"WW\", QueryProjectAffected[ww_submitted_nbr],",
                "        \"Month Name\", QueryProjectAffected[Intel_Month_Name],",
                "         \"Month Nbr\", QueryProjectAffected[Intel_Month_NBR],",
                "        \"Quarter\", RIGHT(QueryProjectAffected[Submitted_YearQuarter],2),",
                "         \"Year\", QueryProjectAffected[SubmittedYear])",
                ",",
                "            ",
                "             SELECTCOLUMNS(",
                "        FILTER(QueryProjectAffected, QueryProjectAffected[ww_submitted_nbr] > _1_WW),",
                "        \"Category\", \"Last WW\",",
                "        \"CategoryOrder\", 1,",
                "         \"WW\", QueryProjectAffected[ww_submitted_nbr],",
                "        \"Month Name\", QueryProjectAffected[Intel_Month_Name],",
                "         \"Month Nbr\", QueryProjectAffected[Intel_Month_NBR],",
                "        \"Quarter\", RIGHT(QueryProjectAffected[Submitted_YearQuarter],2),",
                "         \"Year\", QueryProjectAffected[SubmittedYear]",
                "))"
              ]
            }
          }
        ]
      },
      {
        "name": "DynamicProjectAffectedCalendarBridge",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "ww_submitted_nbr",
            "dataType": "int64",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "sourceColumn": "DynamicProjectAffectedCalendar[WW]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "SUMMARIZECOLUMNS(DynamicProjectAffectedCalendar[WW])"
            }
          }
        ]
      },
      {
        "name": "QueryTapein",
        "columns": [
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Tapein",
            "dataType": "string",
            "sourceColumn": "Tapein"
          }
        ],
        "partitions": [
          {
            "name": "QueryTapein",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "project",
                ",isnull([Actual Finish YYYYWW],[Trend YYYYWW]) as [Tapein]",
                "",
                "from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
                "where 1=1",
                "and milestone like '%tape in%' ",
                "and trend is not null and trend <> ''",
                "and (",
                "\t[Planning State] not like '%Cancelled%' ",
                "\tand [Planning State] not like '%Completed%' ",
                "\tand [Planning State] not like '%Delete%' ",
                "\tand [Planning State] not like '%Abandoned%'",
                ")",
                "and [Stepping Name] = 'A0'",
                "",
                "UNION ALL",
                "",
                "select ",
                "a.project",
                ", min(a.Tapein)",
                "from",
                "(",
                "\tselect ",
                "\tproject",
                "\t,isnull([Actual Finish YYYYWW],[Trend YYYYWW]) as [Tapein]",
                "",
                "\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
                "\twhere 1=1",
                "\tand milestone like '%tape in%' ",
                "\tand trend is not null and trend <> ''",
                "\tand (",
                "\t\t[Planning State] not like '%Cancelled%' ",
                "\t\tand [Planning State] not like '%Completed%' ",
                "\t\tand [Planning State] not like '%Delete%' ",
                "\t\tand [Planning State] not like '%Abandoned%'",
                "\t)",
                "\tand [Stepping Name] <> 'A0'",
                "\tand project not in ",
                "\t(",
                "\t\tselect ",
                "\t\tproject",
                "\t\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
                "\t\twhere 1=1",
                "\t\tand milestone like '%tape in%' ",
                "\t\tand trend is not null and trend <> ''",
                "\t\tand (",
                "\t\t\t[Planning State] not like '%Cancelled%' ",
                "\t\t\tand [Planning State] not like '%Completed%' ",
                "\t\t\tand [Planning State] not like '%Delete%' ",
                "\t\t\tand [Planning State] not like '%Abandoned%'",
                "\t\t)",
                "\t\tand [Stepping Name] = 'A0'",
                "\t)",
                ") a",
                "group by a.project"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "project",
                  ",isnull([Actual Finish YYYYWW],[Trend YYYYWW]) as [Tapein]",
                  "",
                  "from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
                  "where 1=1",
                  "and milestone like '%tape in%' ",
                  "and trend is not null and trend <> ''",
                  "and (",
                  "\t[Planning State] not like '%Cancelled%' ",
                  "\tand [Planning State] not like '%Completed%' ",
                  "\tand [Planning State] not like '%Delete%' ",
                  "\tand [Planning State] not like '%Abandoned%'",
                  ")",
                  "and [Stepping Name] = 'A0'",
                  "",
                  "UNION ALL",
                  "",
                  "select ",
                  "a.project",
                  ", min(a.Tapein)",
                  "from",
                  "(",
                  "\tselect ",
                  "\tproject",
                  "\t,isnull([Actual Finish YYYYWW],[Trend YYYYWW]) as [Tapein]",
                  "",
                  "\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
                  "\twhere 1=1",
                  "\tand milestone like '%tape in%' ",
                  "\tand trend is not null and trend <> ''",
                  "\tand (",
                  "\t\t[Planning State] not like '%Cancelled%' ",
                  "\t\tand [Planning State] not like '%Completed%' ",
                  "\t\tand [Planning State] not like '%Delete%' ",
                  "\t\tand [Planning State] not like '%Abandoned%'",
                  "\t)",
                  "\tand [Stepping Name] <> 'A0'",
                  "\tand project not in ",
                  "\t(",
                  "\t\tselect ",
                  "\t\tproject",
                  "\t\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
                  "\t\twhere 1=1",
                  "\t\tand milestone like '%tape in%' ",
                  "\t\tand trend is not null and trend <> ''",
                  "\t\tand (",
                  "\t\t\t[Planning State] not like '%Cancelled%' ",
                  "\t\t\tand [Planning State] not like '%Completed%' ",
                  "\t\t\tand [Planning State] not like '%Delete%' ",
                  "\t\t\tand [Planning State] not like '%Abandoned%'",
                  "\t\t)",
                  "\t\tand [Stepping Name] = 'A0'",
                  "\t)",
                  ") a",
                  "group by a.project</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "project",
              ",isnull([Actual Finish YYYYWW],[Trend YYYYWW]) as [Tapein]",
              "",
              "from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
              "where 1=1",
              "and milestone like '%tape in%' ",
              "and trend is not null and trend <> ''",
              "and (",
              "\t[Planning State] not like '%Cancelled%' ",
              "\tand [Planning State] not like '%Completed%' ",
              "\tand [Planning State] not like '%Delete%' ",
              "\tand [Planning State] not like '%Abandoned%'",
              ")",
              "and [Stepping Name] = 'A0'",
              "",
              "UNION ALL",
              "",
              "select ",
              "a.project",
              ", min(a.Tapein)",
              "from",
              "(",
              "\tselect ",
              "\tproject",
              "\t,isnull([Actual Finish YYYYWW],[Trend YYYYWW]) as [Tapein]",
              "",
              "\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
              "\twhere 1=1",
              "\tand milestone like '%tape in%' ",
              "\tand trend is not null and trend <> ''",
              "\tand (",
              "\t\t[Planning State] not like '%Cancelled%' ",
              "\t\tand [Planning State] not like '%Completed%' ",
              "\t\tand [Planning State] not like '%Delete%' ",
              "\t\tand [Planning State] not like '%Abandoned%'",
              "\t)",
              "\tand [Stepping Name] <> 'A0'",
              "\tand project not in ",
              "\t(",
              "\t\tselect ",
              "\t\tproject",
              "\t\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
              "\t\twhere 1=1",
              "\t\tand milestone like '%tape in%' ",
              "\t\tand trend is not null and trend <> ''",
              "\t\tand (",
              "\t\t\t[Planning State] not like '%Cancelled%' ",
              "\t\t\tand [Planning State] not like '%Completed%' ",
              "\t\t\tand [Planning State] not like '%Delete%' ",
              "\t\t\tand [Planning State] not like '%Abandoned%'",
              "\t\t)",
              "\t\tand [Stepping Name] = 'A0'",
              "\t)",
              ") a",
              "group by a.project"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryTapein"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "project",
              ",isnull([Actual Finish YYYYWW],[Trend YYYYWW]) as [Tapein]",
              "",
              "from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
              "where 1=1",
              "and milestone like '%tape in%' ",
              "and trend is not null and trend <> ''",
              "and (",
              "\t[Planning State] not like '%Cancelled%' ",
              "\tand [Planning State] not like '%Completed%' ",
              "\tand [Planning State] not like '%Delete%' ",
              "\tand [Planning State] not like '%Abandoned%'",
              ")",
              "and [Stepping Name] = 'A0'",
              "",
              "UNION ALL",
              "",
              "select ",
              "a.project",
              ", min(a.Tapein)",
              "from",
              "(",
              "\tselect ",
              "\tproject",
              "\t,isnull([Actual Finish YYYYWW],[Trend YYYYWW]) as [Tapein]",
              "",
              "\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
              "\twhere 1=1",
              "\tand milestone like '%tape in%' ",
              "\tand trend is not null and trend <> ''",
              "\tand (",
              "\t\t[Planning State] not like '%Cancelled%' ",
              "\t\tand [Planning State] not like '%Completed%' ",
              "\t\tand [Planning State] not like '%Delete%' ",
              "\t\tand [Planning State] not like '%Abandoned%'",
              "\t)",
              "\tand [Stepping Name] <> 'A0'",
              "\tand project not in ",
              "\t(",
              "\t\tselect ",
              "\t\tproject",
              "\t\tfrom [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES] ",
              "\t\twhere 1=1",
              "\t\tand milestone like '%tape in%' ",
              "\t\tand trend is not null and trend <> ''",
              "\t\tand (",
              "\t\t\t[Planning State] not like '%Cancelled%' ",
              "\t\t\tand [Planning State] not like '%Completed%' ",
              "\t\t\tand [Planning State] not like '%Delete%' ",
              "\t\t\tand [Planning State] not like '%Abandoned%'",
              "\t\t)",
              "\t\tand [Stepping Name] = 'A0'",
              "\t)",
              ") a",
              "group by a.project</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryBOM",
        "columns": [
          {
            "name": "IPFamily",
            "dataType": "string",
            "sourceColumn": "IPFamily",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SoC Die",
            "dataType": "string",
            "sourceColumn": "SoC Die"
          },
          {
            "name": "Program",
            "dataType": "string",
            "sourceColumn": "Program"
          }
        ],
        "partitions": [
          {
            "name": "QueryBOM",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select",
                "distinct [DieName] as [SoC Die] --die name renamed to SoC Die",
                ",[IPFamily]",
                ",[Configuration]",
                ",soc.[dyn_lookup.value] as [Program] --SoC Customer renamed to Program",
                "from [ipg_soc_related_ips_and_milestones] as BOM",
                "left join [ES.ip_leadership.dyn_lookup] as soc on soc.[ip_leadership.dyn_lookup.product] = BOM.[DieName]",
                "where 1=1",
                "and BOM.[Configuration] is not null and BOM.[Configuration] <> ''",
                "and [Program] is not null and [Program] <> ''"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select",
                  "distinct [DieName] as [SoC Die] --die name renamed to SoC Die",
                  ",[IPFamily]",
                  ",[Configuration]",
                  ",soc.[dyn_lookup.value] as [Program] --SoC Customer renamed to Program",
                  "from [ipg_soc_related_ips_and_milestones] as BOM",
                  "left join [ES.ip_leadership.dyn_lookup] as soc on soc.[ip_leadership.dyn_lookup.product] = BOM.[DieName]",
                  "where 1=1",
                  "and BOM.[Configuration] is not null and BOM.[Configuration] <> ''",
                  "and [Program] is not null and [Program] <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select",
              "distinct [DieName] as [SoC Die] --die name renamed to SoC Die",
              ",[IPFamily]",
              ",[Configuration]",
              ",soc.[dyn_lookup.value] as [Program] --SoC Customer renamed to Program",
              "from [ipg_soc_related_ips_and_milestones] as BOM",
              "left join [ES.ip_leadership.dyn_lookup] as soc on soc.[ip_leadership.dyn_lookup.product] = BOM.[DieName]",
              "where 1=1",
              "and BOM.[Configuration] is not null and BOM.[Configuration] <> ''",
              "and [Program] is not null and [Program] <> ''"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryBOM"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select",
              "distinct [DieName] as [SoC Die] --die name renamed to SoC Die",
              ",[IPFamily]",
              ",[Configuration]",
              ",soc.[dyn_lookup.value] as [Program] --SoC Customer renamed to Program",
              "from [ipg_soc_related_ips_and_milestones] as BOM",
              "left join [ES.ip_leadership.dyn_lookup] as soc on soc.[ip_leadership.dyn_lookup.product] = BOM.[DieName]",
              "where 1=1",
              "and BOM.[Configuration] is not null and BOM.[Configuration] <> ''",
              "and [Program] is not null and [Program] <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "BridgeTableForConfiguration",
        "columns": [
          {
            "name": "Configuration",
            "dataType": "string",
            "sourceColumn": "Configuration",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "BridgeTableForConfiguration",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select ",
                "distinct [Configuration]",
                "from [ipg_soc_related_ips_and_milestones] as a",
                "where 1=1",
                "and [Configuration] is not null and [Configuration] <> ''"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
                  "distinct [Configuration]",
                  "from [ipg_soc_related_ips_and_milestones] as a",
                  "where 1=1",
                  "and [Configuration] is not null and [Configuration] <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select ",
              "distinct [Configuration]",
              "from [ipg_soc_related_ips_and_milestones] as a",
              "where 1=1",
              "and [Configuration] is not null and [Configuration] <> ''"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "BridgeTableForConfiguration"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select ",
              "distinct [Configuration]",
              "from [ipg_soc_related_ips_and_milestones] as a",
              "where 1=1",
              "and [Configuration] is not null and [Configuration] <> ''</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "WWBridgeTable",
        "columns": [
          {
            "name": "ww",
            "dataType": "int64",
            "sourceColumn": "ww",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "Query",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct [Intel Year-Work Week] as ww from v_ipg_calendar",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] as ww from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct [Intel Year-Work Week] as ww from v_ipg_calendar"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Query"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [Intel Year-Work Week] as ww from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryDynamicCalendar",
        "columns": [
          {
            "name": "category",
            "dataType": "string",
            "sourceColumn": "category",
            "sortByColumn": "category_order"
          },
          {
            "name": "category_order",
            "dataType": "int64",
            "sourceColumn": "category_order"
          },
          {
            "name": "Intel Year",
            "dataType": "int64",
            "sourceColumn": "Intel Year"
          },
          {
            "name": "Intel Quarter",
            "dataType": "string",
            "sourceColumn": "Intel Quarter"
          },
          {
            "name": "ww",
            "dataType": "int64",
            "sourceColumn": "ww"
          },
          {
            "type": "calculated",
            "name": "category_ww",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "QueryDynamicCalendar[category]&\"_\"&QueryDynamicCalendar[ww]"
          }
        ],
        "partitions": [
          {
            "name": "newDynamicCalendar",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "newDynamicCalendar"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "IntelYearWW",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryIntelWW[Intel Year-Work Week]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "WWSeqNbr",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryIntelWW[WWSeqNbr]"
          },
          {
            "type": "calculated",
            "name": "year",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LEFT([Intel Year-Work Week],4)"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "CALCULATETABLE(QueryIntelWW, FILTER(QueryIntelWW, QueryIntelWW[Intel Year-Work Week] <= MAX(QueryBug[currentww])))"
            }
          }
        ]
      },
      {
        "name": "DynamicForPieChart",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "AxisId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AxisAttribute",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisAttribute]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AxisValue",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AxisValue]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SlicerOrder",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[SlicerOrder]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "UNION(",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"Sub_bugcategory\"",
                "\t\t,\"AxisValue\",QueryBug[subbugcategory]",
                "\t\t,\"SlicerOrder\", 3",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"Project\"",
                "\t\t,\"AxisValue\",QueryBug[project]",
                "\t\t,\"SlicerOrder\", 2",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"Process\"",
                "\t\t,\"AxisValue\",QueryBug[Process]",
                "\t\t,\"SlicerOrder\", 4",
                "\t),",
                "\tSELECTCOLUMNS(",
                "\t\tQueryBug",
                "\t\t,\"AxisId\",QueryBug[id]",
                "\t\t,\"AxisAttribute\",\"Status\"",
                "\t\t,\"AxisValue\",QueryBug[status]",
                "\t\t,\"SlicerOrder\", 1",
                "",
                "))"
              ]
            }
          }
        ]
      },
      {
        "name": "QueryIPGCalendar",
        "columns": [
          {
            "name": "category",
            "dataType": "string",
            "sourceColumn": "category",
            "sortByColumn": "category_order",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "category_order",
            "dataType": "int64",
            "sourceColumn": "category_order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Date",
            "dataType": "string",
            "sourceColumn": "Date",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Intel Month",
            "dataType": "int64",
            "sourceColumn": "Intel Month",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Intel Quarter",
            "dataType": "string",
            "sourceColumn": "Intel Quarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Intel Month Desc",
            "dataType": "string",
            "sourceColumn": "Intel Month Desc",
            "sortByColumn": "Intel Month",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Intel Year-Month Desc",
            "dataType": "string",
            "sourceColumn": "Intel Year-Month Desc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Intel Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Work Week",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Intel Work Week Name",
            "dataType": "string",
            "sourceColumn": "Intel Work Week Name",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Intel Work Week Start Date",
            "dataType": "dateTime",
            "sourceColumn": "Intel Work Week Start Date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "Intel Year",
            "dataType": "int64",
            "sourceColumn": "Intel Year",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Intel Year-Month",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Month",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Intel Year-Quarter",
            "dataType": "string",
            "sourceColumn": "Intel Year-Quarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Work Week",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "QueryIntelCalendarWithCategory",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select * from v_ipg_calendar",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select * from v_ipg_calendar"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIntelCalendarWithCategory"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from v_ipg_calendar</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryIPGCalendarBridge",
        "columns": [
          {
            "name": "Intel Year-Work Week",
            "dataType": "int64",
            "sourceColumn": "Intel Year-Work Week",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "QueryIPGCalendarBridge",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct",
                "[Intel Year-Work Week]",
                "from [v_ipg_calendar]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
                  "[Intel Year-Work Week]",
                  "from [v_ipg_calendar]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct",
              "[Intel Year-Work Week]",
              "from [v_ipg_calendar]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryIPGCalendarBridge"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct",
              "[Intel Year-Work Week]",
              "from [v_ipg_calendar]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryFVRedrop",
        "columns": [
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "milestoneid",
            "dataType": "int64",
            "sourceColumn": "milestoneid",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "trendyyyyww",
            "dataType": "int64",
            "sourceColumn": "trendyyyyww",
            "sourceProviderType": "Integer"
          },
          {
            "name": "drop",
            "dataType": "string",
            "sourceColumn": "drop"
          },
          {
            "name": "iptype",
            "dataType": "string",
            "sourceColumn": "iptype"
          },
          {
            "type": "calculated",
            "name": "UniqueKey_product_milestoneid",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " --QueryFVRedrop[product] & ",
              "QueryFVRedrop[milestoneid]"
            ]
          },
          {
            "name": "requestingproducts",
            "dataType": "string",
            "sourceColumn": "requestingproducts"
          },
          {
            "name": "IP_SOC_Driven",
            "dataType": "string",
            "sourceColumn": "IP_SOC_Driven"
          },
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project"
          }
        ],
        "partitions": [
          {
            "name": "QueryFVRedrop",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select final.*, atlas_product.project ",
                "",
                "from ",
                "",
                "  ",
                "",
                "(select * ",
                "",
                "from v_ipg_fv_redrop_ipdriven  ",
                "",
                "union all ",
                "",
                "select *  ",
                "",
                "from v_ipg_fv_redrop_socdriven) as final ",
                "",
                "  ",
                "",
                "LEFT JOIN (Select distinct Project from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]) atlas_product ",
                "",
                "ON ',' + final.requestingproducts + ',' LIKE '%' + atlas_product.Project + ',%'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select final.*, atlas_product.project ",
                  "",
                  "from ",
                  "",
                  "  ",
                  "",
                  "(select * ",
                  "",
                  "from v_ipg_fv_redrop_ipdriven  ",
                  "",
                  "union all ",
                  "",
                  "select *  ",
                  "",
                  "from v_ipg_fv_redrop_socdriven) as final ",
                  "",
                  "  ",
                  "",
                  "LEFT JOIN (Select distinct Project from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]) atlas_product ",
                  "",
                  "ON ',' + final.requestingproducts + ',' LIKE '%' + atlas_product.Project + ',%'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select final.*, atlas_product.project ",
              "",
              "from ",
              "",
              "  ",
              "",
              "(select * ",
              "",
              "from v_ipg_fv_redrop_ipdriven  ",
              "",
              "union all ",
              "",
              "select *  ",
              "",
              "from v_ipg_fv_redrop_socdriven) as final ",
              "",
              "  ",
              "",
              "LEFT JOIN (Select distinct Project from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]) atlas_product ",
              "",
              "ON ',' + final.requestingproducts + ',' LIKE '%' + atlas_product.Project + ',%'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryFVRedrop"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select final.*, atlas_product.project ",
              "",
              "from ",
              "",
              "  ",
              "",
              "(select * ",
              "",
              "from v_ipg_fv_redrop_ipdriven  ",
              "",
              "union all ",
              "",
              "select *  ",
              "",
              "from v_ipg_fv_redrop_socdriven) as final ",
              "",
              "  ",
              "",
              "LEFT JOIN (Select distinct Project from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]) atlas_product ",
              "",
              "ON ',' + final.requestingproducts + ',' LIKE '%' + atlas_product.Project + ',%'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "Cumulative",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "id",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[id]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Type",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Type]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ww",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ww]"
          },
          {
            "type": "calculated",
            "name": "WWText",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "Cumulative[ww]"
          },
          {
            "type": "calculated",
            "name": "WW_Nbr",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "RIGHT(Cumulative[ww],2)"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "UNION(",
                "SELECTCOLUMNS(Filter(QueryProjectAffected, QueryProjectAffected[ww_submitted_nbr] <> BLANK() ), \"id\", [id], \"Type\", \"ww_submitted_nbr\", \"ww\", [ww_submitted_nbr]),",
                "SELECTCOLUMNS(Filter(QueryProjectAffected, QueryProjectAffected[ww_repo_modified_nbr]<> BLANK() ), \"id\", [id], \"Type\", \"ww_repo_modified_nbr\", \"ww\", [ww_repo_modified_nbr]),",
                "SELECTCOLUMNS(Filter(QueryProjectAffected, QueryProjectAffected[ww_closed_nbr] <> BLANK() ), \"id\", [id], \"Type\", \"ww_closed_nbr\", \"ww\", [ww_closed_nbr]),",
                "SELECTCOLUMNS(WWBridgeTable, \"id\", -1, \"Type\", \"N/A\", \"ww\", WWBridgeTable[ww]",
                "",
                "))"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "Incoming_Cum_Bug",
            "expression": [
              " ",
              "var minwwtext = MIN(Cumulative[WWText])",
              "return",
              "IF(SelectedValue(Cumulative[ww]) in Values(WWBridgeTable[ww]), ",
              "CALCULATE(Count(Cumulative[id]), ",
              "    Filter(ALLSELECTED(Cumulative), Cumulative[WW]<=MAX(Cumulative[WW]))",
              ", Cumulative[id] in VALUES(QueryProjectAffected[id])",
              ", Cumulative[Type] = \"ww_submitted_nbr\"",
              ") +0, -1)"
            ]
          },
          {
            "name": "Closed_Cum_Bug",
            "expression": [
              " ",
              "var minwwtext = MIN(Cumulative[WWText])",
              "return",
              "IF(SelectedValue(Cumulative[ww]) in Values(WWBridgeTable[ww]), ",
              "CALCULATE(Count(Cumulative[id]), ",
              "    Filter(ALLSELECTED(Cumulative), Cumulative[WW]<=MAX(Cumulative[WW]))",
              ", Cumulative[id] in VALUES(QueryProjectAffected[id])",
              ", Cumulative[Type] = \"ww_closed_nbr\"",
              ") +0, -1)"
            ]
          },
          {
            "name": "Repo_Modified_Cum_Bug",
            "expression": [
              " ",
              "var minwwtext = MIN(Cumulative[WWText])",
              "return",
              "IF(SelectedValue(Cumulative[ww]) in Values(WWBridgeTable[ww]), ",
              "CALCULATE(Count(Cumulative[id]), ",
              "    Filter(ALLSELECTED(Cumulative), Cumulative[WW]<=MAX(Cumulative[WW]))",
              ", Cumulative[id] in VALUES(QueryProjectAffected[id])",
              ", Cumulative[Type] = \"ww_repo_modified_nbr\"",
              ") +0, -1)"
            ]
          }
        ]
      },
      {
        "name": "IndependentWWBridge",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "WW",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[WW]"
          },
          {
            "type": "calculated",
            "name": "WWText",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "[WW]"
          },
          {
            "type": "calculated",
            "name": "IsFutureWW",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(IndependentWWBridge[WW]>=MAX(QueryProjectAffected[ww]),0,1)"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "Distinct(SELECTCOLUMNS(IndependentCalendar, \"WW\", [ww]))"
            }
          }
        ]
      },
      {
        "name": "IndependentCalendar",
        "columns": [
          {
            "name": "category",
            "dataType": "string",
            "sourceColumn": "category",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "category_order",
            "dataType": "int64",
            "sourceColumn": "category_order",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Intel Year",
            "dataType": "int64",
            "sourceColumn": "Intel Year",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Intel Quarter",
            "dataType": "string",
            "sourceColumn": "Intel Quarter",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ww",
            "dataType": "int64",
            "sourceColumn": "ww",
            "sourceProviderType": "Integer"
          }
        ],
        "partitions": [
          {
            "name": "IndependentCalendar",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "/*select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
                "",
                "UNION",
                "",
                "select category, category_order, [Intel Year], [Intel Quarter], ww from",
                "(select 'Last 6ww' as category, 3 as category_order, 1 as [join]) a",
                "JOIN",
                "(select distinct [Intel Year], [Intel Quarter], [Intel Year-Work Week] as ww, 1 as [join] from v_ipg_calendar",
                "where 1=1 ",
                "and [Intel Year-Work Week] > (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')-6",
                "and [Intel Year-Work Week] <= (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')",
                "",
                ") b",
                "on a.join = b.join",
                "*/",
                "",
                "/*Comment above query as it was failing with ODBC LINK issues*/",
                "",
                "select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
                "",
                "UNION",
                "",
                "select distinct 'Last 6ww' as category, 3 as category_order ,[Intel Year], [Intel Quarter], [Intel Year-Work Week] as ww from v_ipg_calendar",
                "where 1=1 ",
                "and [Intel Year-Work Week] > (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')-6",
                "and [Intel Year-Work Week] <= (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
                  "",
                  "UNION",
                  "",
                  "select category, category_order, [Intel Year], [Intel Quarter], ww from",
                  "(select 'Last 6ww' as category, 3 as category_order, 1 as [join]) a",
                  "JOIN",
                  "(select distinct [Intel Year], [Intel Quarter], [Intel Year-Work Week] as ww, 1 as [join] from v_ipg_calendar",
                  "where 1=1 ",
                  "and [Intel Year-Work Week] > (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')-6",
                  "and [Intel Year-Work Week] <= (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')",
                  "",
                  ") b",
                  "on a.join = b.join",
                  "*/",
                  "",
                  "/*Comment above query as it was failing with ODBC LINK issues*/",
                  "",
                  "select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
                  "",
                  "UNION",
                  "",
                  "select distinct 'Last 6ww' as category, 3 as category_order ,[Intel Year], [Intel Quarter], [Intel Year-Work Week] as ww from v_ipg_calendar",
                  "where 1=1 ",
                  "and [Intel Year-Work Week] > (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')-6",
                  "and [Intel Year-Work Week] <= (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "/*select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
              "",
              "UNION",
              "",
              "select category, category_order, [Intel Year], [Intel Quarter], ww from",
              "(select 'Last 6ww' as category, 3 as category_order, 1 as [join]) a",
              "JOIN",
              "(select distinct [Intel Year], [Intel Quarter], [Intel Year-Work Week] as ww, 1 as [join] from v_ipg_calendar",
              "where 1=1 ",
              "and [Intel Year-Work Week] > (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')-6",
              "and [Intel Year-Work Week] <= (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')",
              "",
              ") b",
              "on a.join = b.join",
              "*/",
              "",
              "/*Comment above query as it was failing with ODBC LINK issues*/",
              "",
              "select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
              "",
              "UNION",
              "",
              "select distinct 'Last 6ww' as category, 3 as category_order ,[Intel Year], [Intel Quarter], [Intel Year-Work Week] as ww from v_ipg_calendar",
              "where 1=1 ",
              "and [Intel Year-Work Week] > (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')-6",
              "and [Intel Year-Work Week] <= (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "IndependentCalendar"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>/*select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
              "",
              "UNION",
              "",
              "select category, category_order, [Intel Year], [Intel Quarter], ww from",
              "(select 'Last 6ww' as category, 3 as category_order, 1 as [join]) a",
              "JOIN",
              "(select distinct [Intel Year], [Intel Quarter], [Intel Year-Work Week] as ww, 1 as [join] from v_ipg_calendar",
              "where 1=1 ",
              "and [Intel Year-Work Week] > (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')-6",
              "and [Intel Year-Work Week] <= (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')",
              "",
              ") b",
              "on a.join = b.join",
              "*/",
              "",
              "/*Comment above query as it was failing with ODBC LINK issues*/",
              "",
              "select distinct category, category_order, [Intel Year], [Intel Quarter],  [Intel Year-Work Week] as ww from v_ipg_calendar",
              "",
              "UNION",
              "",
              "select distinct 'Last 6ww' as category, 3 as category_order ,[Intel Year], [Intel Quarter], [Intel Year-Work Week] as ww from v_ipg_calendar",
              "where 1=1 ",
              "and [Intel Year-Work Week] > (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')-6",
              "and [Intel Year-Work Week] <= (select max([Intel Year-Work Week]) from v_ipg_calendar where category='Last 2ww')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryFVRedropBridge",
        "columns": [
          {
            "name": "milestoneid",
            "dataType": "int64",
            "sourceColumn": "milestoneid",
            "sourceProviderType": "BigInt"
          }
        ],
        "partitions": [
          {
            "name": "QueryFVRedropBridge",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct milestoneid ",
                "from [v_ipg_fv_redrop_ipdriven] ",
                "",
                "union ",
                "",
                "select distinct milestoneid ",
                "from [v_ipg_fv_redrop_socdriven]"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct milestoneid ",
                  "from [v_ipg_fv_redrop_ipdriven] ",
                  "",
                  "union ",
                  "",
                  "select distinct milestoneid ",
                  "from [v_ipg_fv_redrop_socdriven]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct milestoneid ",
              "from [v_ipg_fv_redrop_ipdriven] ",
              "",
              "union ",
              "",
              "select distinct milestoneid ",
              "from [v_ipg_fv_redrop_socdriven]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryFVRedropBridge"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct milestoneid ",
              "from [v_ipg_fv_redrop_ipdriven] ",
              "",
              "union ",
              "",
              "select distinct milestoneid ",
              "from [v_ipg_fv_redrop_socdriven]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "DEG_Product_Manual_TI",
        "columns": [
          {
            "name": "SoC Die",
            "dataType": "string",
            "sourceColumn": "SoC Die",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TI Date",
            "dataType": "string",
            "sourceColumn": "TI Date",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ibi_updated_date",
            "dataType": "dateTime",
            "sourceColumn": "ibi_updated_date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          }
        ],
        "partitions": [
          {
            "name": "DEG_Product_Manual_TI",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select * from [IPG_Product_Manual_TI]",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from [IPG_Product_Manual_TI]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select * from [IPG_Product_Manual_TI]"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "DEG_Product_Manual_TI"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from [IPG_Product_Manual_TI]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryBreakProjectAffectedOrig",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Count",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Count]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "project_affected_orig",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[project_affected_orig]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProjectAffected",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ProjectAffected]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "id",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[id]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IPFamily",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[IPFamily]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "bug_category",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[bug_category]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IPSupplier",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[IPSupplier]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "sub_bugcategory",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[sub_bugcategory]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "status",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[status]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "retro_status",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[retro_status]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "bugeco.env_found",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[bugeco.env_found]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "priority",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[priority]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "bugeco.team_found",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "QueryProjectAffected[bugeco.team_found]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "  ",
                "Var calTable = ",
                "CALCULATETABLE(ADDCOLUMNS (FILTER(CROSSJOIN(SUMMARIZE(QueryProjectAffected,[project_affected_orig], [id], [IPFamily], [bug_category], [IPSupplier], [sub_bugcategory], [bugeco.env_found], [status], [retro_status],  [priority], [bugeco.team_found], \"Count\", 1 + LEN([project_affected_orig]) - LEN(SUBSTITUTE([project_affected_orig], \",\",\"\"))), ",
                "GENERATESERIES(1, [MaxProjectAffected], 1)), [Value]<= [Count]),\"ProjectAffected\", PATHITEM(SUBSTITUTE(QueryProjectAffected[project_affected_orig], \",\", \"|\"), [Value])))",
                "return Filter(calTable, [ProjectAffected] in Values(QueryActiveAffectedProjects[project]))"
              ]
            }
          }
        ]
      },
      {
        "name": "QueryProjectAffectedBridge",
        "columns": [
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id"
          }
        ],
        "partitions": [
          {
            "name": "QueryAffectedProjectBridge",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select distinct [id] from v_ipg_bug_project_affected",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [id] from v_ipg_bug_project_affected</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "totalbugbridge",
            "expression": " DISTINCTCOUNT(QueryProjectAffectedBridge[id])"
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select distinct [id] from v_ipg_bug_project_affected"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryAffectedProjectBridge"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct [id] from v_ipg_bug_project_affected</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "QueryActiveAffectedProjects",
        "columns": [
          {
            "name": "project",
            "dataType": "string",
            "sourceColumn": "project",
            "sourceProviderType": "VarChar"
          }
        ],
        "partitions": [
          {
            "name": "QueryActiveAffectedProjects",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct project from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                "where 1=1",
                "and ([Planning State] not like '%Cancelled%' and [Planning State] not like '%Completed%' and [Planning State] not like '%Delete%' and [Planning State] not like '%Abandoned%')"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct project from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
                  "where 1=1",
                  "and ([Planning State] not like '%Cancelled%' and [Planning State] not like '%Completed%' and [Planning State] not like '%Delete%' and [Planning State] not like '%Abandoned%')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct project from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "where 1=1",
              "and ([Planning State] not like '%Cancelled%' and [Planning State] not like '%Completed%' and [Planning State] not like '%Delete%' and [Planning State] not like '%Abandoned%')"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryActiveAffectedProjects"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct project from [V_ATLAS_PRODUCT_MILESTONES_WITH_PROPERTIES]",
              "where 1=1",
              "and ([Planning State] not like '%Cancelled%' and [Planning State] not like '%Completed%' and [Planning State] not like '%Delete%' and [Planning State] not like '%Abandoned%')</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "QueryCarbon",
        "columns": [
          {
            "name": "reuse",
            "dataType": "string",
            "sourceColumn": "reuse",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "configuration",
            "dataType": "string",
            "sourceColumn": "configuration",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "leadproduct",
            "dataType": "string",
            "sourceColumn": "leadproduct",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Process",
            "dataType": "string",
            "sourceColumn": "Process",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IpType",
            "dataType": "string",
            "sourceColumn": "IpType",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "HIP/SIP",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF([IpType] in {\"SIP\",\"Software\"},\"SIP\",if([IpType]in {\"HIP\", \"superHIP\"}, \"HIP\", [IpType]))"
          }
        ],
        "partitions": [
          {
            "name": "QueryCarbon",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select distinct reuse, configuration, leadproduct",
                ",CASE WHEN CHARINDEX('.',process)>0 ",
                "           THEN SUBSTRING(process,1,CHARINDEX('.',process)-1) ",
                "           ELSE process",
                "",
                "END as [Process]",
                ",[IpType] ",
                "from v_ipg_carbon_milestone",
                "where devorg = 'ipg'"
              ],
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct reuse, configuration, leadproduct",
                  ",CASE WHEN CHARINDEX('.',process)>0 ",
                  "           THEN SUBSTRING(process,1,CHARINDEX('.',process)-1) ",
                  "           ELSE process",
                  "",
                  "END as [Process]",
                  ",[IpType] ",
                  "from v_ipg_carbon_milestone",
                  "where devorg = 'ipg'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select distinct reuse, configuration, leadproduct",
              ",CASE WHEN CHARINDEX('.',process)>0 ",
              "           THEN SUBSTRING(process,1,CHARINDEX('.',process)-1) ",
              "           ELSE process",
              "",
              "END as [Process]",
              ",[IpType] ",
              "from v_ipg_carbon_milestone",
              "where devorg = 'ipg'"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryCarbon"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select distinct reuse, configuration, leadproduct",
              ",CASE WHEN CHARINDEX('.',process)>0 ",
              "           THEN SUBSTRING(process,1,CHARINDEX('.',process)-1) ",
              "           ELSE process",
              "",
              "END as [Process]",
              ",[IpType] ",
              "from v_ipg_carbon_milestone",
              "where devorg = 'ipg'</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "Column_slicer",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Item",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Item]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "UNION(ROW(\"Item\",\"id\"),ROW(\"Item\",\"url\"),ROW(\"item\",\"ip_supplier\"),ROW(\"item\",\"SOC Die\"),ROW(\"item\",\"IPFamily\"),ROW(\"item\",\"is_found_bySoc\"),ROW(\"item\",\"is_PreSiPostSi\"),ROW(\"item\",\"sub_bugcategory\"),ROW(\"item\",\"ww_submitted_date\"),ROW(\"item\",\"SubmittedYear_Quarter\"),ROW(\"item\",\"title\"),ROW(\"item\",\"bug_category\"),ROW(\"item\",\"status\"),ROW(\"item\",\"status_detail\"),ROW(\"item\",\"priority\"),ROW(\"item\",\"owner\"),ROW(\"item\",\"ccb_prq_gating\"),ROW(\"item\",\"retro_status\"),ROW(\"item\",\"retro_ip_escape\"),ROW(\"item\",\"retro_global_action\"),ROW(\"item\",\"retro_global_learning\"),ROW(\"item\",\"retro_analysis\"),ROW(\"item\",\"retro_learnings\"),ROW(\"item\",\"component\"),ROW(\"item\",\"Configuration\"),ROW(\"item\",\"release_affected\"),ROW(\"item\",\"tenant\"),ROW(\"item\",\"from_tenant\"),ROW(\"item\",\"submitted_by\"),ROW(\"item\",\"updated_by\"),ROW(\"item\",\"resolutionSLA\"),ROW(\"item\",\"responseSLA\"),ROW(\"item\",\"bugeco.env_found\"),ROW(\"item\",\"team_found\"),ROW(\"item\",\"bugeco.type\"),ROW(\"item\",\"ingredient\"),ROW(\"item\",\"closed_date\"),ROW(\"item\",\"ww_closed_date\"),ROW(\"item\",\"ww_updated_date\"),ROW(\"item\",\"repo_modified_date\"),ROW(\"item\",\"ww_repo_modified_date\"),ROW(\"item\",\"sla_resolution_met\"))"
            }
          }
        ]
      },
      {
        "name": "QueryHandoff",
        "columns": [
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "release",
            "dataType": "string",
            "sourceColumn": "release",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "family",
            "dataType": "string",
            "sourceColumn": "family",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "status",
            "dataType": "string",
            "sourceColumn": "status",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "owner",
            "dataType": "string",
            "sourceColumn": "owner",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "tenant",
            "dataType": "string",
            "sourceColumn": "tenant",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "priority",
            "dataType": "string",
            "sourceColumn": "priority",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ww_submitted_date",
            "dataType": "string",
            "sourceColumn": "ww_submitted_date",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ww_closed_date",
            "dataType": "int64",
            "sourceColumn": "ww_closed_date"
          },
          {
            "name": "ww_open_date",
            "dataType": "int64",
            "sourceColumn": "ww_open_date"
          },
          {
            "type": "calculated",
            "name": "currentww",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " MAX(IntelYearWW[Intel Year-Work Week])"
          },
          {
            "type": "calculated",
            "name": "submitted_date",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " CONVERT(SUBSTITUTE([ww_submitted_date], \"ww\", \"\"), INTEGER)"
          }
        ],
        "partitions": [
          {
            "name": "QueryHandoff",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": "select * from v_ipg_bug_handoff",
              "dataSource": "Custom"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from v_ipg_bug_handoff</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Total_Incoming_Handoff",
            "expression": [
              "CALCULATE([TotalAllID_Handoff], FILTER(QueryHandoff, QueryHandoff[submitted_date] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              ", DynamicProjectAffectedCalendarBridge[ww_submitted_nbr] <> BLANK()) + 0"
            ]
          },
          {
            "name": "TotalAllID_Handoff",
            "expression": " COUNTA(QueryHandoff[ID])"
          },
          {
            "name": "Total_Closed_Handoff",
            "expression": [
              "CALCULATE([TotalAllID_Handoff], ",
              "FILTER(QueryHandoff, QueryHandoff[ww_closed_date] in VALUES(IntelYearWW[Intel Year-Work Week]))",
              "--, QueryBug[status] in {\"complete\", \"rejected\"}",
              ", QueryHandoff[ww_closed_date] <> -1) + 0"
            ]
          },
          {
            "name": "Total_PendingBug_BugEscape_Handoff",
            "expression": [
              " CALCULATE([Bug_Handoff], FILTER(QueryHandoff, ",
              "QueryHandoff[submitted_date] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              ")",
              "",
              ") +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryHandoff[currentww], 1), 0, BLANK()) + 0"
            ]
          },
          {
            "name": "Bug_Handoff",
            "expression": " CALCULATE(DISTINCTCOUNT(QueryHandoff[id])) "
          },
          {
            "name": "Total_Incoming_4wk_Handoff",
            "expression": [
              "CALCULATE([TotalAllID_Handoff], ",
              "FILTER(QueryHandoff, QueryHandoff[submitted_date]<= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryHandoff[submitted_date] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(MAX(IntelYearWW[Intel Year-Work Week]), 2))<= 4, 51, 3) )",
              ",QueryHandoff[submitted_date] <> BLANK()",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryHandoff[currentww], 1), 0, BLANK()) + 0"
            ]
          },
          {
            "name": "Total_Closed_4wk_Handoff",
            "expression": [
              "CALCULATE([TotalAllID_Handoff], ",
              "FILTER(QueryHandoff, QueryHandoff[ww_closed_date] <= MAX(IntelYearWW[Intel Year-Work Week]) ",
              "    && QueryHandoff[ww_closed_date] >= MAX(IntelYearWW[Intel Year-Work Week]) - IF(VALUE(RIGHT(max(IntelYearWW[Intel Year-Work Week]), 2)) <= 4, 51, 3) )",
              "--,QueryBug[status] in {\"complete\", \"rejected\"}",
              ",QueryHandoff[ww_closed_date] <> -1",
              ") / 4 +  IF(MAX(IntelYearWW[Intel Year-Work Week]) <= LASTNONBLANK(QueryHandoff[currentww], 1), 0, BLANK()) + 0"
            ]
          },
          {
            "name": "Total_PendingBug_BugEscape_Zero_Handoff",
            "expression": "[Total_PendingBug_BugEscape_Handoff]+0"
          },
          {
            "name": "column_name_handoff",
            "expression": "SWITCH(LASTNONBLANK(ColumnSlicer_Handoff[Item],1),\"family\",LASTNONBLANK(QueryHandoff[family],1),\"id\",LASTNONBLANK(QueryHandoff[id],1),\"owner\",LASTNONBLANK(QueryHandoff[owner],1),\"priority\",LASTNONBLANK(QueryHandoff[priority],1),\"release\",LASTNONBLANK(QueryHandoff[release],1),\"status\",LASTNONBLANK(QueryHandoff[status],1),\"submitted_date\",LASTNONBLANK(QueryHandoff[submitted_date],1),\"tenant\",LASTNONBLANK(QueryHandoff[tenant],1),\"ww_submitted_date\",LASTNONBLANK(QueryHandoff[ww_submitted_date],1),\"ww_closed_date\",LASTNONBLANK(QueryBug[ww_closed_date],1),\"ww_open_date\",LASTNONBLANK(QueryHandoff[ww_open_date],1)) "
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": "select * from v_ipg_bug_handoff"
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "QueryHandoff"
          },
          {
            "name": "QueryEditorSerialization",
            "value": "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * from v_ipg_bug_handoff</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
          }
        ]
      },
      {
        "name": "ColumnSlicer_Handoff",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Item",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Item]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": " UNION(ROW(\"Item\",\"family\"),ROW(\"Item\",\"id\"),ROW(\"item\",\"owner\"),ROW(\"item\",\"priority\"),ROW(\"item\",\"release\"),ROW(\"item\",\"status\"),ROW(\"item\",\"submitted_date\"),ROW(\"item\",\"tenant\"),ROW(\"item\",\"ww_closed_date\"),ROW(\"item\",\"ww_submitted_date\"),ROW(\"item\",\"ww_open_date\"))"
            }
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "384ae2b2-aabd-4c63-9178-6f89996ccb54",
        "fromTable": "QueryBug",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "QueryIntelWW",
        "toColumn": "Intel Year-Work Week"
      },
      {
        "name": "dbaaa928-7739-4d1e-8eb8-5c45d877a449",
        "fromTable": "QueryBug",
        "fromColumn": "family",
        "toTable": "QueryCIGActiveIP",
        "toColumn": "family.name"
      },
      {
        "name": "eb8f24d3-751b-42d3-b3f4-9baefeee4876",
        "fromTable": "QueryBug",
        "fromColumn": "ww_trend",
        "toTable": "QueryTrendWW",
        "toColumn": "ww_trend"
      },
      {
        "name": "0013dba1-aed9-4a4d-ab55-a91d316af7ad",
        "fromTable": "QueryBug",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "QueryIntelCalendar",
        "toColumn": "Intel Year-Work Week"
      },
      {
        "name": "425dd455-7b76-4e6e-8ea5-8bbde08d560b",
        "fromTable": "QueryBug",
        "fromColumn": "IPSupplier",
        "toTable": "QueryDevGroup",
        "toColumn": "devgroup"
      },
      {
        "name": "706f30c1-6cdb-4875-9aea-a3ac56214fbd",
        "fromTable": "QueryBug",
        "fromColumn": "IntelYearQuarterSort",
        "toTable": "QueryQuarter",
        "toColumn": "Year_Quarter"
      },
      {
        "name": "edfc1cab-22a9-4b42-9f03-d31439837838",
        "fromTable": "QueryBug",
        "fromColumn": "family, soc",
        "toTable": "soc_family",
        "toColumn": "family, soc",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "9b689f2d-deba-4665-bebf-623bea475675",
        "fromTable": "QueryProjectAffected",
        "fromColumn": "IPSupplier",
        "toTable": "QueryDevGroup",
        "toColumn": "devgroup"
      },
      {
        "name": "b7516977-41e3-44c7-8ac7-aee55000bac5",
        "fromTable": "soc_dates",
        "fromColumn": "DieName",
        "toTable": "soc_key",
        "toColumn": "DieName",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "1f0e14f0-3c19-4d6d-bb65-4b3e003e0dc3",
        "fromTable": "QueryBug",
        "fromColumn": "project",
        "toTable": "QueryTestChip",
        "toColumn": "product"
      },
      {
        "name": "c808aed9-a5bd-41aa-a272-3f5b17b572ee",
        "fromTable": "QueryBug",
        "fromColumn": "release",
        "toTable": "QueryRTL1p0",
        "toColumn": "configuration"
      },
      {
        "name": "314f27fb-037d-435c-9687-adc220b4b18b",
        "fromTable": "QueryBug",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "QueryIntelWWYear",
        "toColumn": "WWSubmitted"
      },
      {
        "name": "2ac7abab-904f-4a1b-9745-9c4b375077ce",
        "fromTable": "QueryBug",
        "fromColumn": "YearMonth_submitted",
        "toTable": "QueryMonth",
        "toColumn": "IntelYear_Month"
      },
      {
        "name": "e1da82ca-0570-470f-911d-ce3b0fa2ef17",
        "fromTable": "DynamicAxis",
        "fromColumn": "AxisId",
        "toTable": "QueryBug",
        "toColumn": "id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "a2fd9025-7438-4f1d-97f7-19afbf98d957",
        "fromTable": "DynamicLegend",
        "fromColumn": "LegendId",
        "toTable": "QueryBug",
        "toColumn": "id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "38cb1fd0-5429-4473-995e-7f5d9d02ca07",
        "fromTable": "QueryProjectAffected",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "QueryIntelWWYear",
        "toColumn": "WWSubmitted"
      },
      {
        "name": "8a5b9f84-3aad-406d-87f8-0b60f8c877c2",
        "fromTable": "DynamicProjectAffectedCalendar",
        "fromColumn": "WW",
        "toTable": "DynamicProjectAffectedCalendarBridge",
        "toColumn": "ww_submitted_nbr",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "f2499c7c-94cb-4a74-9799-6c906bc96266",
        "fromTable": "QueryProjectAffected",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "DynamicProjectAffectedCalendarBridge",
        "toColumn": "ww_submitted_nbr",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "d37e5c70-dbc0-462a-a225-c9db0ca3f905",
        "fromTable": "DynamicCalendar",
        "fromColumn": "id",
        "toTable": "QueryBug",
        "toColumn": "id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "4adc9f3f-5bbb-4688-be35-6fff7c5008a3",
        "fromTable": "QueryBug",
        "fromColumn": "Lineage_ID_Unique",
        "toTable": "QueryLineageClientSoCChipsetBug",
        "toColumn": "lineage",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "a9a2ecfa-082a-4da1-a3a1-b6a42ecafc5d",
        "fromTable": "QueryBug",
        "fromColumn": "Soc Die",
        "toTable": "QueryTapein",
        "toColumn": "project"
      },
      {
        "name": "e2eedf84-13de-4a5d-a5fd-21292c686b17",
        "fromTable": "QueryBug",
        "fromColumn": "project",
        "toTable": "soc_key",
        "toColumn": "DieName",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "832d1a77-fd8e-40f5-ad54-92ea1601a9b3",
        "fromTable": "QueryBOM",
        "fromColumn": "Configuration",
        "toTable": "BridgeTableForConfiguration",
        "toColumn": "Configuration",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "97aae594-66f2-4a2e-b597-748007852177",
        "fromTable": "QueryBug",
        "fromColumn": "Configuration",
        "toTable": "BridgeTableForConfiguration",
        "toColumn": "Configuration",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "2e4efbfa-f541-4bf9-91a0-5f2d7209aaa5",
        "fromTable": "QueryBug",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "WWBridgeTable",
        "toColumn": "ww"
      },
      {
        "name": "97d8476e-b153-4ec7-9c57-af293c3f1ab6",
        "fromTable": "QueryDynamicCalendar",
        "fromColumn": "ww",
        "toTable": "WWBridgeTable",
        "toColumn": "ww",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "eb8270c3-9e4b-4cca-862d-ffa78d5d70a8",
        "fromTable": "DynamicForPieChart",
        "fromColumn": "AxisId",
        "toTable": "QueryBug",
        "toColumn": "id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "757b64f0-a8a3-4b6a-b161-f626f5dfb95b",
        "fromTable": "QueryIPGCalendar",
        "fromColumn": "Intel Year-Work Week",
        "toTable": "QueryIPGCalendarBridge",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "ecc2e78b-482b-4ad4-b0c5-7651de18b3ae",
        "fromTable": "QueryBug",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "QueryIPGCalendarBridge",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "d2d16f20-9a19-4647-84a1-e5ede0f8ef96",
        "fromTable": "QueryProjectAffected",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "QueryIntelWW",
        "toColumn": "Intel Year-Work Week"
      },
      {
        "name": "09c439a9-b3c0-4eb2-ab06-3b9e85de52a3",
        "fromTable": "IndependentCalendar",
        "fromColumn": "ww",
        "toTable": "IndependentWWBridge",
        "toColumn": "WW",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "83bee641-a5be-4866-822e-f79b41d04cd4",
        "fromTable": "Cumulative",
        "fromColumn": "ww",
        "toTable": "IndependentWWBridge",
        "toColumn": "WW"
      },
      {
        "name": "7995723b-4d4d-431f-b6c3-83265695dd89",
        "fromTable": "Cumulative",
        "fromColumn": "ww",
        "toTable": "WWBridgeTable",
        "toColumn": "ww"
      },
      {
        "name": "2aa9db86-56d2-4e63-87de-f2d96e9ddac4",
        "fromTable": "QueryProjectAffected",
        "fromColumn": "ww_submitted_nbr",
        "toTable": "WWBridgeTable",
        "toColumn": "ww"
      },
      {
        "name": "c0ddf75a-4466-4080-acff-313d10cadbab",
        "fromTable": "QueryBug",
        "fromColumn": "UniqueKey_redrops",
        "toTable": "QueryFVRedropBridge",
        "toColumn": "milestoneid",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "5bbee4d0-c835-4bbc-9331-38c42d75e450",
        "fromTable": "QueryFVRedrop",
        "fromColumn": "UniqueKey_product_milestoneid",
        "toTable": "QueryFVRedropBridge",
        "toColumn": "milestoneid",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "a47bf3e7-ca37-470f-a3af-939ae03f4396",
        "fromTable": "QueryBug",
        "fromColumn": "project",
        "toTable": "DEG_Product_Manual_TI",
        "toColumn": "SoC Die"
      },
      {
        "name": "52ba630c-7f8b-4431-8255-d34e0be6f0ca",
        "fromTable": "QueryProjectAffected",
        "fromColumn": "id",
        "toTable": "QueryProjectAffectedBridge",
        "toColumn": "id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "aeac1ee1-71bc-4764-8d5b-d7c00cb3f9d6",
        "fromTable": "QueryBreakProjectAffectedOrig",
        "fromColumn": "id",
        "toTable": "QueryProjectAffectedBridge",
        "toColumn": "id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "1788a0cd-e601-428b-aeb0-48a128261410",
        "fromTable": "QueryProjectAffectedDynamicLegend",
        "fromColumn": "LegendId",
        "toTable": "QueryProjectAffectedBridge",
        "toColumn": "id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "28d0d62a-6b9c-46d5-afec-12014aec5d83",
        "fromTable": "QueryProjectAffectDynamicAxis",
        "fromColumn": "AxisId",
        "toTable": "QueryProjectAffectedBridge",
        "toColumn": "id",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "e13b604b-5bce-4012-8d25-ba2c2f3b0edb",
        "fromTable": "QueryBug",
        "fromColumn": "release",
        "toTable": "QueryGladius",
        "toColumn": "configuration"
      },
      {
        "name": "3763acdf-345f-48d8-9f5f-20ceb8f6f256",
        "fromTable": "QueryProjectAffected",
        "fromColumn": "release",
        "toTable": "QueryGladius",
        "toColumn": "configuration"
      },
      {
        "name": "51d5ba1e-9191-4bca-9f6a-e9f6ad4529ee",
        "fromTable": "QueryBug",
        "fromColumn": "release",
        "toTable": "QueryCarbon",
        "toColumn": "configuration"
      },
      {
        "name": "b8b44e67-eeab-4907-9aa1-74c67e612a57",
        "fromTable": "QueryHandoff",
        "fromColumn": "ww_submitted_date",
        "toTable": "IntelYearWW",
        "toColumn": "Intel Year-Work Week",
        "crossFilteringBehavior": "bothDirections"
      }
    ],
    "roles": [
      {
        "name": "CIG_SuperUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\EIG_Superusers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-2795134"
          }
        ]
      },
      {
        "name": "CIG_ExternalUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\EIG_Users",
            "memberId": "S-1-5-21-725345543-602162358-527237240-2795135"
          }
        ]
      },
      {
        "name": "IPG_users",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "S-1-5-21-725345543-602162358-527237240-4561261",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4561261"
          }
        ]
      },
      {
        "name": "IPG_Developers",
        "modelPermission": "administrator",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Developers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603422"
          }
        ]
      },
      {
        "name": "IPG_InternalUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_SuperUsers",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603439"
          }
        ]
      },
      {
        "name": "IPG_ExternalUsers",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "AMR\\IPG_Dashboard_Users",
            "memberId": "S-1-5-21-725345543-602162358-527237240-4603440"
          }
        ]
      },
      {
        "name": "PAS_BIS_Developer",
        "modelPermission": "read",
        "members": [
          {
            "memberName": "GER\\pas_bis_developer",
            "memberId": "S-1-5-21-2052111302-1275210071-1644491937-1027479"
          }
        ]
      }
    ]
  },
  "id": "SemanticModel"
}